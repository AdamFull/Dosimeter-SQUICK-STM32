
GEIGERCOUNTER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e68  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08008f74  08008f74  00018f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009054  08009054  000200f0  2**0
                  CONTENTS
  4 .ARM          00000000  08009054  08009054  000200f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009054  08009054  000200f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009054  08009054  00019054  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009058  08009058  00019058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f0  20000000  0800905c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f4c  200000f0  0800914c  000200f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000203c  0800914c  0002203c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e7e6  00000000  00000000  00020119  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000043a4  00000000  00000000  0003e8ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001920  00000000  00000000  00042ca8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001750  00000000  00000000  000445c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001934d  00000000  00000000  00045d18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000162e1  00000000  00000000  0005f065  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000800c0  00000000  00000000  00075346  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f5406  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006760  00000000  00000000  000f5484  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000f0 	.word	0x200000f0
 8000128:	00000000 	.word	0x00000000
 800012c:	08008f5c 	.word	0x08008f5c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000f4 	.word	0x200000f4
 8000148:	08008f5c 	.word	0x08008f5c

0800014c <Init_memory>:

void Reset_to_defaults(){

}

bool Init_memory(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	return f_mount(&USERFatFS, "", 1);
 8000150:	2201      	movs	r2, #1
 8000152:	4906      	ldr	r1, [pc, #24]	; (800016c <Init_memory+0x20>)
 8000154:	4806      	ldr	r0, [pc, #24]	; (8000170 <Init_memory+0x24>)
 8000156:	f008 fa21 	bl	800859c <f_mount>
 800015a:	4603      	mov	r3, r0
 800015c:	2b00      	cmp	r3, #0
 800015e:	bf14      	ite	ne
 8000160:	2301      	movne	r3, #1
 8000162:	2300      	moveq	r3, #0
 8000164:	b2db      	uxtb	r3, r3
}
 8000166:	4618      	mov	r0, r3
 8000168:	bd80      	pop	{r7, pc}
 800016a:	bf00      	nop
 800016c:	08008f74 	.word	0x08008f74
 8000170:	200008dc 	.word	0x200008dc

08000174 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000174:	b580      	push	{r7, lr}
 8000176:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000178:	f001 f92c 	bl	80013d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800017c:	f000 f82e 	bl	80001dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000180:	f000 fac8 	bl	8000714 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000184:	f000 f888 	bl	8000298 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000188:	f000 f8c4 	bl	8000314 <MX_ADC2_Init>
  MX_TIM1_Init();
 800018c:	f000 f96e 	bl	800046c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000190:	f000 f9be 	bl	8000510 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000194:	f000 fa48 	bl	8000628 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 8000198:	f008 faa4 	bl	80086e4 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 800019c:	f000 f8f8 	bl	8000390 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80001a0:	f000 fa8e 	bl	80006c0 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 80001a4:	f000 f92c 	bl	8000400 <MX_SPI2_Init>
  MX_FATFS_Init();
 80001a8:	f005 fcc4 	bl	8005b34 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 80001ac:	4808      	ldr	r0, [pc, #32]	; (80001d0 <main+0x5c>)
 80001ae:	f003 fde0 	bl	8003d72 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 80001b2:	4808      	ldr	r0, [pc, #32]	; (80001d4 <main+0x60>)
 80001b4:	f003 fddd 	bl	8003d72 <HAL_TIM_Base_Start_IT>
  if(Init_memory()){
 80001b8:	f7ff ffc8 	bl	800014c <Init_memory>
 80001bc:	4603      	mov	r3, r0
 80001be:	2b00      	cmp	r3, #0
 80001c0:	d005      	beq.n	80001ce <main+0x5a>
  	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80001c2:	2201      	movs	r2, #1
 80001c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001c8:	4803      	ldr	r0, [pc, #12]	; (80001d8 <main+0x64>)
 80001ca:	f001 fdf9 	bl	8001dc0 <HAL_GPIO_WritePin>
   }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001ce:	e7fe      	b.n	80001ce <main+0x5a>
 80001d0:	20000790 	.word	0x20000790
 80001d4:	200006e0 	.word	0x200006e0
 80001d8:	40011000 	.word	0x40011000

080001dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	b094      	sub	sp, #80	; 0x50
 80001e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001e6:	2228      	movs	r2, #40	; 0x28
 80001e8:	2100      	movs	r1, #0
 80001ea:	4618      	mov	r0, r3
 80001ec:	f008 feae 	bl	8008f4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001f0:	f107 0314 	add.w	r3, r7, #20
 80001f4:	2200      	movs	r2, #0
 80001f6:	601a      	str	r2, [r3, #0]
 80001f8:	605a      	str	r2, [r3, #4]
 80001fa:	609a      	str	r2, [r3, #8]
 80001fc:	60da      	str	r2, [r3, #12]
 80001fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000200:	1d3b      	adds	r3, r7, #4
 8000202:	2200      	movs	r2, #0
 8000204:	601a      	str	r2, [r3, #0]
 8000206:	605a      	str	r2, [r3, #4]
 8000208:	609a      	str	r2, [r3, #8]
 800020a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800020c:	2301      	movs	r3, #1
 800020e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000210:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000214:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000216:	2300      	movs	r3, #0
 8000218:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800021a:	2301      	movs	r3, #1
 800021c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800021e:	2302      	movs	r3, #2
 8000220:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000222:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000226:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000228:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800022c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800022e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000232:	4618      	mov	r0, r3
 8000234:	f002 fcba 	bl	8002bac <HAL_RCC_OscConfig>
 8000238:	4603      	mov	r3, r0
 800023a:	2b00      	cmp	r3, #0
 800023c:	d001      	beq.n	8000242 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800023e:	f000 fb25 	bl	800088c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000242:	230f      	movs	r3, #15
 8000244:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000246:	2302      	movs	r3, #2
 8000248:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800024a:	2300      	movs	r3, #0
 800024c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800024e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000252:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000254:	2300      	movs	r3, #0
 8000256:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000258:	f107 0314 	add.w	r3, r7, #20
 800025c:	2102      	movs	r1, #2
 800025e:	4618      	mov	r0, r3
 8000260:	f002 ff24 	bl	80030ac <HAL_RCC_ClockConfig>
 8000264:	4603      	mov	r3, r0
 8000266:	2b00      	cmp	r3, #0
 8000268:	d001      	beq.n	800026e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800026a:	f000 fb0f 	bl	800088c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 800026e:	2312      	movs	r3, #18
 8000270:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000272:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000276:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000278:	2300      	movs	r3, #0
 800027a:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800027c:	1d3b      	adds	r3, r7, #4
 800027e:	4618      	mov	r0, r3
 8000280:	f003 f8b0 	bl	80033e4 <HAL_RCCEx_PeriphCLKConfig>
 8000284:	4603      	mov	r3, r0
 8000286:	2b00      	cmp	r3, #0
 8000288:	d001      	beq.n	800028e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800028a:	f000 faff 	bl	800088c <Error_Handler>
  }
}
 800028e:	bf00      	nop
 8000290:	3750      	adds	r7, #80	; 0x50
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}
	...

08000298 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b084      	sub	sp, #16
 800029c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800029e:	1d3b      	adds	r3, r7, #4
 80002a0:	2200      	movs	r2, #0
 80002a2:	601a      	str	r2, [r3, #0]
 80002a4:	605a      	str	r2, [r3, #4]
 80002a6:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80002a8:	4b18      	ldr	r3, [pc, #96]	; (800030c <MX_ADC1_Init+0x74>)
 80002aa:	4a19      	ldr	r2, [pc, #100]	; (8000310 <MX_ADC1_Init+0x78>)
 80002ac:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002ae:	4b17      	ldr	r3, [pc, #92]	; (800030c <MX_ADC1_Init+0x74>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80002b4:	4b15      	ldr	r3, [pc, #84]	; (800030c <MX_ADC1_Init+0x74>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002ba:	4b14      	ldr	r3, [pc, #80]	; (800030c <MX_ADC1_Init+0x74>)
 80002bc:	2200      	movs	r2, #0
 80002be:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002c0:	4b12      	ldr	r3, [pc, #72]	; (800030c <MX_ADC1_Init+0x74>)
 80002c2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80002c6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002c8:	4b10      	ldr	r3, [pc, #64]	; (800030c <MX_ADC1_Init+0x74>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80002ce:	4b0f      	ldr	r3, [pc, #60]	; (800030c <MX_ADC1_Init+0x74>)
 80002d0:	2201      	movs	r2, #1
 80002d2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002d4:	480d      	ldr	r0, [pc, #52]	; (800030c <MX_ADC1_Init+0x74>)
 80002d6:	f001 f901 	bl	80014dc <HAL_ADC_Init>
 80002da:	4603      	mov	r3, r0
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d001      	beq.n	80002e4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80002e0:	f000 fad4 	bl	800088c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80002e4:	2300      	movs	r3, #0
 80002e6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002e8:	2301      	movs	r3, #1
 80002ea:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80002ec:	2300      	movs	r3, #0
 80002ee:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002f0:	1d3b      	adds	r3, r7, #4
 80002f2:	4619      	mov	r1, r3
 80002f4:	4805      	ldr	r0, [pc, #20]	; (800030c <MX_ADC1_Init+0x74>)
 80002f6:	f001 f9c9 	bl	800168c <HAL_ADC_ConfigChannel>
 80002fa:	4603      	mov	r3, r0
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d001      	beq.n	8000304 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000300:	f000 fac4 	bl	800088c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000304:	bf00      	nop
 8000306:	3710      	adds	r7, #16
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}
 800030c:	20000720 	.word	0x20000720
 8000310:	40012400 	.word	0x40012400

08000314 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b084      	sub	sp, #16
 8000318:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800031a:	1d3b      	adds	r3, r7, #4
 800031c:	2200      	movs	r2, #0
 800031e:	601a      	str	r2, [r3, #0]
 8000320:	605a      	str	r2, [r3, #4]
 8000322:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8000324:	4b18      	ldr	r3, [pc, #96]	; (8000388 <MX_ADC2_Init+0x74>)
 8000326:	4a19      	ldr	r2, [pc, #100]	; (800038c <MX_ADC2_Init+0x78>)
 8000328:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800032a:	4b17      	ldr	r3, [pc, #92]	; (8000388 <MX_ADC2_Init+0x74>)
 800032c:	2200      	movs	r2, #0
 800032e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000330:	4b15      	ldr	r3, [pc, #84]	; (8000388 <MX_ADC2_Init+0x74>)
 8000332:	2200      	movs	r2, #0
 8000334:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000336:	4b14      	ldr	r3, [pc, #80]	; (8000388 <MX_ADC2_Init+0x74>)
 8000338:	2200      	movs	r2, #0
 800033a:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800033c:	4b12      	ldr	r3, [pc, #72]	; (8000388 <MX_ADC2_Init+0x74>)
 800033e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000342:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000344:	4b10      	ldr	r3, [pc, #64]	; (8000388 <MX_ADC2_Init+0x74>)
 8000346:	2200      	movs	r2, #0
 8000348:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 800034a:	4b0f      	ldr	r3, [pc, #60]	; (8000388 <MX_ADC2_Init+0x74>)
 800034c:	2201      	movs	r2, #1
 800034e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000350:	480d      	ldr	r0, [pc, #52]	; (8000388 <MX_ADC2_Init+0x74>)
 8000352:	f001 f8c3 	bl	80014dc <HAL_ADC_Init>
 8000356:	4603      	mov	r3, r0
 8000358:	2b00      	cmp	r3, #0
 800035a:	d001      	beq.n	8000360 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 800035c:	f000 fa96 	bl	800088c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000360:	2309      	movs	r3, #9
 8000362:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000364:	2301      	movs	r3, #1
 8000366:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000368:	2300      	movs	r3, #0
 800036a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800036c:	1d3b      	adds	r3, r7, #4
 800036e:	4619      	mov	r1, r3
 8000370:	4805      	ldr	r0, [pc, #20]	; (8000388 <MX_ADC2_Init+0x74>)
 8000372:	f001 f98b 	bl	800168c <HAL_ADC_ConfigChannel>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d001      	beq.n	8000380 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 800037c:	f000 fa86 	bl	800088c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000380:	bf00      	nop
 8000382:	3710      	adds	r7, #16
 8000384:	46bd      	mov	sp, r7
 8000386:	bd80      	pop	{r7, pc}
 8000388:	200006b0 	.word	0x200006b0
 800038c:	40012800 	.word	0x40012800

08000390 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000394:	4b18      	ldr	r3, [pc, #96]	; (80003f8 <MX_SPI1_Init+0x68>)
 8000396:	4a19      	ldr	r2, [pc, #100]	; (80003fc <MX_SPI1_Init+0x6c>)
 8000398:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800039a:	4b17      	ldr	r3, [pc, #92]	; (80003f8 <MX_SPI1_Init+0x68>)
 800039c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80003a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80003a2:	4b15      	ldr	r3, [pc, #84]	; (80003f8 <MX_SPI1_Init+0x68>)
 80003a4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80003a8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80003aa:	4b13      	ldr	r3, [pc, #76]	; (80003f8 <MX_SPI1_Init+0x68>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003b0:	4b11      	ldr	r3, [pc, #68]	; (80003f8 <MX_SPI1_Init+0x68>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003b6:	4b10      	ldr	r3, [pc, #64]	; (80003f8 <MX_SPI1_Init+0x68>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80003bc:	4b0e      	ldr	r3, [pc, #56]	; (80003f8 <MX_SPI1_Init+0x68>)
 80003be:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80003c2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80003c4:	4b0c      	ldr	r3, [pc, #48]	; (80003f8 <MX_SPI1_Init+0x68>)
 80003c6:	2208      	movs	r2, #8
 80003c8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003ca:	4b0b      	ldr	r3, [pc, #44]	; (80003f8 <MX_SPI1_Init+0x68>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80003d0:	4b09      	ldr	r3, [pc, #36]	; (80003f8 <MX_SPI1_Init+0x68>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003d6:	4b08      	ldr	r3, [pc, #32]	; (80003f8 <MX_SPI1_Init+0x68>)
 80003d8:	2200      	movs	r2, #0
 80003da:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80003dc:	4b06      	ldr	r3, [pc, #24]	; (80003f8 <MX_SPI1_Init+0x68>)
 80003de:	220a      	movs	r2, #10
 80003e0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80003e2:	4805      	ldr	r0, [pc, #20]	; (80003f8 <MX_SPI1_Init+0x68>)
 80003e4:	f003 f8b4 	bl	8003550 <HAL_SPI_Init>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d001      	beq.n	80003f2 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80003ee:	f000 fa4d 	bl	800088c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80003f2:	bf00      	nop
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	bf00      	nop
 80003f8:	200007d0 	.word	0x200007d0
 80003fc:	40013000 	.word	0x40013000

08000400 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000404:	4b17      	ldr	r3, [pc, #92]	; (8000464 <MX_SPI2_Init+0x64>)
 8000406:	4a18      	ldr	r2, [pc, #96]	; (8000468 <MX_SPI2_Init+0x68>)
 8000408:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800040a:	4b16      	ldr	r3, [pc, #88]	; (8000464 <MX_SPI2_Init+0x64>)
 800040c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000410:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000412:	4b14      	ldr	r3, [pc, #80]	; (8000464 <MX_SPI2_Init+0x64>)
 8000414:	2200      	movs	r2, #0
 8000416:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000418:	4b12      	ldr	r3, [pc, #72]	; (8000464 <MX_SPI2_Init+0x64>)
 800041a:	2200      	movs	r2, #0
 800041c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800041e:	4b11      	ldr	r3, [pc, #68]	; (8000464 <MX_SPI2_Init+0x64>)
 8000420:	2200      	movs	r2, #0
 8000422:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000424:	4b0f      	ldr	r3, [pc, #60]	; (8000464 <MX_SPI2_Init+0x64>)
 8000426:	2200      	movs	r2, #0
 8000428:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800042a:	4b0e      	ldr	r3, [pc, #56]	; (8000464 <MX_SPI2_Init+0x64>)
 800042c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000430:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000432:	4b0c      	ldr	r3, [pc, #48]	; (8000464 <MX_SPI2_Init+0x64>)
 8000434:	2208      	movs	r2, #8
 8000436:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000438:	4b0a      	ldr	r3, [pc, #40]	; (8000464 <MX_SPI2_Init+0x64>)
 800043a:	2200      	movs	r2, #0
 800043c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800043e:	4b09      	ldr	r3, [pc, #36]	; (8000464 <MX_SPI2_Init+0x64>)
 8000440:	2200      	movs	r2, #0
 8000442:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000444:	4b07      	ldr	r3, [pc, #28]	; (8000464 <MX_SPI2_Init+0x64>)
 8000446:	2200      	movs	r2, #0
 8000448:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800044a:	4b06      	ldr	r3, [pc, #24]	; (8000464 <MX_SPI2_Init+0x64>)
 800044c:	220a      	movs	r2, #10
 800044e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000450:	4804      	ldr	r0, [pc, #16]	; (8000464 <MX_SPI2_Init+0x64>)
 8000452:	f003 f87d 	bl	8003550 <HAL_SPI_Init>
 8000456:	4603      	mov	r3, r0
 8000458:	2b00      	cmp	r3, #0
 800045a:	d001      	beq.n	8000460 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800045c:	f000 fa16 	bl	800088c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000460:	bf00      	nop
 8000462:	bd80      	pop	{r7, pc}
 8000464:	20000658 	.word	0x20000658
 8000468:	40003800 	.word	0x40003800

0800046c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b086      	sub	sp, #24
 8000470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000472:	f107 0308 	add.w	r3, r7, #8
 8000476:	2200      	movs	r2, #0
 8000478:	601a      	str	r2, [r3, #0]
 800047a:	605a      	str	r2, [r3, #4]
 800047c:	609a      	str	r2, [r3, #8]
 800047e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000480:	463b      	mov	r3, r7
 8000482:	2200      	movs	r2, #0
 8000484:	601a      	str	r2, [r3, #0]
 8000486:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000488:	4b1f      	ldr	r3, [pc, #124]	; (8000508 <MX_TIM1_Init+0x9c>)
 800048a:	4a20      	ldr	r2, [pc, #128]	; (800050c <MX_TIM1_Init+0xa0>)
 800048c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7199;
 800048e:	4b1e      	ldr	r3, [pc, #120]	; (8000508 <MX_TIM1_Init+0x9c>)
 8000490:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000494:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000496:	4b1c      	ldr	r3, [pc, #112]	; (8000508 <MX_TIM1_Init+0x9c>)
 8000498:	2200      	movs	r2, #0
 800049a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 800049c:	4b1a      	ldr	r3, [pc, #104]	; (8000508 <MX_TIM1_Init+0x9c>)
 800049e:	f242 720f 	movw	r2, #9999	; 0x270f
 80004a2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004a4:	4b18      	ldr	r3, [pc, #96]	; (8000508 <MX_TIM1_Init+0x9c>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80004aa:	4b17      	ldr	r3, [pc, #92]	; (8000508 <MX_TIM1_Init+0x9c>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80004b0:	4b15      	ldr	r3, [pc, #84]	; (8000508 <MX_TIM1_Init+0x9c>)
 80004b2:	2280      	movs	r2, #128	; 0x80
 80004b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80004b6:	4814      	ldr	r0, [pc, #80]	; (8000508 <MX_TIM1_Init+0x9c>)
 80004b8:	f003 fc30 	bl	8003d1c <HAL_TIM_Base_Init>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d001      	beq.n	80004c6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80004c2:	f000 f9e3 	bl	800088c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004ca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80004cc:	f107 0308 	add.w	r3, r7, #8
 80004d0:	4619      	mov	r1, r3
 80004d2:	480d      	ldr	r0, [pc, #52]	; (8000508 <MX_TIM1_Init+0x9c>)
 80004d4:	f003 fe72 	bl	80041bc <HAL_TIM_ConfigClockSource>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80004de:	f000 f9d5 	bl	800088c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004e2:	2300      	movs	r3, #0
 80004e4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004e6:	2300      	movs	r3, #0
 80004e8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80004ea:	463b      	mov	r3, r7
 80004ec:	4619      	mov	r1, r3
 80004ee:	4806      	ldr	r0, [pc, #24]	; (8000508 <MX_TIM1_Init+0x9c>)
 80004f0:	f004 f9c8 	bl	8004884 <HAL_TIMEx_MasterConfigSynchronization>
 80004f4:	4603      	mov	r3, r0
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d001      	beq.n	80004fe <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80004fa:	f000 f9c7 	bl	800088c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80004fe:	bf00      	nop
 8000500:	3718      	adds	r7, #24
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	20000790 	.word	0x20000790
 800050c:	40012c00 	.word	0x40012c00

08000510 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b08e      	sub	sp, #56	; 0x38
 8000514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000516:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800051a:	2200      	movs	r2, #0
 800051c:	601a      	str	r2, [r3, #0]
 800051e:	605a      	str	r2, [r3, #4]
 8000520:	609a      	str	r2, [r3, #8]
 8000522:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000524:	f107 0320 	add.w	r3, r7, #32
 8000528:	2200      	movs	r2, #0
 800052a:	601a      	str	r2, [r3, #0]
 800052c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800052e:	1d3b      	adds	r3, r7, #4
 8000530:	2200      	movs	r2, #0
 8000532:	601a      	str	r2, [r3, #0]
 8000534:	605a      	str	r2, [r3, #4]
 8000536:	609a      	str	r2, [r3, #8]
 8000538:	60da      	str	r2, [r3, #12]
 800053a:	611a      	str	r2, [r3, #16]
 800053c:	615a      	str	r2, [r3, #20]
 800053e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000540:	4b38      	ldr	r3, [pc, #224]	; (8000624 <MX_TIM2_Init+0x114>)
 8000542:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000546:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 8000548:	4b36      	ldr	r3, [pc, #216]	; (8000624 <MX_TIM2_Init+0x114>)
 800054a:	2207      	movs	r2, #7
 800054c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800054e:	4b35      	ldr	r3, [pc, #212]	; (8000624 <MX_TIM2_Init+0x114>)
 8000550:	2200      	movs	r2, #0
 8000552:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 511;
 8000554:	4b33      	ldr	r3, [pc, #204]	; (8000624 <MX_TIM2_Init+0x114>)
 8000556:	f240 12ff 	movw	r2, #511	; 0x1ff
 800055a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800055c:	4b31      	ldr	r3, [pc, #196]	; (8000624 <MX_TIM2_Init+0x114>)
 800055e:	2200      	movs	r2, #0
 8000560:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000562:	4b30      	ldr	r3, [pc, #192]	; (8000624 <MX_TIM2_Init+0x114>)
 8000564:	2280      	movs	r2, #128	; 0x80
 8000566:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000568:	482e      	ldr	r0, [pc, #184]	; (8000624 <MX_TIM2_Init+0x114>)
 800056a:	f003 fbd7 	bl	8003d1c <HAL_TIM_Base_Init>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000574:	f000 f98a 	bl	800088c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000578:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800057c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800057e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000582:	4619      	mov	r1, r3
 8000584:	4827      	ldr	r0, [pc, #156]	; (8000624 <MX_TIM2_Init+0x114>)
 8000586:	f003 fe19 	bl	80041bc <HAL_TIM_ConfigClockSource>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000590:	f000 f97c 	bl	800088c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000594:	4823      	ldr	r0, [pc, #140]	; (8000624 <MX_TIM2_Init+0x114>)
 8000596:	f003 fc0f 	bl	8003db8 <HAL_TIM_PWM_Init>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80005a0:	f000 f974 	bl	800088c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005a4:	2300      	movs	r3, #0
 80005a6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005a8:	2300      	movs	r3, #0
 80005aa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005ac:	f107 0320 	add.w	r3, r7, #32
 80005b0:	4619      	mov	r1, r3
 80005b2:	481c      	ldr	r0, [pc, #112]	; (8000624 <MX_TIM2_Init+0x114>)
 80005b4:	f004 f966 	bl	8004884 <HAL_TIMEx_MasterConfigSynchronization>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80005be:	f000 f965 	bl	800088c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005c2:	2360      	movs	r3, #96	; 0x60
 80005c4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80005c6:	2300      	movs	r3, #0
 80005c8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005ca:	2300      	movs	r3, #0
 80005cc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005ce:	2300      	movs	r3, #0
 80005d0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80005d2:	1d3b      	adds	r3, r7, #4
 80005d4:	2200      	movs	r2, #0
 80005d6:	4619      	mov	r1, r3
 80005d8:	4812      	ldr	r0, [pc, #72]	; (8000624 <MX_TIM2_Init+0x114>)
 80005da:	f003 fd29 	bl	8004030 <HAL_TIM_PWM_ConfigChannel>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80005e4:	f000 f952 	bl	800088c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80005e8:	1d3b      	adds	r3, r7, #4
 80005ea:	2204      	movs	r2, #4
 80005ec:	4619      	mov	r1, r3
 80005ee:	480d      	ldr	r0, [pc, #52]	; (8000624 <MX_TIM2_Init+0x114>)
 80005f0:	f003 fd1e 	bl	8004030 <HAL_TIM_PWM_ConfigChannel>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80005fa:	f000 f947 	bl	800088c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80005fe:	1d3b      	adds	r3, r7, #4
 8000600:	2208      	movs	r2, #8
 8000602:	4619      	mov	r1, r3
 8000604:	4807      	ldr	r0, [pc, #28]	; (8000624 <MX_TIM2_Init+0x114>)
 8000606:	f003 fd13 	bl	8004030 <HAL_TIM_PWM_ConfigChannel>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8000610:	f000 f93c 	bl	800088c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000614:	4803      	ldr	r0, [pc, #12]	; (8000624 <MX_TIM2_Init+0x114>)
 8000616:	f000 faaf 	bl	8000b78 <HAL_TIM_MspPostInit>

}
 800061a:	bf00      	nop
 800061c:	3738      	adds	r7, #56	; 0x38
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	20000828 	.word	0x20000828

08000628 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b086      	sub	sp, #24
 800062c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800062e:	f107 0308 	add.w	r3, r7, #8
 8000632:	2200      	movs	r2, #0
 8000634:	601a      	str	r2, [r3, #0]
 8000636:	605a      	str	r2, [r3, #4]
 8000638:	609a      	str	r2, [r3, #8]
 800063a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800063c:	463b      	mov	r3, r7
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
 8000642:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000644:	4b1c      	ldr	r3, [pc, #112]	; (80006b8 <MX_TIM3_Init+0x90>)
 8000646:	4a1d      	ldr	r2, [pc, #116]	; (80006bc <MX_TIM3_Init+0x94>)
 8000648:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 800064a:	4b1b      	ldr	r3, [pc, #108]	; (80006b8 <MX_TIM3_Init+0x90>)
 800064c:	2247      	movs	r2, #71	; 0x47
 800064e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000650:	4b19      	ldr	r3, [pc, #100]	; (80006b8 <MX_TIM3_Init+0x90>)
 8000652:	2200      	movs	r2, #0
 8000654:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2-1;
 8000656:	4b18      	ldr	r3, [pc, #96]	; (80006b8 <MX_TIM3_Init+0x90>)
 8000658:	2201      	movs	r2, #1
 800065a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800065c:	4b16      	ldr	r3, [pc, #88]	; (80006b8 <MX_TIM3_Init+0x90>)
 800065e:	2200      	movs	r2, #0
 8000660:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000662:	4b15      	ldr	r3, [pc, #84]	; (80006b8 <MX_TIM3_Init+0x90>)
 8000664:	2280      	movs	r2, #128	; 0x80
 8000666:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000668:	4813      	ldr	r0, [pc, #76]	; (80006b8 <MX_TIM3_Init+0x90>)
 800066a:	f003 fb57 	bl	8003d1c <HAL_TIM_Base_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8000674:	f000 f90a 	bl	800088c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000678:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800067c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800067e:	f107 0308 	add.w	r3, r7, #8
 8000682:	4619      	mov	r1, r3
 8000684:	480c      	ldr	r0, [pc, #48]	; (80006b8 <MX_TIM3_Init+0x90>)
 8000686:	f003 fd99 	bl	80041bc <HAL_TIM_ConfigClockSource>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8000690:	f000 f8fc 	bl	800088c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000694:	2300      	movs	r3, #0
 8000696:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000698:	2300      	movs	r3, #0
 800069a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800069c:	463b      	mov	r3, r7
 800069e:	4619      	mov	r1, r3
 80006a0:	4805      	ldr	r0, [pc, #20]	; (80006b8 <MX_TIM3_Init+0x90>)
 80006a2:	f004 f8ef 	bl	8004884 <HAL_TIMEx_MasterConfigSynchronization>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 80006ac:	f000 f8ee 	bl	800088c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80006b0:	bf00      	nop
 80006b2:	3718      	adds	r7, #24
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	200006e0 	.word	0x200006e0
 80006bc:	40000400 	.word	0x40000400

080006c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006c4:	4b11      	ldr	r3, [pc, #68]	; (800070c <MX_USART1_UART_Init+0x4c>)
 80006c6:	4a12      	ldr	r2, [pc, #72]	; (8000710 <MX_USART1_UART_Init+0x50>)
 80006c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006ca:	4b10      	ldr	r3, [pc, #64]	; (800070c <MX_USART1_UART_Init+0x4c>)
 80006cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006d2:	4b0e      	ldr	r3, [pc, #56]	; (800070c <MX_USART1_UART_Init+0x4c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006d8:	4b0c      	ldr	r3, [pc, #48]	; (800070c <MX_USART1_UART_Init+0x4c>)
 80006da:	2200      	movs	r2, #0
 80006dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006de:	4b0b      	ldr	r3, [pc, #44]	; (800070c <MX_USART1_UART_Init+0x4c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006e4:	4b09      	ldr	r3, [pc, #36]	; (800070c <MX_USART1_UART_Init+0x4c>)
 80006e6:	220c      	movs	r2, #12
 80006e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ea:	4b08      	ldr	r3, [pc, #32]	; (800070c <MX_USART1_UART_Init+0x4c>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006f0:	4b06      	ldr	r3, [pc, #24]	; (800070c <MX_USART1_UART_Init+0x4c>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006f6:	4805      	ldr	r0, [pc, #20]	; (800070c <MX_USART1_UART_Init+0x4c>)
 80006f8:	f004 f91a 	bl	8004930 <HAL_UART_Init>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000702:	f000 f8c3 	bl	800088c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000706:	bf00      	nop
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	20000750 	.word	0x20000750
 8000710:	40013800 	.word	0x40013800

08000714 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b088      	sub	sp, #32
 8000718:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071a:	f107 0310 	add.w	r3, r7, #16
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	605a      	str	r2, [r3, #4]
 8000724:	609a      	str	r2, [r3, #8]
 8000726:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000728:	4b52      	ldr	r3, [pc, #328]	; (8000874 <MX_GPIO_Init+0x160>)
 800072a:	699b      	ldr	r3, [r3, #24]
 800072c:	4a51      	ldr	r2, [pc, #324]	; (8000874 <MX_GPIO_Init+0x160>)
 800072e:	f043 0310 	orr.w	r3, r3, #16
 8000732:	6193      	str	r3, [r2, #24]
 8000734:	4b4f      	ldr	r3, [pc, #316]	; (8000874 <MX_GPIO_Init+0x160>)
 8000736:	699b      	ldr	r3, [r3, #24]
 8000738:	f003 0310 	and.w	r3, r3, #16
 800073c:	60fb      	str	r3, [r7, #12]
 800073e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000740:	4b4c      	ldr	r3, [pc, #304]	; (8000874 <MX_GPIO_Init+0x160>)
 8000742:	699b      	ldr	r3, [r3, #24]
 8000744:	4a4b      	ldr	r2, [pc, #300]	; (8000874 <MX_GPIO_Init+0x160>)
 8000746:	f043 0320 	orr.w	r3, r3, #32
 800074a:	6193      	str	r3, [r2, #24]
 800074c:	4b49      	ldr	r3, [pc, #292]	; (8000874 <MX_GPIO_Init+0x160>)
 800074e:	699b      	ldr	r3, [r3, #24]
 8000750:	f003 0320 	and.w	r3, r3, #32
 8000754:	60bb      	str	r3, [r7, #8]
 8000756:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000758:	4b46      	ldr	r3, [pc, #280]	; (8000874 <MX_GPIO_Init+0x160>)
 800075a:	699b      	ldr	r3, [r3, #24]
 800075c:	4a45      	ldr	r2, [pc, #276]	; (8000874 <MX_GPIO_Init+0x160>)
 800075e:	f043 0304 	orr.w	r3, r3, #4
 8000762:	6193      	str	r3, [r2, #24]
 8000764:	4b43      	ldr	r3, [pc, #268]	; (8000874 <MX_GPIO_Init+0x160>)
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	f003 0304 	and.w	r3, r3, #4
 800076c:	607b      	str	r3, [r7, #4]
 800076e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000770:	4b40      	ldr	r3, [pc, #256]	; (8000874 <MX_GPIO_Init+0x160>)
 8000772:	699b      	ldr	r3, [r3, #24]
 8000774:	4a3f      	ldr	r2, [pc, #252]	; (8000874 <MX_GPIO_Init+0x160>)
 8000776:	f043 0308 	orr.w	r3, r3, #8
 800077a:	6193      	str	r3, [r2, #24]
 800077c:	4b3d      	ldr	r3, [pc, #244]	; (8000874 <MX_GPIO_Init+0x160>)
 800077e:	699b      	ldr	r3, [r3, #24]
 8000780:	f003 0308 	and.w	r3, r3, #8
 8000784:	603b      	str	r3, [r7, #0]
 8000786:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000788:	2200      	movs	r2, #0
 800078a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800078e:	483a      	ldr	r0, [pc, #232]	; (8000878 <MX_GPIO_Init+0x164>)
 8000790:	f001 fb16 	bl	8001dc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLINK_GPIO_Port, BLINK_Pin, GPIO_PIN_RESET);
 8000794:	2200      	movs	r2, #0
 8000796:	2104      	movs	r1, #4
 8000798:	4838      	ldr	r0, [pc, #224]	; (800087c <MX_GPIO_Init+0x168>)
 800079a:	f001 fb11 	bl	8001dc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800079e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a4:	2301      	movs	r3, #1
 80007a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	2300      	movs	r3, #0
 80007aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ac:	2302      	movs	r3, #2
 80007ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007b0:	f107 0310 	add.w	r3, r7, #16
 80007b4:	4619      	mov	r1, r3
 80007b6:	4830      	ldr	r0, [pc, #192]	; (8000878 <MX_GPIO_Init+0x164>)
 80007b8:	f001 f9a8 	bl	8001b0c <HAL_GPIO_Init>

  /*Configure GPIO pins : GINT1_Pin GINT2_Pin */
  GPIO_InitStruct.Pin = GINT1_Pin|GINT2_Pin;
 80007bc:	2306      	movs	r3, #6
 80007be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007c0:	4b2f      	ldr	r3, [pc, #188]	; (8000880 <MX_GPIO_Init+0x16c>)
 80007c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c8:	f107 0310 	add.w	r3, r7, #16
 80007cc:	4619      	mov	r1, r3
 80007ce:	482d      	ldr	r0, [pc, #180]	; (8000884 <MX_GPIO_Init+0x170>)
 80007d0:	f001 f99c 	bl	8001b0c <HAL_GPIO_Init>

  /*Configure GPIO pin : GINT3_Pin */
  GPIO_InitStruct.Pin = GINT3_Pin;
 80007d4:	2308      	movs	r3, #8
 80007d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007d8:	4b2b      	ldr	r3, [pc, #172]	; (8000888 <MX_GPIO_Init+0x174>)
 80007da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007dc:	2300      	movs	r3, #0
 80007de:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GINT3_GPIO_Port, &GPIO_InitStruct);
 80007e0:	f107 0310 	add.w	r3, r7, #16
 80007e4:	4619      	mov	r1, r3
 80007e6:	4827      	ldr	r0, [pc, #156]	; (8000884 <MX_GPIO_Init+0x170>)
 80007e8:	f001 f990 	bl	8001b0c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_RST_Pin */
  GPIO_InitStruct.Pin = SPI1_RST_Pin;
 80007ec:	2301      	movs	r3, #1
 80007ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007f0:	2300      	movs	r3, #0
 80007f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007f4:	2301      	movs	r3, #1
 80007f6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_RST_GPIO_Port, &GPIO_InitStruct);
 80007f8:	f107 0310 	add.w	r3, r7, #16
 80007fc:	4619      	mov	r1, r3
 80007fe:	481f      	ldr	r0, [pc, #124]	; (800087c <MX_GPIO_Init+0x168>)
 8000800:	f001 f984 	bl	8001b0c <HAL_GPIO_Init>

  /*Configure GPIO pin : BLINK_Pin */
  GPIO_InitStruct.Pin = BLINK_Pin;
 8000804:	2304      	movs	r3, #4
 8000806:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000808:	2301      	movs	r3, #1
 800080a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080c:	2300      	movs	r3, #0
 800080e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000810:	2303      	movs	r3, #3
 8000812:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLINK_GPIO_Port, &GPIO_InitStruct);
 8000814:	f107 0310 	add.w	r3, r7, #16
 8000818:	4619      	mov	r1, r3
 800081a:	4818      	ldr	r0, [pc, #96]	; (800087c <MX_GPIO_Init+0x168>)
 800081c:	f001 f976 	bl	8001b0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 BSET_Pin BRSET_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_11|BSET_Pin|BRSET_Pin;
 8000820:	f44f 6303 	mov.w	r3, #2096	; 0x830
 8000824:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000826:	2300      	movs	r3, #0
 8000828:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800082e:	f107 0310 	add.w	r3, r7, #16
 8000832:	4619      	mov	r1, r3
 8000834:	4811      	ldr	r0, [pc, #68]	; (800087c <MX_GPIO_Init+0x168>)
 8000836:	f001 f969 	bl	8001b0c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800083a:	2200      	movs	r2, #0
 800083c:	2100      	movs	r1, #0
 800083e:	2007      	movs	r0, #7
 8000840:	f001 f92d 	bl	8001a9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000844:	2007      	movs	r0, #7
 8000846:	f001 f946 	bl	8001ad6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800084a:	2200      	movs	r2, #0
 800084c:	2100      	movs	r1, #0
 800084e:	2008      	movs	r0, #8
 8000850:	f001 f925 	bl	8001a9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000854:	2008      	movs	r0, #8
 8000856:	f001 f93e 	bl	8001ad6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800085a:	2200      	movs	r2, #0
 800085c:	2100      	movs	r1, #0
 800085e:	2009      	movs	r0, #9
 8000860:	f001 f91d 	bl	8001a9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000864:	2009      	movs	r0, #9
 8000866:	f001 f936 	bl	8001ad6 <HAL_NVIC_EnableIRQ>

}
 800086a:	bf00      	nop
 800086c:	3720      	adds	r7, #32
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40021000 	.word	0x40021000
 8000878:	40011000 	.word	0x40011000
 800087c:	40010c00 	.word	0x40010c00
 8000880:	10210000 	.word	0x10210000
 8000884:	40010800 	.word	0x40010800
 8000888:	10110000 	.word	0x10110000

0800088c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000890:	bf00      	nop
 8000892:	46bd      	mov	sp, r7
 8000894:	bc80      	pop	{r7}
 8000896:	4770      	bx	lr

08000898 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000898:	b480      	push	{r7}
 800089a:	b085      	sub	sp, #20
 800089c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800089e:	4b15      	ldr	r3, [pc, #84]	; (80008f4 <HAL_MspInit+0x5c>)
 80008a0:	699b      	ldr	r3, [r3, #24]
 80008a2:	4a14      	ldr	r2, [pc, #80]	; (80008f4 <HAL_MspInit+0x5c>)
 80008a4:	f043 0301 	orr.w	r3, r3, #1
 80008a8:	6193      	str	r3, [r2, #24]
 80008aa:	4b12      	ldr	r3, [pc, #72]	; (80008f4 <HAL_MspInit+0x5c>)
 80008ac:	699b      	ldr	r3, [r3, #24]
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	60bb      	str	r3, [r7, #8]
 80008b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b6:	4b0f      	ldr	r3, [pc, #60]	; (80008f4 <HAL_MspInit+0x5c>)
 80008b8:	69db      	ldr	r3, [r3, #28]
 80008ba:	4a0e      	ldr	r2, [pc, #56]	; (80008f4 <HAL_MspInit+0x5c>)
 80008bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c0:	61d3      	str	r3, [r2, #28]
 80008c2:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <HAL_MspInit+0x5c>)
 80008c4:	69db      	ldr	r3, [r3, #28]
 80008c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80008ce:	4b0a      	ldr	r3, [pc, #40]	; (80008f8 <HAL_MspInit+0x60>)
 80008d0:	685b      	ldr	r3, [r3, #4]
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	4a04      	ldr	r2, [pc, #16]	; (80008f8 <HAL_MspInit+0x60>)
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ea:	bf00      	nop
 80008ec:	3714      	adds	r7, #20
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bc80      	pop	{r7}
 80008f2:	4770      	bx	lr
 80008f4:	40021000 	.word	0x40021000
 80008f8:	40010000 	.word	0x40010000

080008fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b08a      	sub	sp, #40	; 0x28
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000904:	f107 0318 	add.w	r3, r7, #24
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
 8000910:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4a28      	ldr	r2, [pc, #160]	; (80009b8 <HAL_ADC_MspInit+0xbc>)
 8000918:	4293      	cmp	r3, r2
 800091a:	d122      	bne.n	8000962 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800091c:	4b27      	ldr	r3, [pc, #156]	; (80009bc <HAL_ADC_MspInit+0xc0>)
 800091e:	699b      	ldr	r3, [r3, #24]
 8000920:	4a26      	ldr	r2, [pc, #152]	; (80009bc <HAL_ADC_MspInit+0xc0>)
 8000922:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000926:	6193      	str	r3, [r2, #24]
 8000928:	4b24      	ldr	r3, [pc, #144]	; (80009bc <HAL_ADC_MspInit+0xc0>)
 800092a:	699b      	ldr	r3, [r3, #24]
 800092c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000930:	617b      	str	r3, [r7, #20]
 8000932:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000934:	4b21      	ldr	r3, [pc, #132]	; (80009bc <HAL_ADC_MspInit+0xc0>)
 8000936:	699b      	ldr	r3, [r3, #24]
 8000938:	4a20      	ldr	r2, [pc, #128]	; (80009bc <HAL_ADC_MspInit+0xc0>)
 800093a:	f043 0304 	orr.w	r3, r3, #4
 800093e:	6193      	str	r3, [r2, #24]
 8000940:	4b1e      	ldr	r3, [pc, #120]	; (80009bc <HAL_ADC_MspInit+0xc0>)
 8000942:	699b      	ldr	r3, [r3, #24]
 8000944:	f003 0304 	and.w	r3, r3, #4
 8000948:	613b      	str	r3, [r7, #16]
 800094a:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800094c:	2301      	movs	r3, #1
 800094e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000950:	2303      	movs	r3, #3
 8000952:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000954:	f107 0318 	add.w	r3, r7, #24
 8000958:	4619      	mov	r1, r3
 800095a:	4819      	ldr	r0, [pc, #100]	; (80009c0 <HAL_ADC_MspInit+0xc4>)
 800095c:	f001 f8d6 	bl	8001b0c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000960:	e026      	b.n	80009b0 <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	4a17      	ldr	r2, [pc, #92]	; (80009c4 <HAL_ADC_MspInit+0xc8>)
 8000968:	4293      	cmp	r3, r2
 800096a:	d121      	bne.n	80009b0 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800096c:	4b13      	ldr	r3, [pc, #76]	; (80009bc <HAL_ADC_MspInit+0xc0>)
 800096e:	699b      	ldr	r3, [r3, #24]
 8000970:	4a12      	ldr	r2, [pc, #72]	; (80009bc <HAL_ADC_MspInit+0xc0>)
 8000972:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000976:	6193      	str	r3, [r2, #24]
 8000978:	4b10      	ldr	r3, [pc, #64]	; (80009bc <HAL_ADC_MspInit+0xc0>)
 800097a:	699b      	ldr	r3, [r3, #24]
 800097c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000980:	60fb      	str	r3, [r7, #12]
 8000982:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000984:	4b0d      	ldr	r3, [pc, #52]	; (80009bc <HAL_ADC_MspInit+0xc0>)
 8000986:	699b      	ldr	r3, [r3, #24]
 8000988:	4a0c      	ldr	r2, [pc, #48]	; (80009bc <HAL_ADC_MspInit+0xc0>)
 800098a:	f043 0308 	orr.w	r3, r3, #8
 800098e:	6193      	str	r3, [r2, #24]
 8000990:	4b0a      	ldr	r3, [pc, #40]	; (80009bc <HAL_ADC_MspInit+0xc0>)
 8000992:	699b      	ldr	r3, [r3, #24]
 8000994:	f003 0308 	and.w	r3, r3, #8
 8000998:	60bb      	str	r3, [r7, #8]
 800099a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800099c:	2302      	movs	r3, #2
 800099e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009a0:	2303      	movs	r3, #3
 80009a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a4:	f107 0318 	add.w	r3, r7, #24
 80009a8:	4619      	mov	r1, r3
 80009aa:	4807      	ldr	r0, [pc, #28]	; (80009c8 <HAL_ADC_MspInit+0xcc>)
 80009ac:	f001 f8ae 	bl	8001b0c <HAL_GPIO_Init>
}
 80009b0:	bf00      	nop
 80009b2:	3728      	adds	r7, #40	; 0x28
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	40012400 	.word	0x40012400
 80009bc:	40021000 	.word	0x40021000
 80009c0:	40010800 	.word	0x40010800
 80009c4:	40012800 	.word	0x40012800
 80009c8:	40010c00 	.word	0x40010c00

080009cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b08a      	sub	sp, #40	; 0x28
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d4:	f107 0318 	add.w	r3, r7, #24
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	609a      	str	r2, [r3, #8]
 80009e0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4a31      	ldr	r2, [pc, #196]	; (8000aac <HAL_SPI_MspInit+0xe0>)
 80009e8:	4293      	cmp	r3, r2
 80009ea:	d124      	bne.n	8000a36 <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009ec:	4b30      	ldr	r3, [pc, #192]	; (8000ab0 <HAL_SPI_MspInit+0xe4>)
 80009ee:	699b      	ldr	r3, [r3, #24]
 80009f0:	4a2f      	ldr	r2, [pc, #188]	; (8000ab0 <HAL_SPI_MspInit+0xe4>)
 80009f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009f6:	6193      	str	r3, [r2, #24]
 80009f8:	4b2d      	ldr	r3, [pc, #180]	; (8000ab0 <HAL_SPI_MspInit+0xe4>)
 80009fa:	699b      	ldr	r3, [r3, #24]
 80009fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a00:	617b      	str	r3, [r7, #20]
 8000a02:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a04:	4b2a      	ldr	r3, [pc, #168]	; (8000ab0 <HAL_SPI_MspInit+0xe4>)
 8000a06:	699b      	ldr	r3, [r3, #24]
 8000a08:	4a29      	ldr	r2, [pc, #164]	; (8000ab0 <HAL_SPI_MspInit+0xe4>)
 8000a0a:	f043 0304 	orr.w	r3, r3, #4
 8000a0e:	6193      	str	r3, [r2, #24]
 8000a10:	4b27      	ldr	r3, [pc, #156]	; (8000ab0 <HAL_SPI_MspInit+0xe4>)
 8000a12:	699b      	ldr	r3, [r3, #24]
 8000a14:	f003 0304 	and.w	r3, r3, #4
 8000a18:	613b      	str	r3, [r7, #16]
 8000a1a:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8000a1c:	23b0      	movs	r3, #176	; 0xb0
 8000a1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a20:	2302      	movs	r3, #2
 8000a22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a24:	2303      	movs	r3, #3
 8000a26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a28:	f107 0318 	add.w	r3, r7, #24
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4821      	ldr	r0, [pc, #132]	; (8000ab4 <HAL_SPI_MspInit+0xe8>)
 8000a30:	f001 f86c 	bl	8001b0c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000a34:	e036      	b.n	8000aa4 <HAL_SPI_MspInit+0xd8>
  else if(hspi->Instance==SPI2)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4a1f      	ldr	r2, [pc, #124]	; (8000ab8 <HAL_SPI_MspInit+0xec>)
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d131      	bne.n	8000aa4 <HAL_SPI_MspInit+0xd8>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a40:	4b1b      	ldr	r3, [pc, #108]	; (8000ab0 <HAL_SPI_MspInit+0xe4>)
 8000a42:	69db      	ldr	r3, [r3, #28]
 8000a44:	4a1a      	ldr	r2, [pc, #104]	; (8000ab0 <HAL_SPI_MspInit+0xe4>)
 8000a46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a4a:	61d3      	str	r3, [r2, #28]
 8000a4c:	4b18      	ldr	r3, [pc, #96]	; (8000ab0 <HAL_SPI_MspInit+0xe4>)
 8000a4e:	69db      	ldr	r3, [r3, #28]
 8000a50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a54:	60fb      	str	r3, [r7, #12]
 8000a56:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a58:	4b15      	ldr	r3, [pc, #84]	; (8000ab0 <HAL_SPI_MspInit+0xe4>)
 8000a5a:	699b      	ldr	r3, [r3, #24]
 8000a5c:	4a14      	ldr	r2, [pc, #80]	; (8000ab0 <HAL_SPI_MspInit+0xe4>)
 8000a5e:	f043 0308 	orr.w	r3, r3, #8
 8000a62:	6193      	str	r3, [r2, #24]
 8000a64:	4b12      	ldr	r3, [pc, #72]	; (8000ab0 <HAL_SPI_MspInit+0xe4>)
 8000a66:	699b      	ldr	r3, [r3, #24]
 8000a68:	f003 0308 	and.w	r3, r3, #8
 8000a6c:	60bb      	str	r3, [r7, #8]
 8000a6e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8000a70:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8000a74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a76:	2302      	movs	r3, #2
 8000a78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a7a:	2303      	movs	r3, #3
 8000a7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a7e:	f107 0318 	add.w	r3, r7, #24
 8000a82:	4619      	mov	r1, r3
 8000a84:	480d      	ldr	r0, [pc, #52]	; (8000abc <HAL_SPI_MspInit+0xf0>)
 8000a86:	f001 f841 	bl	8001b0c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000a8a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a90:	2300      	movs	r3, #0
 8000a92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a98:	f107 0318 	add.w	r3, r7, #24
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	4807      	ldr	r0, [pc, #28]	; (8000abc <HAL_SPI_MspInit+0xf0>)
 8000aa0:	f001 f834 	bl	8001b0c <HAL_GPIO_Init>
}
 8000aa4:	bf00      	nop
 8000aa6:	3728      	adds	r7, #40	; 0x28
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	40013000 	.word	0x40013000
 8000ab0:	40021000 	.word	0x40021000
 8000ab4:	40010800 	.word	0x40010800
 8000ab8:	40003800 	.word	0x40003800
 8000abc:	40010c00 	.word	0x40010c00

08000ac0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b086      	sub	sp, #24
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a27      	ldr	r2, [pc, #156]	; (8000b6c <HAL_TIM_Base_MspInit+0xac>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d114      	bne.n	8000afc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ad2:	4b27      	ldr	r3, [pc, #156]	; (8000b70 <HAL_TIM_Base_MspInit+0xb0>)
 8000ad4:	699b      	ldr	r3, [r3, #24]
 8000ad6:	4a26      	ldr	r2, [pc, #152]	; (8000b70 <HAL_TIM_Base_MspInit+0xb0>)
 8000ad8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000adc:	6193      	str	r3, [r2, #24]
 8000ade:	4b24      	ldr	r3, [pc, #144]	; (8000b70 <HAL_TIM_Base_MspInit+0xb0>)
 8000ae0:	699b      	ldr	r3, [r3, #24]
 8000ae2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ae6:	617b      	str	r3, [r7, #20]
 8000ae8:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 1, 0);
 8000aea:	2200      	movs	r2, #0
 8000aec:	2101      	movs	r1, #1
 8000aee:	2019      	movs	r0, #25
 8000af0:	f000 ffd5 	bl	8001a9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000af4:	2019      	movs	r0, #25
 8000af6:	f000 ffee 	bl	8001ad6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000afa:	e032      	b.n	8000b62 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM2)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b04:	d114      	bne.n	8000b30 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b06:	4b1a      	ldr	r3, [pc, #104]	; (8000b70 <HAL_TIM_Base_MspInit+0xb0>)
 8000b08:	69db      	ldr	r3, [r3, #28]
 8000b0a:	4a19      	ldr	r2, [pc, #100]	; (8000b70 <HAL_TIM_Base_MspInit+0xb0>)
 8000b0c:	f043 0301 	orr.w	r3, r3, #1
 8000b10:	61d3      	str	r3, [r2, #28]
 8000b12:	4b17      	ldr	r3, [pc, #92]	; (8000b70 <HAL_TIM_Base_MspInit+0xb0>)
 8000b14:	69db      	ldr	r3, [r3, #28]
 8000b16:	f003 0301 	and.w	r3, r3, #1
 8000b1a:	613b      	str	r3, [r7, #16]
 8000b1c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	2102      	movs	r1, #2
 8000b22:	201c      	movs	r0, #28
 8000b24:	f000 ffbb 	bl	8001a9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b28:	201c      	movs	r0, #28
 8000b2a:	f000 ffd4 	bl	8001ad6 <HAL_NVIC_EnableIRQ>
}
 8000b2e:	e018      	b.n	8000b62 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM3)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a0f      	ldr	r2, [pc, #60]	; (8000b74 <HAL_TIM_Base_MspInit+0xb4>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d113      	bne.n	8000b62 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b3a:	4b0d      	ldr	r3, [pc, #52]	; (8000b70 <HAL_TIM_Base_MspInit+0xb0>)
 8000b3c:	69db      	ldr	r3, [r3, #28]
 8000b3e:	4a0c      	ldr	r2, [pc, #48]	; (8000b70 <HAL_TIM_Base_MspInit+0xb0>)
 8000b40:	f043 0302 	orr.w	r3, r3, #2
 8000b44:	61d3      	str	r3, [r2, #28]
 8000b46:	4b0a      	ldr	r3, [pc, #40]	; (8000b70 <HAL_TIM_Base_MspInit+0xb0>)
 8000b48:	69db      	ldr	r3, [r3, #28]
 8000b4a:	f003 0302 	and.w	r3, r3, #2
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 3, 0);
 8000b52:	2200      	movs	r2, #0
 8000b54:	2103      	movs	r1, #3
 8000b56:	201d      	movs	r0, #29
 8000b58:	f000 ffa1 	bl	8001a9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000b5c:	201d      	movs	r0, #29
 8000b5e:	f000 ffba 	bl	8001ad6 <HAL_NVIC_EnableIRQ>
}
 8000b62:	bf00      	nop
 8000b64:	3718      	adds	r7, #24
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40012c00 	.word	0x40012c00
 8000b70:	40021000 	.word	0x40021000
 8000b74:	40000400 	.word	0x40000400

08000b78 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b08a      	sub	sp, #40	; 0x28
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b80:	f107 0314 	add.w	r3, r7, #20
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	605a      	str	r2, [r3, #4]
 8000b8a:	609a      	str	r2, [r3, #8]
 8000b8c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b96:	d14f      	bne.n	8000c38 <HAL_TIM_MspPostInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b98:	4b29      	ldr	r3, [pc, #164]	; (8000c40 <HAL_TIM_MspPostInit+0xc8>)
 8000b9a:	699b      	ldr	r3, [r3, #24]
 8000b9c:	4a28      	ldr	r2, [pc, #160]	; (8000c40 <HAL_TIM_MspPostInit+0xc8>)
 8000b9e:	f043 0308 	orr.w	r3, r3, #8
 8000ba2:	6193      	str	r3, [r2, #24]
 8000ba4:	4b26      	ldr	r3, [pc, #152]	; (8000c40 <HAL_TIM_MspPostInit+0xc8>)
 8000ba6:	699b      	ldr	r3, [r3, #24]
 8000ba8:	f003 0308 	and.w	r3, r3, #8
 8000bac:	613b      	str	r3, [r7, #16]
 8000bae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb0:	4b23      	ldr	r3, [pc, #140]	; (8000c40 <HAL_TIM_MspPostInit+0xc8>)
 8000bb2:	699b      	ldr	r3, [r3, #24]
 8000bb4:	4a22      	ldr	r2, [pc, #136]	; (8000c40 <HAL_TIM_MspPostInit+0xc8>)
 8000bb6:	f043 0304 	orr.w	r3, r3, #4
 8000bba:	6193      	str	r3, [r2, #24]
 8000bbc:	4b20      	ldr	r3, [pc, #128]	; (8000c40 <HAL_TIM_MspPostInit+0xc8>)
 8000bbe:	699b      	ldr	r3, [r3, #24]
 8000bc0:	f003 0304 	and.w	r3, r3, #4
 8000bc4:	60fb      	str	r3, [r7, #12]
 8000bc6:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000bc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bd6:	f107 0314 	add.w	r3, r7, #20
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4819      	ldr	r0, [pc, #100]	; (8000c44 <HAL_TIM_MspPostInit+0xcc>)
 8000bde:	f000 ff95 	bl	8001b0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000be2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000be6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be8:	2302      	movs	r3, #2
 8000bea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bec:	2303      	movs	r3, #3
 8000bee:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf0:	f107 0314 	add.w	r3, r7, #20
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4814      	ldr	r0, [pc, #80]	; (8000c48 <HAL_TIM_MspPostInit+0xd0>)
 8000bf8:	f000 ff88 	bl	8001b0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000bfc:	2308      	movs	r3, #8
 8000bfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c00:	2302      	movs	r3, #2
 8000c02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c04:	2303      	movs	r3, #3
 8000c06:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c08:	f107 0314 	add.w	r3, r7, #20
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	480d      	ldr	r0, [pc, #52]	; (8000c44 <HAL_TIM_MspPostInit+0xcc>)
 8000c10:	f000 ff7c 	bl	8001b0c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_ENABLE();
 8000c14:	4b0d      	ldr	r3, [pc, #52]	; (8000c4c <HAL_TIM_MspPostInit+0xd4>)
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	627b      	str	r3, [r7, #36]	; 0x24
 8000c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000c20:	627b      	str	r3, [r7, #36]	; 0x24
 8000c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c24:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000c28:	627b      	str	r3, [r7, #36]	; 0x24
 8000c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c2c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000c30:	627b      	str	r3, [r7, #36]	; 0x24
 8000c32:	4a06      	ldr	r2, [pc, #24]	; (8000c4c <HAL_TIM_MspPostInit+0xd4>)
 8000c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c36:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000c38:	bf00      	nop
 8000c3a:	3728      	adds	r7, #40	; 0x28
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	40021000 	.word	0x40021000
 8000c44:	40010c00 	.word	0x40010c00
 8000c48:	40010800 	.word	0x40010800
 8000c4c:	40010000 	.word	0x40010000

08000c50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b088      	sub	sp, #32
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c58:	f107 0310 	add.w	r3, r7, #16
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4a1c      	ldr	r2, [pc, #112]	; (8000cdc <HAL_UART_MspInit+0x8c>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d131      	bne.n	8000cd4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c70:	4b1b      	ldr	r3, [pc, #108]	; (8000ce0 <HAL_UART_MspInit+0x90>)
 8000c72:	699b      	ldr	r3, [r3, #24]
 8000c74:	4a1a      	ldr	r2, [pc, #104]	; (8000ce0 <HAL_UART_MspInit+0x90>)
 8000c76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c7a:	6193      	str	r3, [r2, #24]
 8000c7c:	4b18      	ldr	r3, [pc, #96]	; (8000ce0 <HAL_UART_MspInit+0x90>)
 8000c7e:	699b      	ldr	r3, [r3, #24]
 8000c80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c84:	60fb      	str	r3, [r7, #12]
 8000c86:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c88:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <HAL_UART_MspInit+0x90>)
 8000c8a:	699b      	ldr	r3, [r3, #24]
 8000c8c:	4a14      	ldr	r2, [pc, #80]	; (8000ce0 <HAL_UART_MspInit+0x90>)
 8000c8e:	f043 0304 	orr.w	r3, r3, #4
 8000c92:	6193      	str	r3, [r2, #24]
 8000c94:	4b12      	ldr	r3, [pc, #72]	; (8000ce0 <HAL_UART_MspInit+0x90>)
 8000c96:	699b      	ldr	r3, [r3, #24]
 8000c98:	f003 0304 	and.w	r3, r3, #4
 8000c9c:	60bb      	str	r3, [r7, #8]
 8000c9e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ca0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ca4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000caa:	2303      	movs	r3, #3
 8000cac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cae:	f107 0310 	add.w	r3, r7, #16
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	480b      	ldr	r0, [pc, #44]	; (8000ce4 <HAL_UART_MspInit+0x94>)
 8000cb6:	f000 ff29 	bl	8001b0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000cba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cbe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc8:	f107 0310 	add.w	r3, r7, #16
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4805      	ldr	r0, [pc, #20]	; (8000ce4 <HAL_UART_MspInit+0x94>)
 8000cd0:	f000 ff1c 	bl	8001b0c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000cd4:	bf00      	nop
 8000cd6:	3720      	adds	r7, #32
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	40013800 	.word	0x40013800
 8000ce0:	40021000 	.word	0x40021000
 8000ce4:	40010800 	.word	0x40010800

08000ce8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000cec:	bf00      	nop
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bc80      	pop	{r7}
 8000cf2:	4770      	bx	lr

08000cf4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cf8:	e7fe      	b.n	8000cf8 <HardFault_Handler+0x4>

08000cfa <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cfe:	e7fe      	b.n	8000cfe <MemManage_Handler+0x4>

08000d00 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d04:	e7fe      	b.n	8000d04 <BusFault_Handler+0x4>

08000d06 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d06:	b480      	push	{r7}
 8000d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d0a:	e7fe      	b.n	8000d0a <UsageFault_Handler+0x4>

08000d0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d10:	bf00      	nop
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bc80      	pop	{r7}
 8000d16:	4770      	bx	lr

08000d18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d1c:	bf00      	nop
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bc80      	pop	{r7}
 8000d22:	4770      	bx	lr

08000d24 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bc80      	pop	{r7}
 8000d2e:	4770      	bx	lr

08000d30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d34:	f000 fb94 	bl	8001460 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d38:	bf00      	nop
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000d40:	2002      	movs	r0, #2
 8000d42:	f001 f855 	bl	8001df0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000d46:	bf00      	nop
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000d4e:	2004      	movs	r0, #4
 8000d50:	f001 f84e 	bl	8001df0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000d54:	bf00      	nop
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000d5c:	2008      	movs	r0, #8
 8000d5e:	f001 f847 	bl	8001df0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
	...

08000d68 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000d6c:	4802      	ldr	r0, [pc, #8]	; (8000d78 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000d6e:	f001 f998 	bl	80020a2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	20001dd0 	.word	0x20001dd0

08000d7c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d80:	4802      	ldr	r0, [pc, #8]	; (8000d8c <TIM1_UP_IRQHandler+0x10>)
 8000d82:	f003 f84d 	bl	8003e20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	20000790 	.word	0x20000790

08000d90 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d94:	4802      	ldr	r0, [pc, #8]	; (8000da0 <TIM2_IRQHandler+0x10>)
 8000d96:	f003 f843 	bl	8003e20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	20000828 	.word	0x20000828

08000da4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000da4:	b598      	push	{r3, r4, r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
  micros_timer++;
 8000da8:	4b0f      	ldr	r3, [pc, #60]	; (8000de8 <TIM3_IRQHandler+0x44>)
 8000daa:	e9d3 1200 	ldrd	r1, r2, [r3]
 8000dae:	1c4b      	adds	r3, r1, #1
 8000db0:	f142 0400 	adc.w	r4, r2, #0
 8000db4:	4a0c      	ldr	r2, [pc, #48]	; (8000de8 <TIM3_IRQHandler+0x44>)
 8000db6:	e9c2 3400 	strd	r3, r4, [r2]
  millis_counter++;
 8000dba:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <TIM3_IRQHandler+0x48>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	4a0a      	ldr	r2, [pc, #40]	; (8000dec <TIM3_IRQHandler+0x48>)
 8000dc2:	6013      	str	r3, [r2, #0]
  if(millis_counter > 300){
 8000dc4:	4b09      	ldr	r3, [pc, #36]	; (8000dec <TIM3_IRQHandler+0x48>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000dcc:	d907      	bls.n	8000dde <TIM3_IRQHandler+0x3a>
	  millis_counter = 0;
 8000dce:	4b07      	ldr	r3, [pc, #28]	; (8000dec <TIM3_IRQHandler+0x48>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
	  millis_timer++;
 8000dd4:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <TIM3_IRQHandler+0x4c>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	3301      	adds	r3, #1
 8000dda:	4a05      	ldr	r2, [pc, #20]	; (8000df0 <TIM3_IRQHandler+0x4c>)
 8000ddc:	6013      	str	r3, [r2, #0]
  }
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000dde:	4805      	ldr	r0, [pc, #20]	; (8000df4 <TIM3_IRQHandler+0x50>)
 8000de0:	f003 f81e 	bl	8003e20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000de4:	bf00      	nop
 8000de6:	bd98      	pop	{r3, r4, r7, pc}
 8000de8:	20000870 	.word	0x20000870
 8000dec:	2000086c 	.word	0x2000086c
 8000df0:	20000878 	.word	0x20000878
 8000df4:	200006e0 	.word	0x200006e0

08000df8 <USBWakeUp_IRQHandler>:

/**
  * @brief This function handles USB wake-up interrupt through EXTI line 18.
  */
void USBWakeUp_IRQHandler(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USBWakeUp_IRQn 0 */

  /* USER CODE END USBWakeUp_IRQn 0 */
  if ((&hpcd_USB_FS)->Init.low_power_enable) {
 8000dfc:	4b08      	ldr	r3, [pc, #32]	; (8000e20 <USBWakeUp_IRQHandler+0x28>)
 8000dfe:	699b      	ldr	r3, [r3, #24]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d007      	beq.n	8000e14 <USBWakeUp_IRQHandler+0x1c>
    /* Reset SLEEPDEEP bit of Cortex System Control Register */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8000e04:	4b07      	ldr	r3, [pc, #28]	; (8000e24 <USBWakeUp_IRQHandler+0x2c>)
 8000e06:	691b      	ldr	r3, [r3, #16]
 8000e08:	4a06      	ldr	r2, [pc, #24]	; (8000e24 <USBWakeUp_IRQHandler+0x2c>)
 8000e0a:	f023 0306 	bic.w	r3, r3, #6
 8000e0e:	6113      	str	r3, [r2, #16]
    SystemClock_Config();
 8000e10:	f7ff f9e4 	bl	80001dc <SystemClock_Config>
  }
  /* Clear EXTI pending bit */
  __HAL_USB_WAKEUP_EXTI_CLEAR_FLAG();
 8000e14:	4b04      	ldr	r3, [pc, #16]	; (8000e28 <USBWakeUp_IRQHandler+0x30>)
 8000e16:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000e1a:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN USBWakeUp_IRQn 1 */

  /* USER CODE END USBWakeUp_IRQn 1 */
}
 8000e1c:	bf00      	nop
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	20001dd0 	.word	0x20001dd0
 8000e24:	e000ed00 	.word	0xe000ed00
 8000e28:	40010400 	.word	0x40010400

08000e2c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000e30:	4b15      	ldr	r3, [pc, #84]	; (8000e88 <SystemInit+0x5c>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a14      	ldr	r2, [pc, #80]	; (8000e88 <SystemInit+0x5c>)
 8000e36:	f043 0301 	orr.w	r3, r3, #1
 8000e3a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000e3c:	4b12      	ldr	r3, [pc, #72]	; (8000e88 <SystemInit+0x5c>)
 8000e3e:	685a      	ldr	r2, [r3, #4]
 8000e40:	4911      	ldr	r1, [pc, #68]	; (8000e88 <SystemInit+0x5c>)
 8000e42:	4b12      	ldr	r3, [pc, #72]	; (8000e8c <SystemInit+0x60>)
 8000e44:	4013      	ands	r3, r2
 8000e46:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000e48:	4b0f      	ldr	r3, [pc, #60]	; (8000e88 <SystemInit+0x5c>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a0e      	ldr	r2, [pc, #56]	; (8000e88 <SystemInit+0x5c>)
 8000e4e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000e52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e56:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e58:	4b0b      	ldr	r3, [pc, #44]	; (8000e88 <SystemInit+0x5c>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a0a      	ldr	r2, [pc, #40]	; (8000e88 <SystemInit+0x5c>)
 8000e5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e62:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000e64:	4b08      	ldr	r3, [pc, #32]	; (8000e88 <SystemInit+0x5c>)
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	4a07      	ldr	r2, [pc, #28]	; (8000e88 <SystemInit+0x5c>)
 8000e6a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000e6e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000e70:	4b05      	ldr	r3, [pc, #20]	; (8000e88 <SystemInit+0x5c>)
 8000e72:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000e76:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000e78:	4b05      	ldr	r3, [pc, #20]	; (8000e90 <SystemInit+0x64>)
 8000e7a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e7e:	609a      	str	r2, [r3, #8]
#endif 
}
 8000e80:	bf00      	nop
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bc80      	pop	{r7}
 8000e86:	4770      	bx	lr
 8000e88:	40021000 	.word	0x40021000
 8000e8c:	f8ff0000 	.word	0xf8ff0000
 8000e90:	e000ed00 	.word	0xe000ed00

08000e94 <W25qxx_Spi>:
#else
#define	W25qxx_Delay(delay)		HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t	W25qxx_Spi(uint8_t	Data)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b086      	sub	sp, #24
 8000e98:	af02      	add	r7, sp, #8
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	71fb      	strb	r3, [r7, #7]
	uint8_t	ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI,&Data,&ret,1,100);
 8000e9e:	f107 020f 	add.w	r2, r7, #15
 8000ea2:	1df9      	adds	r1, r7, #7
 8000ea4:	2364      	movs	r3, #100	; 0x64
 8000ea6:	9300      	str	r3, [sp, #0]
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	4804      	ldr	r0, [pc, #16]	; (8000ebc <W25qxx_Spi+0x28>)
 8000eac:	f002 fcba 	bl	8003824 <HAL_SPI_TransmitReceive>
	return ret;	
 8000eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3710      	adds	r7, #16
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	20000658 	.word	0x20000658

08000ec0 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
  uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	60fb      	str	r3, [r7, #12]
 8000eca:	2300      	movs	r3, #0
 8000ecc:	60bb      	str	r3, [r7, #8]
 8000ece:	2300      	movs	r3, #0
 8000ed0:	607b      	str	r3, [r7, #4]
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	603b      	str	r3, [r7, #0]
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	2110      	movs	r1, #16
 8000eda:	4813      	ldr	r0, [pc, #76]	; (8000f28 <W25qxx_ReadID+0x68>)
 8000edc:	f000 ff70 	bl	8001dc0 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x9F);
 8000ee0:	209f      	movs	r0, #159	; 0x9f
 8000ee2:	f7ff ffd7 	bl	8000e94 <W25qxx_Spi>
  Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8000ee6:	20a5      	movs	r0, #165	; 0xa5
 8000ee8:	f7ff ffd4 	bl	8000e94 <W25qxx_Spi>
 8000eec:	4603      	mov	r3, r0
 8000eee:	60bb      	str	r3, [r7, #8]
  Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8000ef0:	20a5      	movs	r0, #165	; 0xa5
 8000ef2:	f7ff ffcf 	bl	8000e94 <W25qxx_Spi>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	607b      	str	r3, [r7, #4]
  Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8000efa:	20a5      	movs	r0, #165	; 0xa5
 8000efc:	f7ff ffca 	bl	8000e94 <W25qxx_Spi>
 8000f00:	4603      	mov	r3, r0
 8000f02:	603b      	str	r3, [r7, #0]
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8000f04:	2201      	movs	r2, #1
 8000f06:	2110      	movs	r1, #16
 8000f08:	4807      	ldr	r0, [pc, #28]	; (8000f28 <W25qxx_ReadID+0x68>)
 8000f0a:	f000 ff59 	bl	8001dc0 <HAL_GPIO_WritePin>
  Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8000f0e:	68bb      	ldr	r3, [r7, #8]
 8000f10:	041a      	lsls	r2, r3, #16
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	021b      	lsls	r3, r3, #8
 8000f16:	4313      	orrs	r3, r2
 8000f18:	683a      	ldr	r2, [r7, #0]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	60fb      	str	r3, [r7, #12]
  return Temp;
 8000f1e:	68fb      	ldr	r3, [r7, #12]
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3710      	adds	r7, #16
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	40010800 	.word	0x40010800

08000f2c <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8000f2c:	b590      	push	{r4, r7, lr}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8000f32:	2200      	movs	r2, #0
 8000f34:	2110      	movs	r1, #16
 8000f36:	4816      	ldr	r0, [pc, #88]	; (8000f90 <W25qxx_ReadUniqID+0x64>)
 8000f38:	f000 ff42 	bl	8001dc0 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x4B);
 8000f3c:	204b      	movs	r0, #75	; 0x4b
 8000f3e:	f7ff ffa9 	bl	8000e94 <W25qxx_Spi>
	for(uint8_t	i=0;i<4;i++)
 8000f42:	2300      	movs	r3, #0
 8000f44:	71fb      	strb	r3, [r7, #7]
 8000f46:	e005      	b.n	8000f54 <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8000f48:	20a5      	movs	r0, #165	; 0xa5
 8000f4a:	f7ff ffa3 	bl	8000e94 <W25qxx_Spi>
	for(uint8_t	i=0;i<4;i++)
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	3301      	adds	r3, #1
 8000f52:	71fb      	strb	r3, [r7, #7]
 8000f54:	79fb      	ldrb	r3, [r7, #7]
 8000f56:	2b03      	cmp	r3, #3
 8000f58:	d9f6      	bls.n	8000f48 <W25qxx_ReadUniqID+0x1c>
	for(uint8_t	i=0;i<8;i++)
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	71bb      	strb	r3, [r7, #6]
 8000f5e:	e00b      	b.n	8000f78 <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8000f60:	79bc      	ldrb	r4, [r7, #6]
 8000f62:	20a5      	movs	r0, #165	; 0xa5
 8000f64:	f7ff ff96 	bl	8000e94 <W25qxx_Spi>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <W25qxx_ReadUniqID+0x68>)
 8000f6e:	4423      	add	r3, r4
 8000f70:	705a      	strb	r2, [r3, #1]
	for(uint8_t	i=0;i<8;i++)
 8000f72:	79bb      	ldrb	r3, [r7, #6]
 8000f74:	3301      	adds	r3, #1
 8000f76:	71bb      	strb	r3, [r7, #6]
 8000f78:	79bb      	ldrb	r3, [r7, #6]
 8000f7a:	2b07      	cmp	r3, #7
 8000f7c:	d9f0      	bls.n	8000f60 <W25qxx_ReadUniqID+0x34>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8000f7e:	2201      	movs	r2, #1
 8000f80:	2110      	movs	r1, #16
 8000f82:	4803      	ldr	r0, [pc, #12]	; (8000f90 <W25qxx_ReadUniqID+0x64>)
 8000f84:	f000 ff1c 	bl	8001dc0 <HAL_GPIO_WritePin>
}
 8000f88:	bf00      	nop
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd90      	pop	{r4, r7, pc}
 8000f90:	40010800 	.word	0x40010800
 8000f94:	2000087c 	.word	0x2000087c

08000f98 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	2110      	movs	r1, #16
 8000fa0:	4807      	ldr	r0, [pc, #28]	; (8000fc0 <W25qxx_WriteEnable+0x28>)
 8000fa2:	f000 ff0d 	bl	8001dc0 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x06);
 8000fa6:	2006      	movs	r0, #6
 8000fa8:	f7ff ff74 	bl	8000e94 <W25qxx_Spi>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8000fac:	2201      	movs	r2, #1
 8000fae:	2110      	movs	r1, #16
 8000fb0:	4803      	ldr	r0, [pc, #12]	; (8000fc0 <W25qxx_WriteEnable+0x28>)
 8000fb2:	f000 ff05 	bl	8001dc0 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 8000fb6:	2001      	movs	r0, #1
 8000fb8:	f000 fa6e 	bl	8001498 <HAL_Delay>
}
 8000fbc:	bf00      	nop
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	40010800 	.word	0x40010800

08000fc4 <W25qxx_ReadStatusRegister>:
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t	SelectStatusRegister_1_2_3)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	71fb      	strb	r3, [r7, #7]
	uint8_t	status=0;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	2110      	movs	r1, #16
 8000fd6:	481c      	ldr	r0, [pc, #112]	; (8001048 <W25qxx_ReadStatusRegister+0x84>)
 8000fd8:	f000 fef2 	bl	8001dc0 <HAL_GPIO_WritePin>
	if(SelectStatusRegister_1_2_3==1)
 8000fdc:	79fb      	ldrb	r3, [r7, #7]
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d10c      	bne.n	8000ffc <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 8000fe2:	2005      	movs	r0, #5
 8000fe4:	f7ff ff56 	bl	8000e94 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 8000fe8:	20a5      	movs	r0, #165	; 0xa5
 8000fea:	f7ff ff53 	bl	8000e94 <W25qxx_Spi>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 8000ff2:	4a16      	ldr	r2, [pc, #88]	; (800104c <W25qxx_ReadStatusRegister+0x88>)
 8000ff4:	7bfb      	ldrb	r3, [r7, #15]
 8000ff6:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8000ffa:	e01b      	b.n	8001034 <W25qxx_ReadStatusRegister+0x70>
	}
	else if(SelectStatusRegister_1_2_3==2)
 8000ffc:	79fb      	ldrb	r3, [r7, #7]
 8000ffe:	2b02      	cmp	r3, #2
 8001000:	d10c      	bne.n	800101c <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 8001002:	2035      	movs	r0, #53	; 0x35
 8001004:	f7ff ff46 	bl	8000e94 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 8001008:	20a5      	movs	r0, #165	; 0xa5
 800100a:	f7ff ff43 	bl	8000e94 <W25qxx_Spi>
 800100e:	4603      	mov	r3, r0
 8001010:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 8001012:	4a0e      	ldr	r2, [pc, #56]	; (800104c <W25qxx_ReadStatusRegister+0x88>)
 8001014:	7bfb      	ldrb	r3, [r7, #15]
 8001016:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 800101a:	e00b      	b.n	8001034 <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 800101c:	2015      	movs	r0, #21
 800101e:	f7ff ff39 	bl	8000e94 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 8001022:	20a5      	movs	r0, #165	; 0xa5
 8001024:	f7ff ff36 	bl	8000e94 <W25qxx_Spi>
 8001028:	4603      	mov	r3, r0
 800102a:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 800102c:	4a07      	ldr	r2, [pc, #28]	; (800104c <W25qxx_ReadStatusRegister+0x88>)
 800102e:	7bfb      	ldrb	r3, [r7, #15]
 8001030:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}	
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8001034:	2201      	movs	r2, #1
 8001036:	2110      	movs	r1, #16
 8001038:	4803      	ldr	r0, [pc, #12]	; (8001048 <W25qxx_ReadStatusRegister+0x84>)
 800103a:	f000 fec1 	bl	8001dc0 <HAL_GPIO_WritePin>
	return status;
 800103e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001040:	4618      	mov	r0, r3
 8001042:	3710      	adds	r7, #16
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	40010800 	.word	0x40010800
 800104c:	2000087c 	.word	0x2000087c

08001050 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 8001054:	2001      	movs	r0, #1
 8001056:	f000 fa1f 	bl	8001498 <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 800105a:	2200      	movs	r2, #0
 800105c:	2110      	movs	r1, #16
 800105e:	480f      	ldr	r0, [pc, #60]	; (800109c <W25qxx_WaitForWriteEnd+0x4c>)
 8001060:	f000 feae 	bl	8001dc0 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 8001064:	2005      	movs	r0, #5
 8001066:	f7ff ff15 	bl	8000e94 <W25qxx_Spi>
  do
  {
    w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800106a:	20a5      	movs	r0, #165	; 0xa5
 800106c:	f7ff ff12 	bl	8000e94 <W25qxx_Spi>
 8001070:	4603      	mov	r3, r0
 8001072:	461a      	mov	r2, r3
 8001074:	4b0a      	ldr	r3, [pc, #40]	; (80010a0 <W25qxx_WaitForWriteEnd+0x50>)
 8001076:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 800107a:	2001      	movs	r0, #1
 800107c:	f000 fa0c 	bl	8001498 <HAL_Delay>
  }
  while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8001080:	4b07      	ldr	r3, [pc, #28]	; (80010a0 <W25qxx_WaitForWriteEnd+0x50>)
 8001082:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001086:	f003 0301 	and.w	r3, r3, #1
 800108a:	2b00      	cmp	r3, #0
 800108c:	d1ed      	bne.n	800106a <W25qxx_WaitForWriteEnd+0x1a>
 HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 800108e:	2201      	movs	r2, #1
 8001090:	2110      	movs	r1, #16
 8001092:	4802      	ldr	r0, [pc, #8]	; (800109c <W25qxx_WaitForWriteEnd+0x4c>)
 8001094:	f000 fe94 	bl	8001dc0 <HAL_GPIO_WritePin>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40010800 	.word	0x40010800
 80010a0:	2000087c 	.word	0x2000087c

080010a4 <W25qxx_Init>:
//###################################################################################################################
bool	W25qxx_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
	w25qxx.Lock=1;	
 80010aa:	4b60      	ldr	r3, [pc, #384]	; (800122c <W25qxx_Init+0x188>)
 80010ac:	2201      	movs	r2, #1
 80010ae:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while(HAL_GetTick()<100)
 80010b2:	e002      	b.n	80010ba <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 80010b4:	2001      	movs	r0, #1
 80010b6:	f000 f9ef 	bl	8001498 <HAL_Delay>
	while(HAL_GetTick()<100)
 80010ba:	f000 f9e3 	bl	8001484 <HAL_GetTick>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b63      	cmp	r3, #99	; 0x63
 80010c2:	d9f7      	bls.n	80010b4 <W25qxx_Init+0x10>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 80010c4:	2201      	movs	r2, #1
 80010c6:	2110      	movs	r1, #16
 80010c8:	4859      	ldr	r0, [pc, #356]	; (8001230 <W25qxx_Init+0x18c>)
 80010ca:	f000 fe79 	bl	8001dc0 <HAL_GPIO_WritePin>
  W25qxx_Delay(100);
 80010ce:	2064      	movs	r0, #100	; 0x64
 80010d0:	f000 f9e2 	bl	8001498 <HAL_Delay>
	uint32_t	id;
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx Init Begin...\r\n");
	#endif
	id=W25qxx_ReadID();
 80010d4:	f7ff fef4 	bl	8000ec0 <W25qxx_ReadID>
 80010d8:	6078      	str	r0, [r7, #4]
	
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx ID:0x%X\r\n",id);
	#endif
	switch(id&0x0000FFFF)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	b29b      	uxth	r3, r3
 80010de:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80010e2:	3b11      	subs	r3, #17
 80010e4:	2b09      	cmp	r3, #9
 80010e6:	d860      	bhi.n	80011aa <W25qxx_Init+0x106>
 80010e8:	a201      	add	r2, pc, #4	; (adr r2, 80010f0 <W25qxx_Init+0x4c>)
 80010ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ee:	bf00      	nop
 80010f0:	0800119d 	.word	0x0800119d
 80010f4:	0800118f 	.word	0x0800118f
 80010f8:	08001181 	.word	0x08001181
 80010fc:	08001173 	.word	0x08001173
 8001100:	08001165 	.word	0x08001165
 8001104:	08001157 	.word	0x08001157
 8001108:	08001149 	.word	0x08001149
 800110c:	08001139 	.word	0x08001139
 8001110:	08001129 	.word	0x08001129
 8001114:	08001119 	.word	0x08001119
	{
		case 0x401A:	// 	w25q512
			w25qxx.ID=W25Q512;
 8001118:	4b44      	ldr	r3, [pc, #272]	; (800122c <W25qxx_Init+0x188>)
 800111a:	220a      	movs	r2, #10
 800111c:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=1024;
 800111e:	4b43      	ldr	r3, [pc, #268]	; (800122c <W25qxx_Init+0x188>)
 8001120:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001124:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q512\r\n");
			#endif
		break;
 8001126:	e046      	b.n	80011b6 <W25qxx_Init+0x112>
		case 0x4019:	// 	w25q256
			w25qxx.ID=W25Q256;
 8001128:	4b40      	ldr	r3, [pc, #256]	; (800122c <W25qxx_Init+0x188>)
 800112a:	2209      	movs	r2, #9
 800112c:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=512;
 800112e:	4b3f      	ldr	r3, [pc, #252]	; (800122c <W25qxx_Init+0x188>)
 8001130:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001134:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q256\r\n");
			#endif
		break;
 8001136:	e03e      	b.n	80011b6 <W25qxx_Init+0x112>
		case 0x4018:	// 	w25q128
			w25qxx.ID=W25Q128;
 8001138:	4b3c      	ldr	r3, [pc, #240]	; (800122c <W25qxx_Init+0x188>)
 800113a:	2208      	movs	r2, #8
 800113c:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=256;
 800113e:	4b3b      	ldr	r3, [pc, #236]	; (800122c <W25qxx_Init+0x188>)
 8001140:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001144:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q128\r\n");
			#endif
		break;
 8001146:	e036      	b.n	80011b6 <W25qxx_Init+0x112>
		case 0x4017:	//	w25q64
			w25qxx.ID=W25Q64;
 8001148:	4b38      	ldr	r3, [pc, #224]	; (800122c <W25qxx_Init+0x188>)
 800114a:	2207      	movs	r2, #7
 800114c:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=128;
 800114e:	4b37      	ldr	r3, [pc, #220]	; (800122c <W25qxx_Init+0x188>)
 8001150:	2280      	movs	r2, #128	; 0x80
 8001152:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q64\r\n");
			#endif
		break;
 8001154:	e02f      	b.n	80011b6 <W25qxx_Init+0x112>
		case 0x4016:	//	w25q32
			w25qxx.ID=W25Q32;
 8001156:	4b35      	ldr	r3, [pc, #212]	; (800122c <W25qxx_Init+0x188>)
 8001158:	2206      	movs	r2, #6
 800115a:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=64;
 800115c:	4b33      	ldr	r3, [pc, #204]	; (800122c <W25qxx_Init+0x188>)
 800115e:	2240      	movs	r2, #64	; 0x40
 8001160:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q32\r\n");
			#endif
		break;
 8001162:	e028      	b.n	80011b6 <W25qxx_Init+0x112>
		case 0x4015:	//	w25q16
			w25qxx.ID=W25Q16;
 8001164:	4b31      	ldr	r3, [pc, #196]	; (800122c <W25qxx_Init+0x188>)
 8001166:	2205      	movs	r2, #5
 8001168:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=32;
 800116a:	4b30      	ldr	r3, [pc, #192]	; (800122c <W25qxx_Init+0x188>)
 800116c:	2220      	movs	r2, #32
 800116e:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q16\r\n");
			#endif
		break;
 8001170:	e021      	b.n	80011b6 <W25qxx_Init+0x112>
		case 0x4014:	//	w25q80
			w25qxx.ID=W25Q80;
 8001172:	4b2e      	ldr	r3, [pc, #184]	; (800122c <W25qxx_Init+0x188>)
 8001174:	2204      	movs	r2, #4
 8001176:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=16;
 8001178:	4b2c      	ldr	r3, [pc, #176]	; (800122c <W25qxx_Init+0x188>)
 800117a:	2210      	movs	r2, #16
 800117c:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q80\r\n");
			#endif
		break;
 800117e:	e01a      	b.n	80011b6 <W25qxx_Init+0x112>
		case 0x4013:	//	w25q40
			w25qxx.ID=W25Q40;
 8001180:	4b2a      	ldr	r3, [pc, #168]	; (800122c <W25qxx_Init+0x188>)
 8001182:	2203      	movs	r2, #3
 8001184:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=8;
 8001186:	4b29      	ldr	r3, [pc, #164]	; (800122c <W25qxx_Init+0x188>)
 8001188:	2208      	movs	r2, #8
 800118a:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q40\r\n");
			#endif
		break;
 800118c:	e013      	b.n	80011b6 <W25qxx_Init+0x112>
		case 0x4012:	//	w25q20
			w25qxx.ID=W25Q20;
 800118e:	4b27      	ldr	r3, [pc, #156]	; (800122c <W25qxx_Init+0x188>)
 8001190:	2202      	movs	r2, #2
 8001192:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=4;
 8001194:	4b25      	ldr	r3, [pc, #148]	; (800122c <W25qxx_Init+0x188>)
 8001196:	2204      	movs	r2, #4
 8001198:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q20\r\n");
			#endif
		break;
 800119a:	e00c      	b.n	80011b6 <W25qxx_Init+0x112>
		case 0x4011:	//	w25q10
			w25qxx.ID=W25Q10;
 800119c:	4b23      	ldr	r3, [pc, #140]	; (800122c <W25qxx_Init+0x188>)
 800119e:	2201      	movs	r2, #1
 80011a0:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=2;
 80011a2:	4b22      	ldr	r3, [pc, #136]	; (800122c <W25qxx_Init+0x188>)
 80011a4:	2202      	movs	r2, #2
 80011a6:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q10\r\n");
			#endif
		break;
 80011a8:	e005      	b.n	80011b6 <W25qxx_Init+0x112>
		default:
				#if (_W25QXX_DEBUG==1)
				printf("w25qxx Unknown ID\r\n");
				#endif
			w25qxx.Lock=0;	
 80011aa:	4b20      	ldr	r3, [pc, #128]	; (800122c <W25qxx_Init+0x188>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			return false;
 80011b2:	2300      	movs	r3, #0
 80011b4:	e036      	b.n	8001224 <W25qxx_Init+0x180>
				
	}		
	w25qxx.PageSize=256;
 80011b6:	4b1d      	ldr	r3, [pc, #116]	; (800122c <W25qxx_Init+0x188>)
 80011b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011bc:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize=0x1000;
 80011be:	4b1b      	ldr	r3, [pc, #108]	; (800122c <W25qxx_Init+0x188>)
 80011c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011c4:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount=w25qxx.BlockCount*16;
 80011c6:	4b19      	ldr	r3, [pc, #100]	; (800122c <W25qxx_Init+0x188>)
 80011c8:	69db      	ldr	r3, [r3, #28]
 80011ca:	011b      	lsls	r3, r3, #4
 80011cc:	4a17      	ldr	r2, [pc, #92]	; (800122c <W25qxx_Init+0x188>)
 80011ce:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount=(w25qxx.SectorCount*w25qxx.SectorSize)/w25qxx.PageSize;
 80011d0:	4b16      	ldr	r3, [pc, #88]	; (800122c <W25qxx_Init+0x188>)
 80011d2:	695b      	ldr	r3, [r3, #20]
 80011d4:	4a15      	ldr	r2, [pc, #84]	; (800122c <W25qxx_Init+0x188>)
 80011d6:	6912      	ldr	r2, [r2, #16]
 80011d8:	fb02 f303 	mul.w	r3, r2, r3
 80011dc:	4a13      	ldr	r2, [pc, #76]	; (800122c <W25qxx_Init+0x188>)
 80011de:	8952      	ldrh	r2, [r2, #10]
 80011e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80011e4:	4a11      	ldr	r2, [pc, #68]	; (800122c <W25qxx_Init+0x188>)
 80011e6:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize=w25qxx.SectorSize*16;
 80011e8:	4b10      	ldr	r3, [pc, #64]	; (800122c <W25qxx_Init+0x188>)
 80011ea:	691b      	ldr	r3, [r3, #16]
 80011ec:	011b      	lsls	r3, r3, #4
 80011ee:	4a0f      	ldr	r2, [pc, #60]	; (800122c <W25qxx_Init+0x188>)
 80011f0:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte=(w25qxx.SectorCount*w25qxx.SectorSize)/1024;
 80011f2:	4b0e      	ldr	r3, [pc, #56]	; (800122c <W25qxx_Init+0x188>)
 80011f4:	695b      	ldr	r3, [r3, #20]
 80011f6:	4a0d      	ldr	r2, [pc, #52]	; (800122c <W25qxx_Init+0x188>)
 80011f8:	6912      	ldr	r2, [r2, #16]
 80011fa:	fb02 f303 	mul.w	r3, r2, r3
 80011fe:	0a9b      	lsrs	r3, r3, #10
 8001200:	4a0a      	ldr	r2, [pc, #40]	; (800122c <W25qxx_Init+0x188>)
 8001202:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 8001204:	f7ff fe92 	bl	8000f2c <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 8001208:	2001      	movs	r0, #1
 800120a:	f7ff fedb 	bl	8000fc4 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 800120e:	2002      	movs	r0, #2
 8001210:	f7ff fed8 	bl	8000fc4 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 8001214:	2003      	movs	r0, #3
 8001216:	f7ff fed5 	bl	8000fc4 <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n",w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n",w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n",w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
	#endif
	w25qxx.Lock=0;	
 800121a:	4b04      	ldr	r3, [pc, #16]	; (800122c <W25qxx_Init+0x188>)
 800121c:	2200      	movs	r2, #0
 800121e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 8001222:	2301      	movs	r3, #1
}	
 8001224:	4618      	mov	r0, r3
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	2000087c 	.word	0x2000087c
 8001230:	40010800 	.word	0x40010800

08001234 <W25qxx_WriteByte>:
	w25qxx.Lock=0;
	return false;
}
//###################################################################################################################
void W25qxx_WriteByte(uint8_t pBuffer, uint32_t WriteAddr_inBytes)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	6039      	str	r1, [r7, #0]
 800123e:	71fb      	strb	r3, [r7, #7]
	while(w25qxx.Lock==1)
 8001240:	e002      	b.n	8001248 <W25qxx_WriteByte+0x14>
		W25qxx_Delay(1);
 8001242:	2001      	movs	r0, #1
 8001244:	f000 f928 	bl	8001498 <HAL_Delay>
	while(w25qxx.Lock==1)
 8001248:	4b21      	ldr	r3, [pc, #132]	; (80012d0 <W25qxx_WriteByte+0x9c>)
 800124a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800124e:	2b01      	cmp	r3, #1
 8001250:	d0f7      	beq.n	8001242 <W25qxx_WriteByte+0xe>
	w25qxx.Lock=1;
 8001252:	4b1f      	ldr	r3, [pc, #124]	; (80012d0 <W25qxx_WriteByte+0x9c>)
 8001254:	2201      	movs	r2, #1
 8001256:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	#if (_W25QXX_DEBUG==1)
	uint32_t	StartTime=HAL_GetTick();
	printf("w25qxx WriteByte 0x%02X at address %d begin...",pBuffer,WriteAddr_inBytes);
	#endif
	W25qxx_WaitForWriteEnd();
 800125a:	f7ff fef9 	bl	8001050 <W25qxx_WaitForWriteEnd>
  W25qxx_WriteEnable();
 800125e:	f7ff fe9b 	bl	8000f98 <W25qxx_WriteEnable>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8001262:	2200      	movs	r2, #0
 8001264:	2110      	movs	r1, #16
 8001266:	481b      	ldr	r0, [pc, #108]	; (80012d4 <W25qxx_WriteByte+0xa0>)
 8001268:	f000 fdaa 	bl	8001dc0 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x02);
 800126c:	2002      	movs	r0, #2
 800126e:	f7ff fe11 	bl	8000e94 <W25qxx_Spi>
	if(w25qxx.ID>=W25Q256)
 8001272:	4b17      	ldr	r3, [pc, #92]	; (80012d0 <W25qxx_WriteByte+0x9c>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	2b08      	cmp	r3, #8
 8001278:	d905      	bls.n	8001286 <W25qxx_WriteByte+0x52>
		W25qxx_Spi((WriteAddr_inBytes & 0xFF000000) >> 24);
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	0e1b      	lsrs	r3, r3, #24
 800127e:	b2db      	uxtb	r3, r3
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff fe07 	bl	8000e94 <W25qxx_Spi>
  W25qxx_Spi((WriteAddr_inBytes & 0xFF0000) >> 16);
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	0c1b      	lsrs	r3, r3, #16
 800128a:	b2db      	uxtb	r3, r3
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff fe01 	bl	8000e94 <W25qxx_Spi>
  W25qxx_Spi((WriteAddr_inBytes & 0xFF00) >> 8);
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	0a1b      	lsrs	r3, r3, #8
 8001296:	b2db      	uxtb	r3, r3
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff fdfb 	bl	8000e94 <W25qxx_Spi>
  W25qxx_Spi(WriteAddr_inBytes & 0xFF);
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff fdf6 	bl	8000e94 <W25qxx_Spi>
  W25qxx_Spi(pBuffer);
 80012a8:	79fb      	ldrb	r3, [r7, #7]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff fdf2 	bl	8000e94 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 80012b0:	2201      	movs	r2, #1
 80012b2:	2110      	movs	r1, #16
 80012b4:	4807      	ldr	r0, [pc, #28]	; (80012d4 <W25qxx_WriteByte+0xa0>)
 80012b6:	f000 fd83 	bl	8001dc0 <HAL_GPIO_WritePin>
  W25qxx_WaitForWriteEnd();
 80012ba:	f7ff fec9 	bl	8001050 <W25qxx_WaitForWriteEnd>
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx WriteByte done after %d ms\r\n",HAL_GetTick()-StartTime);
	#endif
	w25qxx.Lock=0;
 80012be:	4b04      	ldr	r3, [pc, #16]	; (80012d0 <W25qxx_WriteByte+0x9c>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80012c6:	bf00      	nop
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	2000087c 	.word	0x2000087c
 80012d4:	40010800 	.word	0x40010800

080012d8 <W25qxx_ReadBytes>:
	#endif
	w25qxx.Lock=0;
}
//###################################################################################################################
void W25qxx_ReadBytes(uint8_t* pBuffer, uint32_t ReadAddr, uint32_t NumByteToRead)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	60b9      	str	r1, [r7, #8]
 80012e2:	607a      	str	r2, [r7, #4]
	while(w25qxx.Lock==1)
 80012e4:	e002      	b.n	80012ec <W25qxx_ReadBytes+0x14>
		W25qxx_Delay(1);
 80012e6:	2001      	movs	r0, #1
 80012e8:	f000 f8d6 	bl	8001498 <HAL_Delay>
	while(w25qxx.Lock==1)
 80012ec:	4b23      	ldr	r3, [pc, #140]	; (800137c <W25qxx_ReadBytes+0xa4>)
 80012ee:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d0f7      	beq.n	80012e6 <W25qxx_ReadBytes+0xe>
	w25qxx.Lock=1;
 80012f6:	4b21      	ldr	r3, [pc, #132]	; (800137c <W25qxx_ReadBytes+0xa4>)
 80012f8:	2201      	movs	r2, #1
 80012fa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	#if (_W25QXX_DEBUG==1)
	uint32_t	StartTime=HAL_GetTick();
	printf("w25qxx ReadBytes at Address:%d, %d Bytes  begin...\r\n",ReadAddr,NumByteToRead);
	#endif	
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 80012fe:	2200      	movs	r2, #0
 8001300:	2110      	movs	r1, #16
 8001302:	481f      	ldr	r0, [pc, #124]	; (8001380 <W25qxx_ReadBytes+0xa8>)
 8001304:	f000 fd5c 	bl	8001dc0 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x0B);
 8001308:	200b      	movs	r0, #11
 800130a:	f7ff fdc3 	bl	8000e94 <W25qxx_Spi>
	if(w25qxx.ID>=W25Q256)
 800130e:	4b1b      	ldr	r3, [pc, #108]	; (800137c <W25qxx_ReadBytes+0xa4>)
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	2b08      	cmp	r3, #8
 8001314:	d905      	bls.n	8001322 <W25qxx_ReadBytes+0x4a>
		W25qxx_Spi((ReadAddr & 0xFF000000) >> 24);
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	0e1b      	lsrs	r3, r3, #24
 800131a:	b2db      	uxtb	r3, r3
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff fdb9 	bl	8000e94 <W25qxx_Spi>
  W25qxx_Spi((ReadAddr & 0xFF0000) >> 16);
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	0c1b      	lsrs	r3, r3, #16
 8001326:	b2db      	uxtb	r3, r3
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff fdb3 	bl	8000e94 <W25qxx_Spi>
  W25qxx_Spi((ReadAddr& 0xFF00) >> 8);
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	0a1b      	lsrs	r3, r3, #8
 8001332:	b2db      	uxtb	r3, r3
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff fdad 	bl	8000e94 <W25qxx_Spi>
  W25qxx_Spi(ReadAddr & 0xFF);
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	b2db      	uxtb	r3, r3
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff fda8 	bl	8000e94 <W25qxx_Spi>
	W25qxx_Spi(0);
 8001344:	2000      	movs	r0, #0
 8001346:	f7ff fda5 	bl	8000e94 <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI,pBuffer,NumByteToRead,2000);	
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	b29a      	uxth	r2, r3
 800134e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001352:	68f9      	ldr	r1, [r7, #12]
 8001354:	480b      	ldr	r0, [pc, #44]	; (8001384 <W25qxx_ReadBytes+0xac>)
 8001356:	f002 f95c 	bl	8003612 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 800135a:	2201      	movs	r2, #1
 800135c:	2110      	movs	r1, #16
 800135e:	4808      	ldr	r0, [pc, #32]	; (8001380 <W25qxx_ReadBytes+0xa8>)
 8001360:	f000 fd2e 	bl	8001dc0 <HAL_GPIO_WritePin>
	}
	printf("\r\n");
	printf("w25qxx ReadBytes done after %d ms\r\n",StartTime);
	W25qxx_Delay(100);
	#endif	
	W25qxx_Delay(1);
 8001364:	2001      	movs	r0, #1
 8001366:	f000 f897 	bl	8001498 <HAL_Delay>
	w25qxx.Lock=0;
 800136a:	4b04      	ldr	r3, [pc, #16]	; (800137c <W25qxx_ReadBytes+0xa4>)
 800136c:	2200      	movs	r2, #0
 800136e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8001372:	bf00      	nop
 8001374:	3710      	adds	r7, #16
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	2000087c 	.word	0x2000087c
 8001380:	40010800 	.word	0x40010800
 8001384:	20000658 	.word	0x20000658

08001388 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001388:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800138a:	e003      	b.n	8001394 <LoopCopyDataInit>

0800138c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800138c:	4b0b      	ldr	r3, [pc, #44]	; (80013bc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800138e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001390:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001392:	3104      	adds	r1, #4

08001394 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001394:	480a      	ldr	r0, [pc, #40]	; (80013c0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001396:	4b0b      	ldr	r3, [pc, #44]	; (80013c4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001398:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800139a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800139c:	d3f6      	bcc.n	800138c <CopyDataInit>
  ldr r2, =_sbss
 800139e:	4a0a      	ldr	r2, [pc, #40]	; (80013c8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80013a0:	e002      	b.n	80013a8 <LoopFillZerobss>

080013a2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80013a2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80013a4:	f842 3b04 	str.w	r3, [r2], #4

080013a8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80013a8:	4b08      	ldr	r3, [pc, #32]	; (80013cc <LoopFillZerobss+0x24>)
  cmp r2, r3
 80013aa:	429a      	cmp	r2, r3
  bcc FillZerobss
 80013ac:	d3f9      	bcc.n	80013a2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80013ae:	f7ff fd3d 	bl	8000e2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013b2:	f007 fda7 	bl	8008f04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013b6:	f7fe fedd 	bl	8000174 <main>
  bx lr
 80013ba:	4770      	bx	lr
  ldr r3, =_sidata
 80013bc:	0800905c 	.word	0x0800905c
  ldr r0, =_sdata
 80013c0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80013c4:	200000f0 	.word	0x200000f0
  ldr r2, =_sbss
 80013c8:	200000f0 	.word	0x200000f0
  ldr r3, = _ebss
 80013cc:	2000203c 	.word	0x2000203c

080013d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013d0:	e7fe      	b.n	80013d0 <ADC1_2_IRQHandler>
	...

080013d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013d8:	4b08      	ldr	r3, [pc, #32]	; (80013fc <HAL_Init+0x28>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a07      	ldr	r2, [pc, #28]	; (80013fc <HAL_Init+0x28>)
 80013de:	f043 0310 	orr.w	r3, r3, #16
 80013e2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013e4:	2003      	movs	r0, #3
 80013e6:	f000 fb4f 	bl	8001a88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013ea:	2000      	movs	r0, #0
 80013ec:	f000 f808 	bl	8001400 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013f0:	f7ff fa52 	bl	8000898 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013f4:	2300      	movs	r3, #0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40022000 	.word	0x40022000

08001400 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001408:	4b12      	ldr	r3, [pc, #72]	; (8001454 <HAL_InitTick+0x54>)
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	4b12      	ldr	r3, [pc, #72]	; (8001458 <HAL_InitTick+0x58>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	4619      	mov	r1, r3
 8001412:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001416:	fbb3 f3f1 	udiv	r3, r3, r1
 800141a:	fbb2 f3f3 	udiv	r3, r2, r3
 800141e:	4618      	mov	r0, r3
 8001420:	f000 fb67 	bl	8001af2 <HAL_SYSTICK_Config>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e00e      	b.n	800144c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2b0f      	cmp	r3, #15
 8001432:	d80a      	bhi.n	800144a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001434:	2200      	movs	r2, #0
 8001436:	6879      	ldr	r1, [r7, #4]
 8001438:	f04f 30ff 	mov.w	r0, #4294967295
 800143c:	f000 fb2f 	bl	8001a9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001440:	4a06      	ldr	r2, [pc, #24]	; (800145c <HAL_InitTick+0x5c>)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001446:	2300      	movs	r3, #0
 8001448:	e000      	b.n	800144c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
}
 800144c:	4618      	mov	r0, r3
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	20000000 	.word	0x20000000
 8001458:	20000008 	.word	0x20000008
 800145c:	20000004 	.word	0x20000004

08001460 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001464:	4b05      	ldr	r3, [pc, #20]	; (800147c <HAL_IncTick+0x1c>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	461a      	mov	r2, r3
 800146a:	4b05      	ldr	r3, [pc, #20]	; (8001480 <HAL_IncTick+0x20>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4413      	add	r3, r2
 8001470:	4a03      	ldr	r2, [pc, #12]	; (8001480 <HAL_IncTick+0x20>)
 8001472:	6013      	str	r3, [r2, #0]
}
 8001474:	bf00      	nop
 8001476:	46bd      	mov	sp, r7
 8001478:	bc80      	pop	{r7}
 800147a:	4770      	bx	lr
 800147c:	20000008 	.word	0x20000008
 8001480:	200008a4 	.word	0x200008a4

08001484 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  return uwTick;
 8001488:	4b02      	ldr	r3, [pc, #8]	; (8001494 <HAL_GetTick+0x10>)
 800148a:	681b      	ldr	r3, [r3, #0]
}
 800148c:	4618      	mov	r0, r3
 800148e:	46bd      	mov	sp, r7
 8001490:	bc80      	pop	{r7}
 8001492:	4770      	bx	lr
 8001494:	200008a4 	.word	0x200008a4

08001498 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014a0:	f7ff fff0 	bl	8001484 <HAL_GetTick>
 80014a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014b0:	d005      	beq.n	80014be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014b2:	4b09      	ldr	r3, [pc, #36]	; (80014d8 <HAL_Delay+0x40>)
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	461a      	mov	r2, r3
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	4413      	add	r3, r2
 80014bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014be:	bf00      	nop
 80014c0:	f7ff ffe0 	bl	8001484 <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	68fa      	ldr	r2, [r7, #12]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d8f7      	bhi.n	80014c0 <HAL_Delay+0x28>
  {
  }
}
 80014d0:	bf00      	nop
 80014d2:	3710      	adds	r7, #16
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	20000008 	.word	0x20000008

080014dc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b086      	sub	sp, #24
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014e4:	2300      	movs	r3, #0
 80014e6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80014e8:	2300      	movs	r3, #0
 80014ea:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80014ec:	2300      	movs	r3, #0
 80014ee:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80014f0:	2300      	movs	r3, #0
 80014f2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d101      	bne.n	80014fe <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e0be      	b.n	800167c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001508:	2b00      	cmp	r3, #0
 800150a:	d109      	bne.n	8001520 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2200      	movs	r2, #0
 8001510:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2200      	movs	r2, #0
 8001516:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f7ff f9ee 	bl	80008fc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f000 f9ab 	bl	800187c <ADC_ConversionStop_Disable>
 8001526:	4603      	mov	r3, r0
 8001528:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800152e:	f003 0310 	and.w	r3, r3, #16
 8001532:	2b00      	cmp	r3, #0
 8001534:	f040 8099 	bne.w	800166a <HAL_ADC_Init+0x18e>
 8001538:	7dfb      	ldrb	r3, [r7, #23]
 800153a:	2b00      	cmp	r3, #0
 800153c:	f040 8095 	bne.w	800166a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001544:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001548:	f023 0302 	bic.w	r3, r3, #2
 800154c:	f043 0202 	orr.w	r2, r3, #2
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800155c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	7b1b      	ldrb	r3, [r3, #12]
 8001562:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001564:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001566:	68ba      	ldr	r2, [r7, #8]
 8001568:	4313      	orrs	r3, r2
 800156a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001574:	d003      	beq.n	800157e <HAL_ADC_Init+0xa2>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	2b01      	cmp	r3, #1
 800157c:	d102      	bne.n	8001584 <HAL_ADC_Init+0xa8>
 800157e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001582:	e000      	b.n	8001586 <HAL_ADC_Init+0xaa>
 8001584:	2300      	movs	r3, #0
 8001586:	693a      	ldr	r2, [r7, #16]
 8001588:	4313      	orrs	r3, r2
 800158a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	7d1b      	ldrb	r3, [r3, #20]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d119      	bne.n	80015c8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	7b1b      	ldrb	r3, [r3, #12]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d109      	bne.n	80015b0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	699b      	ldr	r3, [r3, #24]
 80015a0:	3b01      	subs	r3, #1
 80015a2:	035a      	lsls	r2, r3, #13
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80015ac:	613b      	str	r3, [r7, #16]
 80015ae:	e00b      	b.n	80015c8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b4:	f043 0220 	orr.w	r2, r3, #32
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c0:	f043 0201 	orr.w	r2, r3, #1
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	693a      	ldr	r2, [r7, #16]
 80015d8:	430a      	orrs	r2, r1
 80015da:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	689a      	ldr	r2, [r3, #8]
 80015e2:	4b28      	ldr	r3, [pc, #160]	; (8001684 <HAL_ADC_Init+0x1a8>)
 80015e4:	4013      	ands	r3, r2
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	6812      	ldr	r2, [r2, #0]
 80015ea:	68b9      	ldr	r1, [r7, #8]
 80015ec:	430b      	orrs	r3, r1
 80015ee:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80015f8:	d003      	beq.n	8001602 <HAL_ADC_Init+0x126>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d104      	bne.n	800160c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	691b      	ldr	r3, [r3, #16]
 8001606:	3b01      	subs	r3, #1
 8001608:	051b      	lsls	r3, r3, #20
 800160a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001612:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	68fa      	ldr	r2, [r7, #12]
 800161c:	430a      	orrs	r2, r1
 800161e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	689a      	ldr	r2, [r3, #8]
 8001626:	4b18      	ldr	r3, [pc, #96]	; (8001688 <HAL_ADC_Init+0x1ac>)
 8001628:	4013      	ands	r3, r2
 800162a:	68ba      	ldr	r2, [r7, #8]
 800162c:	429a      	cmp	r2, r3
 800162e:	d10b      	bne.n	8001648 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2200      	movs	r2, #0
 8001634:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800163a:	f023 0303 	bic.w	r3, r3, #3
 800163e:	f043 0201 	orr.w	r2, r3, #1
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001646:	e018      	b.n	800167a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800164c:	f023 0312 	bic.w	r3, r3, #18
 8001650:	f043 0210 	orr.w	r2, r3, #16
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800165c:	f043 0201 	orr.w	r2, r3, #1
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001668:	e007      	b.n	800167a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800166e:	f043 0210 	orr.w	r2, r3, #16
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800167a:	7dfb      	ldrb	r3, [r7, #23]
}
 800167c:	4618      	mov	r0, r3
 800167e:	3718      	adds	r7, #24
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	ffe1f7fd 	.word	0xffe1f7fd
 8001688:	ff1f0efe 	.word	0xff1f0efe

0800168c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800168c:	b480      	push	{r7}
 800168e:	b085      	sub	sp, #20
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001696:	2300      	movs	r3, #0
 8001698:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800169a:	2300      	movs	r3, #0
 800169c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d101      	bne.n	80016ac <HAL_ADC_ConfigChannel+0x20>
 80016a8:	2302      	movs	r3, #2
 80016aa:	e0dc      	b.n	8001866 <HAL_ADC_ConfigChannel+0x1da>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2201      	movs	r2, #1
 80016b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	2b06      	cmp	r3, #6
 80016ba:	d81c      	bhi.n	80016f6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	685a      	ldr	r2, [r3, #4]
 80016c6:	4613      	mov	r3, r2
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	4413      	add	r3, r2
 80016cc:	3b05      	subs	r3, #5
 80016ce:	221f      	movs	r2, #31
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	43db      	mvns	r3, r3
 80016d6:	4019      	ands	r1, r3
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	6818      	ldr	r0, [r3, #0]
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685a      	ldr	r2, [r3, #4]
 80016e0:	4613      	mov	r3, r2
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	4413      	add	r3, r2
 80016e6:	3b05      	subs	r3, #5
 80016e8:	fa00 f203 	lsl.w	r2, r0, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	430a      	orrs	r2, r1
 80016f2:	635a      	str	r2, [r3, #52]	; 0x34
 80016f4:	e03c      	b.n	8001770 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	2b0c      	cmp	r3, #12
 80016fc:	d81c      	bhi.n	8001738 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685a      	ldr	r2, [r3, #4]
 8001708:	4613      	mov	r3, r2
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	4413      	add	r3, r2
 800170e:	3b23      	subs	r3, #35	; 0x23
 8001710:	221f      	movs	r2, #31
 8001712:	fa02 f303 	lsl.w	r3, r2, r3
 8001716:	43db      	mvns	r3, r3
 8001718:	4019      	ands	r1, r3
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	6818      	ldr	r0, [r3, #0]
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685a      	ldr	r2, [r3, #4]
 8001722:	4613      	mov	r3, r2
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	4413      	add	r3, r2
 8001728:	3b23      	subs	r3, #35	; 0x23
 800172a:	fa00 f203 	lsl.w	r2, r0, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	430a      	orrs	r2, r1
 8001734:	631a      	str	r2, [r3, #48]	; 0x30
 8001736:	e01b      	b.n	8001770 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685a      	ldr	r2, [r3, #4]
 8001742:	4613      	mov	r3, r2
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	4413      	add	r3, r2
 8001748:	3b41      	subs	r3, #65	; 0x41
 800174a:	221f      	movs	r2, #31
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	43db      	mvns	r3, r3
 8001752:	4019      	ands	r1, r3
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	6818      	ldr	r0, [r3, #0]
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685a      	ldr	r2, [r3, #4]
 800175c:	4613      	mov	r3, r2
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	4413      	add	r3, r2
 8001762:	3b41      	subs	r3, #65	; 0x41
 8001764:	fa00 f203 	lsl.w	r2, r0, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	430a      	orrs	r2, r1
 800176e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2b09      	cmp	r3, #9
 8001776:	d91c      	bls.n	80017b2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	68d9      	ldr	r1, [r3, #12]
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	4613      	mov	r3, r2
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	4413      	add	r3, r2
 8001788:	3b1e      	subs	r3, #30
 800178a:	2207      	movs	r2, #7
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	43db      	mvns	r3, r3
 8001792:	4019      	ands	r1, r3
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	6898      	ldr	r0, [r3, #8]
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	4613      	mov	r3, r2
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	4413      	add	r3, r2
 80017a2:	3b1e      	subs	r3, #30
 80017a4:	fa00 f203 	lsl.w	r2, r0, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	430a      	orrs	r2, r1
 80017ae:	60da      	str	r2, [r3, #12]
 80017b0:	e019      	b.n	80017e6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	6919      	ldr	r1, [r3, #16]
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	4613      	mov	r3, r2
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	4413      	add	r3, r2
 80017c2:	2207      	movs	r2, #7
 80017c4:	fa02 f303 	lsl.w	r3, r2, r3
 80017c8:	43db      	mvns	r3, r3
 80017ca:	4019      	ands	r1, r3
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	6898      	ldr	r0, [r3, #8]
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	4613      	mov	r3, r2
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	4413      	add	r3, r2
 80017da:	fa00 f203 	lsl.w	r2, r0, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	430a      	orrs	r2, r1
 80017e4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	2b10      	cmp	r3, #16
 80017ec:	d003      	beq.n	80017f6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80017f2:	2b11      	cmp	r3, #17
 80017f4:	d132      	bne.n	800185c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a1d      	ldr	r2, [pc, #116]	; (8001870 <HAL_ADC_ConfigChannel+0x1e4>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d125      	bne.n	800184c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d126      	bne.n	800185c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	689a      	ldr	r2, [r3, #8]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800181c:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	2b10      	cmp	r3, #16
 8001824:	d11a      	bne.n	800185c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001826:	4b13      	ldr	r3, [pc, #76]	; (8001874 <HAL_ADC_ConfigChannel+0x1e8>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a13      	ldr	r2, [pc, #76]	; (8001878 <HAL_ADC_ConfigChannel+0x1ec>)
 800182c:	fba2 2303 	umull	r2, r3, r2, r3
 8001830:	0c9a      	lsrs	r2, r3, #18
 8001832:	4613      	mov	r3, r2
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	4413      	add	r3, r2
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800183c:	e002      	b.n	8001844 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	3b01      	subs	r3, #1
 8001842:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d1f9      	bne.n	800183e <HAL_ADC_ConfigChannel+0x1b2>
 800184a:	e007      	b.n	800185c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001850:	f043 0220 	orr.w	r2, r3, #32
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2200      	movs	r2, #0
 8001860:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001864:	7bfb      	ldrb	r3, [r7, #15]
}
 8001866:	4618      	mov	r0, r3
 8001868:	3714      	adds	r7, #20
 800186a:	46bd      	mov	sp, r7
 800186c:	bc80      	pop	{r7}
 800186e:	4770      	bx	lr
 8001870:	40012400 	.word	0x40012400
 8001874:	20000000 	.word	0x20000000
 8001878:	431bde83 	.word	0x431bde83

0800187c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001884:	2300      	movs	r3, #0
 8001886:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	2b01      	cmp	r3, #1
 8001894:	d127      	bne.n	80018e6 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	689a      	ldr	r2, [r3, #8]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f022 0201 	bic.w	r2, r2, #1
 80018a4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80018a6:	f7ff fded 	bl	8001484 <HAL_GetTick>
 80018aa:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80018ac:	e014      	b.n	80018d8 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80018ae:	f7ff fde9 	bl	8001484 <HAL_GetTick>
 80018b2:	4602      	mov	r2, r0
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d90d      	bls.n	80018d8 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c0:	f043 0210 	orr.w	r2, r3, #16
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018cc:	f043 0201 	orr.w	r2, r3, #1
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e007      	b.n	80018e8 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d0e3      	beq.n	80018ae <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80018e6:	2300      	movs	r3, #0
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3710      	adds	r7, #16
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b085      	sub	sp, #20
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	f003 0307 	and.w	r3, r3, #7
 80018fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001900:	4b0c      	ldr	r3, [pc, #48]	; (8001934 <__NVIC_SetPriorityGrouping+0x44>)
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001906:	68ba      	ldr	r2, [r7, #8]
 8001908:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800190c:	4013      	ands	r3, r2
 800190e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001918:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800191c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001920:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001922:	4a04      	ldr	r2, [pc, #16]	; (8001934 <__NVIC_SetPriorityGrouping+0x44>)
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	60d3      	str	r3, [r2, #12]
}
 8001928:	bf00      	nop
 800192a:	3714      	adds	r7, #20
 800192c:	46bd      	mov	sp, r7
 800192e:	bc80      	pop	{r7}
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	e000ed00 	.word	0xe000ed00

08001938 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800193c:	4b04      	ldr	r3, [pc, #16]	; (8001950 <__NVIC_GetPriorityGrouping+0x18>)
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	0a1b      	lsrs	r3, r3, #8
 8001942:	f003 0307 	and.w	r3, r3, #7
}
 8001946:	4618      	mov	r0, r3
 8001948:	46bd      	mov	sp, r7
 800194a:	bc80      	pop	{r7}
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	e000ed00 	.word	0xe000ed00

08001954 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	4603      	mov	r3, r0
 800195c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800195e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001962:	2b00      	cmp	r3, #0
 8001964:	db0b      	blt.n	800197e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001966:	79fb      	ldrb	r3, [r7, #7]
 8001968:	f003 021f 	and.w	r2, r3, #31
 800196c:	4906      	ldr	r1, [pc, #24]	; (8001988 <__NVIC_EnableIRQ+0x34>)
 800196e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001972:	095b      	lsrs	r3, r3, #5
 8001974:	2001      	movs	r0, #1
 8001976:	fa00 f202 	lsl.w	r2, r0, r2
 800197a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800197e:	bf00      	nop
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	bc80      	pop	{r7}
 8001986:	4770      	bx	lr
 8001988:	e000e100 	.word	0xe000e100

0800198c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	4603      	mov	r3, r0
 8001994:	6039      	str	r1, [r7, #0]
 8001996:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001998:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199c:	2b00      	cmp	r3, #0
 800199e:	db0a      	blt.n	80019b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	b2da      	uxtb	r2, r3
 80019a4:	490c      	ldr	r1, [pc, #48]	; (80019d8 <__NVIC_SetPriority+0x4c>)
 80019a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019aa:	0112      	lsls	r2, r2, #4
 80019ac:	b2d2      	uxtb	r2, r2
 80019ae:	440b      	add	r3, r1
 80019b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019b4:	e00a      	b.n	80019cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	b2da      	uxtb	r2, r3
 80019ba:	4908      	ldr	r1, [pc, #32]	; (80019dc <__NVIC_SetPriority+0x50>)
 80019bc:	79fb      	ldrb	r3, [r7, #7]
 80019be:	f003 030f 	and.w	r3, r3, #15
 80019c2:	3b04      	subs	r3, #4
 80019c4:	0112      	lsls	r2, r2, #4
 80019c6:	b2d2      	uxtb	r2, r2
 80019c8:	440b      	add	r3, r1
 80019ca:	761a      	strb	r2, [r3, #24]
}
 80019cc:	bf00      	nop
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bc80      	pop	{r7}
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	e000e100 	.word	0xe000e100
 80019dc:	e000ed00 	.word	0xe000ed00

080019e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b089      	sub	sp, #36	; 0x24
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	60f8      	str	r0, [r7, #12]
 80019e8:	60b9      	str	r1, [r7, #8]
 80019ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	f003 0307 	and.w	r3, r3, #7
 80019f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	f1c3 0307 	rsb	r3, r3, #7
 80019fa:	2b04      	cmp	r3, #4
 80019fc:	bf28      	it	cs
 80019fe:	2304      	movcs	r3, #4
 8001a00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	3304      	adds	r3, #4
 8001a06:	2b06      	cmp	r3, #6
 8001a08:	d902      	bls.n	8001a10 <NVIC_EncodePriority+0x30>
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	3b03      	subs	r3, #3
 8001a0e:	e000      	b.n	8001a12 <NVIC_EncodePriority+0x32>
 8001a10:	2300      	movs	r3, #0
 8001a12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a14:	f04f 32ff 	mov.w	r2, #4294967295
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1e:	43da      	mvns	r2, r3
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	401a      	ands	r2, r3
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a28:	f04f 31ff 	mov.w	r1, #4294967295
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a32:	43d9      	mvns	r1, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a38:	4313      	orrs	r3, r2
         );
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3724      	adds	r7, #36	; 0x24
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bc80      	pop	{r7}
 8001a42:	4770      	bx	lr

08001a44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	3b01      	subs	r3, #1
 8001a50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a54:	d301      	bcc.n	8001a5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a56:	2301      	movs	r3, #1
 8001a58:	e00f      	b.n	8001a7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a5a:	4a0a      	ldr	r2, [pc, #40]	; (8001a84 <SysTick_Config+0x40>)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a62:	210f      	movs	r1, #15
 8001a64:	f04f 30ff 	mov.w	r0, #4294967295
 8001a68:	f7ff ff90 	bl	800198c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a6c:	4b05      	ldr	r3, [pc, #20]	; (8001a84 <SysTick_Config+0x40>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a72:	4b04      	ldr	r3, [pc, #16]	; (8001a84 <SysTick_Config+0x40>)
 8001a74:	2207      	movs	r2, #7
 8001a76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a78:	2300      	movs	r3, #0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	e000e010 	.word	0xe000e010

08001a88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f7ff ff2d 	bl	80018f0 <__NVIC_SetPriorityGrouping>
}
 8001a96:	bf00      	nop
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b086      	sub	sp, #24
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	60b9      	str	r1, [r7, #8]
 8001aa8:	607a      	str	r2, [r7, #4]
 8001aaa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001aac:	2300      	movs	r3, #0
 8001aae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ab0:	f7ff ff42 	bl	8001938 <__NVIC_GetPriorityGrouping>
 8001ab4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	68b9      	ldr	r1, [r7, #8]
 8001aba:	6978      	ldr	r0, [r7, #20]
 8001abc:	f7ff ff90 	bl	80019e0 <NVIC_EncodePriority>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ac6:	4611      	mov	r1, r2
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7ff ff5f 	bl	800198c <__NVIC_SetPriority>
}
 8001ace:	bf00      	nop
 8001ad0:	3718      	adds	r7, #24
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b082      	sub	sp, #8
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	4603      	mov	r3, r0
 8001ade:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ae0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff ff35 	bl	8001954 <__NVIC_EnableIRQ>
}
 8001aea:	bf00      	nop
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b082      	sub	sp, #8
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f7ff ffa2 	bl	8001a44 <SysTick_Config>
 8001b00:	4603      	mov	r3, r0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
	...

08001b0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b08b      	sub	sp, #44	; 0x2c
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b16:	2300      	movs	r3, #0
 8001b18:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b1e:	e127      	b.n	8001d70 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b20:	2201      	movs	r2, #1
 8001b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	69fa      	ldr	r2, [r7, #28]
 8001b30:	4013      	ands	r3, r2
 8001b32:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	f040 8116 	bne.w	8001d6a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	2b12      	cmp	r3, #18
 8001b44:	d034      	beq.n	8001bb0 <HAL_GPIO_Init+0xa4>
 8001b46:	2b12      	cmp	r3, #18
 8001b48:	d80d      	bhi.n	8001b66 <HAL_GPIO_Init+0x5a>
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d02b      	beq.n	8001ba6 <HAL_GPIO_Init+0x9a>
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d804      	bhi.n	8001b5c <HAL_GPIO_Init+0x50>
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d031      	beq.n	8001bba <HAL_GPIO_Init+0xae>
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d01c      	beq.n	8001b94 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b5a:	e048      	b.n	8001bee <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001b5c:	2b03      	cmp	r3, #3
 8001b5e:	d043      	beq.n	8001be8 <HAL_GPIO_Init+0xdc>
 8001b60:	2b11      	cmp	r3, #17
 8001b62:	d01b      	beq.n	8001b9c <HAL_GPIO_Init+0x90>
          break;
 8001b64:	e043      	b.n	8001bee <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001b66:	4a89      	ldr	r2, [pc, #548]	; (8001d8c <HAL_GPIO_Init+0x280>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d026      	beq.n	8001bba <HAL_GPIO_Init+0xae>
 8001b6c:	4a87      	ldr	r2, [pc, #540]	; (8001d8c <HAL_GPIO_Init+0x280>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d806      	bhi.n	8001b80 <HAL_GPIO_Init+0x74>
 8001b72:	4a87      	ldr	r2, [pc, #540]	; (8001d90 <HAL_GPIO_Init+0x284>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d020      	beq.n	8001bba <HAL_GPIO_Init+0xae>
 8001b78:	4a86      	ldr	r2, [pc, #536]	; (8001d94 <HAL_GPIO_Init+0x288>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d01d      	beq.n	8001bba <HAL_GPIO_Init+0xae>
          break;
 8001b7e:	e036      	b.n	8001bee <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001b80:	4a85      	ldr	r2, [pc, #532]	; (8001d98 <HAL_GPIO_Init+0x28c>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d019      	beq.n	8001bba <HAL_GPIO_Init+0xae>
 8001b86:	4a85      	ldr	r2, [pc, #532]	; (8001d9c <HAL_GPIO_Init+0x290>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d016      	beq.n	8001bba <HAL_GPIO_Init+0xae>
 8001b8c:	4a84      	ldr	r2, [pc, #528]	; (8001da0 <HAL_GPIO_Init+0x294>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d013      	beq.n	8001bba <HAL_GPIO_Init+0xae>
          break;
 8001b92:	e02c      	b.n	8001bee <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	623b      	str	r3, [r7, #32]
          break;
 8001b9a:	e028      	b.n	8001bee <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	3304      	adds	r3, #4
 8001ba2:	623b      	str	r3, [r7, #32]
          break;
 8001ba4:	e023      	b.n	8001bee <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	3308      	adds	r3, #8
 8001bac:	623b      	str	r3, [r7, #32]
          break;
 8001bae:	e01e      	b.n	8001bee <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	330c      	adds	r3, #12
 8001bb6:	623b      	str	r3, [r7, #32]
          break;
 8001bb8:	e019      	b.n	8001bee <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d102      	bne.n	8001bc8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001bc2:	2304      	movs	r3, #4
 8001bc4:	623b      	str	r3, [r7, #32]
          break;
 8001bc6:	e012      	b.n	8001bee <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d105      	bne.n	8001bdc <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bd0:	2308      	movs	r3, #8
 8001bd2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	69fa      	ldr	r2, [r7, #28]
 8001bd8:	611a      	str	r2, [r3, #16]
          break;
 8001bda:	e008      	b.n	8001bee <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bdc:	2308      	movs	r3, #8
 8001bde:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	69fa      	ldr	r2, [r7, #28]
 8001be4:	615a      	str	r2, [r3, #20]
          break;
 8001be6:	e002      	b.n	8001bee <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001be8:	2300      	movs	r3, #0
 8001bea:	623b      	str	r3, [r7, #32]
          break;
 8001bec:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	2bff      	cmp	r3, #255	; 0xff
 8001bf2:	d801      	bhi.n	8001bf8 <HAL_GPIO_Init+0xec>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	e001      	b.n	8001bfc <HAL_GPIO_Init+0xf0>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	3304      	adds	r3, #4
 8001bfc:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	2bff      	cmp	r3, #255	; 0xff
 8001c02:	d802      	bhi.n	8001c0a <HAL_GPIO_Init+0xfe>
 8001c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	e002      	b.n	8001c10 <HAL_GPIO_Init+0x104>
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0c:	3b08      	subs	r3, #8
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	210f      	movs	r1, #15
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c1e:	43db      	mvns	r3, r3
 8001c20:	401a      	ands	r2, r3
 8001c22:	6a39      	ldr	r1, [r7, #32]
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	fa01 f303 	lsl.w	r3, r1, r3
 8001c2a:	431a      	orrs	r2, r3
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	f000 8096 	beq.w	8001d6a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c3e:	4b59      	ldr	r3, [pc, #356]	; (8001da4 <HAL_GPIO_Init+0x298>)
 8001c40:	699b      	ldr	r3, [r3, #24]
 8001c42:	4a58      	ldr	r2, [pc, #352]	; (8001da4 <HAL_GPIO_Init+0x298>)
 8001c44:	f043 0301 	orr.w	r3, r3, #1
 8001c48:	6193      	str	r3, [r2, #24]
 8001c4a:	4b56      	ldr	r3, [pc, #344]	; (8001da4 <HAL_GPIO_Init+0x298>)
 8001c4c:	699b      	ldr	r3, [r3, #24]
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	60bb      	str	r3, [r7, #8]
 8001c54:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c56:	4a54      	ldr	r2, [pc, #336]	; (8001da8 <HAL_GPIO_Init+0x29c>)
 8001c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5a:	089b      	lsrs	r3, r3, #2
 8001c5c:	3302      	adds	r3, #2
 8001c5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c62:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c66:	f003 0303 	and.w	r3, r3, #3
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	220f      	movs	r2, #15
 8001c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c72:	43db      	mvns	r3, r3
 8001c74:	68fa      	ldr	r2, [r7, #12]
 8001c76:	4013      	ands	r3, r2
 8001c78:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a4b      	ldr	r2, [pc, #300]	; (8001dac <HAL_GPIO_Init+0x2a0>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d013      	beq.n	8001caa <HAL_GPIO_Init+0x19e>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a4a      	ldr	r2, [pc, #296]	; (8001db0 <HAL_GPIO_Init+0x2a4>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d00d      	beq.n	8001ca6 <HAL_GPIO_Init+0x19a>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a49      	ldr	r2, [pc, #292]	; (8001db4 <HAL_GPIO_Init+0x2a8>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d007      	beq.n	8001ca2 <HAL_GPIO_Init+0x196>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a48      	ldr	r2, [pc, #288]	; (8001db8 <HAL_GPIO_Init+0x2ac>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d101      	bne.n	8001c9e <HAL_GPIO_Init+0x192>
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e006      	b.n	8001cac <HAL_GPIO_Init+0x1a0>
 8001c9e:	2304      	movs	r3, #4
 8001ca0:	e004      	b.n	8001cac <HAL_GPIO_Init+0x1a0>
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	e002      	b.n	8001cac <HAL_GPIO_Init+0x1a0>
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e000      	b.n	8001cac <HAL_GPIO_Init+0x1a0>
 8001caa:	2300      	movs	r3, #0
 8001cac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cae:	f002 0203 	and.w	r2, r2, #3
 8001cb2:	0092      	lsls	r2, r2, #2
 8001cb4:	4093      	lsls	r3, r2
 8001cb6:	68fa      	ldr	r2, [r7, #12]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001cbc:	493a      	ldr	r1, [pc, #232]	; (8001da8 <HAL_GPIO_Init+0x29c>)
 8001cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc0:	089b      	lsrs	r3, r3, #2
 8001cc2:	3302      	adds	r3, #2
 8001cc4:	68fa      	ldr	r2, [r7, #12]
 8001cc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d006      	beq.n	8001ce4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001cd6:	4b39      	ldr	r3, [pc, #228]	; (8001dbc <HAL_GPIO_Init+0x2b0>)
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	4938      	ldr	r1, [pc, #224]	; (8001dbc <HAL_GPIO_Init+0x2b0>)
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	600b      	str	r3, [r1, #0]
 8001ce2:	e006      	b.n	8001cf2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ce4:	4b35      	ldr	r3, [pc, #212]	; (8001dbc <HAL_GPIO_Init+0x2b0>)
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	43db      	mvns	r3, r3
 8001cec:	4933      	ldr	r1, [pc, #204]	; (8001dbc <HAL_GPIO_Init+0x2b0>)
 8001cee:	4013      	ands	r3, r2
 8001cf0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d006      	beq.n	8001d0c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001cfe:	4b2f      	ldr	r3, [pc, #188]	; (8001dbc <HAL_GPIO_Init+0x2b0>)
 8001d00:	685a      	ldr	r2, [r3, #4]
 8001d02:	492e      	ldr	r1, [pc, #184]	; (8001dbc <HAL_GPIO_Init+0x2b0>)
 8001d04:	69bb      	ldr	r3, [r7, #24]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	604b      	str	r3, [r1, #4]
 8001d0a:	e006      	b.n	8001d1a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d0c:	4b2b      	ldr	r3, [pc, #172]	; (8001dbc <HAL_GPIO_Init+0x2b0>)
 8001d0e:	685a      	ldr	r2, [r3, #4]
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	43db      	mvns	r3, r3
 8001d14:	4929      	ldr	r1, [pc, #164]	; (8001dbc <HAL_GPIO_Init+0x2b0>)
 8001d16:	4013      	ands	r3, r2
 8001d18:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d006      	beq.n	8001d34 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d26:	4b25      	ldr	r3, [pc, #148]	; (8001dbc <HAL_GPIO_Init+0x2b0>)
 8001d28:	689a      	ldr	r2, [r3, #8]
 8001d2a:	4924      	ldr	r1, [pc, #144]	; (8001dbc <HAL_GPIO_Init+0x2b0>)
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	608b      	str	r3, [r1, #8]
 8001d32:	e006      	b.n	8001d42 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d34:	4b21      	ldr	r3, [pc, #132]	; (8001dbc <HAL_GPIO_Init+0x2b0>)
 8001d36:	689a      	ldr	r2, [r3, #8]
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	43db      	mvns	r3, r3
 8001d3c:	491f      	ldr	r1, [pc, #124]	; (8001dbc <HAL_GPIO_Init+0x2b0>)
 8001d3e:	4013      	ands	r3, r2
 8001d40:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d006      	beq.n	8001d5c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d4e:	4b1b      	ldr	r3, [pc, #108]	; (8001dbc <HAL_GPIO_Init+0x2b0>)
 8001d50:	68da      	ldr	r2, [r3, #12]
 8001d52:	491a      	ldr	r1, [pc, #104]	; (8001dbc <HAL_GPIO_Init+0x2b0>)
 8001d54:	69bb      	ldr	r3, [r7, #24]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	60cb      	str	r3, [r1, #12]
 8001d5a:	e006      	b.n	8001d6a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d5c:	4b17      	ldr	r3, [pc, #92]	; (8001dbc <HAL_GPIO_Init+0x2b0>)
 8001d5e:	68da      	ldr	r2, [r3, #12]
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	43db      	mvns	r3, r3
 8001d64:	4915      	ldr	r1, [pc, #84]	; (8001dbc <HAL_GPIO_Init+0x2b0>)
 8001d66:	4013      	ands	r3, r2
 8001d68:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d76:	fa22 f303 	lsr.w	r3, r2, r3
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	f47f aed0 	bne.w	8001b20 <HAL_GPIO_Init+0x14>
  }
}
 8001d80:	bf00      	nop
 8001d82:	372c      	adds	r7, #44	; 0x2c
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bc80      	pop	{r7}
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	10210000 	.word	0x10210000
 8001d90:	10110000 	.word	0x10110000
 8001d94:	10120000 	.word	0x10120000
 8001d98:	10310000 	.word	0x10310000
 8001d9c:	10320000 	.word	0x10320000
 8001da0:	10220000 	.word	0x10220000
 8001da4:	40021000 	.word	0x40021000
 8001da8:	40010000 	.word	0x40010000
 8001dac:	40010800 	.word	0x40010800
 8001db0:	40010c00 	.word	0x40010c00
 8001db4:	40011000 	.word	0x40011000
 8001db8:	40011400 	.word	0x40011400
 8001dbc:	40010400 	.word	0x40010400

08001dc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	460b      	mov	r3, r1
 8001dca:	807b      	strh	r3, [r7, #2]
 8001dcc:	4613      	mov	r3, r2
 8001dce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001dd0:	787b      	ldrb	r3, [r7, #1]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d003      	beq.n	8001dde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dd6:	887a      	ldrh	r2, [r7, #2]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ddc:	e003      	b.n	8001de6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001dde:	887b      	ldrh	r3, [r7, #2]
 8001de0:	041a      	lsls	r2, r3, #16
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	611a      	str	r2, [r3, #16]
}
 8001de6:	bf00      	nop
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bc80      	pop	{r7}
 8001dee:	4770      	bx	lr

08001df0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	4603      	mov	r3, r0
 8001df8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001dfa:	4b08      	ldr	r3, [pc, #32]	; (8001e1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001dfc:	695a      	ldr	r2, [r3, #20]
 8001dfe:	88fb      	ldrh	r3, [r7, #6]
 8001e00:	4013      	ands	r3, r2
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d006      	beq.n	8001e14 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e06:	4a05      	ldr	r2, [pc, #20]	; (8001e1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e08:	88fb      	ldrh	r3, [r7, #6]
 8001e0a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e0c:	88fb      	ldrh	r3, [r7, #6]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f000 f806 	bl	8001e20 <HAL_GPIO_EXTI_Callback>
  }
}
 8001e14:	bf00      	nop
 8001e16:	3708      	adds	r7, #8
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	40010400 	.word	0x40010400

08001e20 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	4603      	mov	r3, r0
 8001e28:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001e2a:	bf00      	nop
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bc80      	pop	{r7}
 8001e32:	4770      	bx	lr

08001e34 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001e34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e36:	b08b      	sub	sp, #44	; 0x2c
 8001e38:	af06      	add	r7, sp, #24
 8001e3a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d101      	bne.n	8001e46 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e0d3      	b.n	8001fee <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d106      	bne.n	8001e60 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f006 fdc2 	bl	80089e4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2203      	movs	r2, #3
 8001e64:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f002 feae 	bl	8004bce <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	603b      	str	r3, [r7, #0]
 8001e78:	687e      	ldr	r6, [r7, #4]
 8001e7a:	466d      	mov	r5, sp
 8001e7c:	f106 0410 	add.w	r4, r6, #16
 8001e80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e84:	6823      	ldr	r3, [r4, #0]
 8001e86:	602b      	str	r3, [r5, #0]
 8001e88:	1d33      	adds	r3, r6, #4
 8001e8a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e8c:	6838      	ldr	r0, [r7, #0]
 8001e8e:	f002 fe77 	bl	8004b80 <USB_CoreInit>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d005      	beq.n	8001ea4 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2202      	movs	r2, #2
 8001e9c:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e0a4      	b.n	8001fee <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2100      	movs	r1, #0
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f002 feab 	bl	8004c06 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	73fb      	strb	r3, [r7, #15]
 8001eb4:	e035      	b.n	8001f22 <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001eb6:	7bfb      	ldrb	r3, [r7, #15]
 8001eb8:	687a      	ldr	r2, [r7, #4]
 8001eba:	015b      	lsls	r3, r3, #5
 8001ebc:	4413      	add	r3, r2
 8001ebe:	3329      	adds	r3, #41	; 0x29
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001ec4:	7bfb      	ldrb	r3, [r7, #15]
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	015b      	lsls	r3, r3, #5
 8001eca:	4413      	add	r3, r2
 8001ecc:	3328      	adds	r3, #40	; 0x28
 8001ece:	7bfa      	ldrb	r2, [r7, #15]
 8001ed0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001ed2:	7bfb      	ldrb	r3, [r7, #15]
 8001ed4:	7bfa      	ldrb	r2, [r7, #15]
 8001ed6:	b291      	uxth	r1, r2
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	015b      	lsls	r3, r3, #5
 8001edc:	4413      	add	r3, r2
 8001ede:	3336      	adds	r3, #54	; 0x36
 8001ee0:	460a      	mov	r2, r1
 8001ee2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ee4:	7bfb      	ldrb	r3, [r7, #15]
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	015b      	lsls	r3, r3, #5
 8001eea:	4413      	add	r3, r2
 8001eec:	332b      	adds	r3, #43	; 0x2b
 8001eee:	2200      	movs	r2, #0
 8001ef0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001ef2:	7bfb      	ldrb	r3, [r7, #15]
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	015b      	lsls	r3, r3, #5
 8001ef8:	4413      	add	r3, r2
 8001efa:	3338      	adds	r3, #56	; 0x38
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001f00:	7bfb      	ldrb	r3, [r7, #15]
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	015b      	lsls	r3, r3, #5
 8001f06:	4413      	add	r3, r2
 8001f08:	333c      	adds	r3, #60	; 0x3c
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001f0e:	7bfb      	ldrb	r3, [r7, #15]
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	3302      	adds	r3, #2
 8001f14:	015b      	lsls	r3, r3, #5
 8001f16:	4413      	add	r3, r2
 8001f18:	2200      	movs	r2, #0
 8001f1a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f1c:	7bfb      	ldrb	r3, [r7, #15]
 8001f1e:	3301      	adds	r3, #1
 8001f20:	73fb      	strb	r3, [r7, #15]
 8001f22:	7bfa      	ldrb	r2, [r7, #15]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d3c4      	bcc.n	8001eb6 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	73fb      	strb	r3, [r7, #15]
 8001f30:	e031      	b.n	8001f96 <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001f32:	7bfb      	ldrb	r3, [r7, #15]
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	015b      	lsls	r3, r3, #5
 8001f38:	4413      	add	r3, r2
 8001f3a:	f203 1329 	addw	r3, r3, #297	; 0x129
 8001f3e:	2200      	movs	r2, #0
 8001f40:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f42:	7bfb      	ldrb	r3, [r7, #15]
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	015b      	lsls	r3, r3, #5
 8001f48:	4413      	add	r3, r2
 8001f4a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001f4e:	7bfa      	ldrb	r2, [r7, #15]
 8001f50:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f52:	7bfb      	ldrb	r3, [r7, #15]
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	015b      	lsls	r3, r3, #5
 8001f58:	4413      	add	r3, r2
 8001f5a:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8001f5e:	2200      	movs	r2, #0
 8001f60:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f62:	7bfb      	ldrb	r3, [r7, #15]
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	015b      	lsls	r3, r3, #5
 8001f68:	4413      	add	r3, r2
 8001f6a:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001f6e:	2200      	movs	r2, #0
 8001f70:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f72:	7bfb      	ldrb	r3, [r7, #15]
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	015b      	lsls	r3, r3, #5
 8001f78:	4413      	add	r3, r2
 8001f7a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001f7e:	2200      	movs	r2, #0
 8001f80:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f82:	7bfb      	ldrb	r3, [r7, #15]
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	330a      	adds	r3, #10
 8001f88:	015b      	lsls	r3, r3, #5
 8001f8a:	4413      	add	r3, r2
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f90:	7bfb      	ldrb	r3, [r7, #15]
 8001f92:	3301      	adds	r3, #1
 8001f94:	73fb      	strb	r3, [r7, #15]
 8001f96:	7bfa      	ldrb	r2, [r7, #15]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d3c8      	bcc.n	8001f32 <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	603b      	str	r3, [r7, #0]
 8001fa6:	687e      	ldr	r6, [r7, #4]
 8001fa8:	466d      	mov	r5, sp
 8001faa:	f106 0410 	add.w	r4, r6, #16
 8001fae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fb2:	6823      	ldr	r3, [r4, #0]
 8001fb4:	602b      	str	r3, [r5, #0]
 8001fb6:	1d33      	adds	r3, r6, #4
 8001fb8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fba:	6838      	ldr	r0, [r7, #0]
 8001fbc:	f002 fe2f 	bl	8004c1e <USB_DevInit>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d005      	beq.n	8001fd2 <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2202      	movs	r2, #2
 8001fca:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e00d      	b.n	8001fee <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2201      	movs	r2, #1
 8001fde:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f003 fced 	bl	80059c6 <USB_DevDisconnect>

  return HAL_OK;
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3714      	adds	r7, #20
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ff6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b082      	sub	sp, #8
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002004:	2b01      	cmp	r3, #1
 8002006:	d101      	bne.n	800200c <HAL_PCD_Start+0x16>
 8002008:	2302      	movs	r3, #2
 800200a:	e016      	b.n	800203a <HAL_PCD_Start+0x44>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002014:	2101      	movs	r1, #1
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f006 ff3d 	bl	8008e96 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4618      	mov	r0, r3
 8002022:	f003 fcc6 	bl	80059b2 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4618      	mov	r0, r3
 800202c:	f002 fdb8 	bl	8004ba0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2200      	movs	r2, #0
 8002034:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8002042:	b580      	push	{r7, lr}
 8002044:	b082      	sub	sp, #8
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002050:	2b01      	cmp	r3, #1
 8002052:	d101      	bne.n	8002058 <HAL_PCD_Stop+0x16>
 8002054:	2302      	movs	r3, #2
 8002056:	e020      	b.n	800209a <HAL_PCD_Stop+0x58>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2201      	movs	r2, #1
 800205c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  __HAL_PCD_DISABLE(hpcd);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4618      	mov	r0, r3
 8002066:	f002 fdb2 	bl	8004bce <USB_DisableGlobalInt>

  if (USB_StopDevice(hpcd->Instance) != HAL_OK)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4618      	mov	r0, r3
 8002070:	f003 fc76 	bl	8005960 <USB_StopDevice>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d005      	beq.n	8002086 <HAL_PCD_Stop+0x44>
  {
    __HAL_UNLOCK(hpcd);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
    return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e009      	b.n	800209a <HAL_PCD_Stop+0x58>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4618      	mov	r0, r3
 800208c:	f003 fc9b 	bl	80059c6 <USB_DevDisconnect>
  __HAL_UNLOCK(hpcd);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b082      	sub	sp, #8
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f003 fc93 	bl	80059da <USB_ReadInterrupts>
 80020b4:	4603      	mov	r3, r0
 80020b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020be:	d102      	bne.n	80020c6 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f000 fa9d 	bl	8002600 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f003 fc85 	bl	80059da <USB_ReadInterrupts>
 80020d0:	4603      	mov	r3, r0
 80020d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020da:	d112      	bne.n	8002102 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020e4:	b29a      	uxth	r2, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020ee:	b292      	uxth	r2, r2
 80020f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f006 fd0e 	bl	8008b16 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80020fa:	2100      	movs	r1, #0
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f000 f8de 	bl	80022be <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4618      	mov	r0, r3
 8002108:	f003 fc67 	bl	80059da <USB_ReadInterrupts>
 800210c:	4603      	mov	r3, r0
 800210e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002112:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002116:	d10b      	bne.n	8002130 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002120:	b29a      	uxth	r2, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800212a:	b292      	uxth	r2, r2
 800212c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4618      	mov	r0, r3
 8002136:	f003 fc50 	bl	80059da <USB_ReadInterrupts>
 800213a:	4603      	mov	r3, r0
 800213c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002140:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002144:	d10b      	bne.n	800215e <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800214e:	b29a      	uxth	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002158:	b292      	uxth	r2, r2
 800215a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4618      	mov	r0, r3
 8002164:	f003 fc39 	bl	80059da <USB_ReadInterrupts>
 8002168:	4603      	mov	r3, r0
 800216a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800216e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002172:	d126      	bne.n	80021c2 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800217c:	b29a      	uxth	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f022 0204 	bic.w	r2, r2, #4
 8002186:	b292      	uxth	r2, r2
 8002188:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002194:	b29a      	uxth	r2, r3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f022 0208 	bic.w	r2, r2, #8
 800219e:	b292      	uxth	r2, r2
 80021a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f006 fcef 	bl	8008b88 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80021b2:	b29a      	uxth	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80021bc:	b292      	uxth	r2, r2
 80021be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f003 fc07 	bl	80059da <USB_ReadInterrupts>
 80021cc:	4603      	mov	r3, r0
 80021ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80021d6:	d13d      	bne.n	8002254 <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80021e0:	b29a      	uxth	r2, r3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f042 0208 	orr.w	r2, r2, #8
 80021ea:	b292      	uxth	r2, r2
 80021ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80021f8:	b29a      	uxth	r2, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002202:	b292      	uxth	r2, r2
 8002204:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002210:	b29a      	uxth	r2, r3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f042 0204 	orr.w	r2, r2, #4
 800221a:	b292      	uxth	r2, r2
 800221c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4618      	mov	r0, r3
 8002226:	f003 fbd8 	bl	80059da <USB_ReadInterrupts>
 800222a:	4603      	mov	r3, r0
 800222c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002230:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002234:	d10b      	bne.n	800224e <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800223e:	b29a      	uxth	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002248:	b292      	uxth	r2, r2
 800224a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f006 fc80 	bl	8008b54 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4618      	mov	r0, r3
 800225a:	f003 fbbe 	bl	80059da <USB_ReadInterrupts>
 800225e:	4603      	mov	r3, r0
 8002260:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002264:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002268:	d10e      	bne.n	8002288 <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002272:	b29a      	uxth	r2, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800227c:	b292      	uxth	r2, r2
 800227e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f006 fc39 	bl	8008afa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4618      	mov	r0, r3
 800228e:	f003 fba4 	bl	80059da <USB_ReadInterrupts>
 8002292:	4603      	mov	r3, r0
 8002294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002298:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800229c:	d10b      	bne.n	80022b6 <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80022a6:	b29a      	uxth	r2, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022b0:	b292      	uxth	r2, r2
 80022b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80022b6:	bf00      	nop
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80022be:	b580      	push	{r7, lr}
 80022c0:	b082      	sub	sp, #8
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
 80022c6:	460b      	mov	r3, r1
 80022c8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d101      	bne.n	80022d8 <HAL_PCD_SetAddress+0x1a>
 80022d4:	2302      	movs	r3, #2
 80022d6:	e013      	b.n	8002300 <HAL_PCD_SetAddress+0x42>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2201      	movs	r2, #1
 80022dc:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	78fa      	ldrb	r2, [r7, #3]
 80022e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	78fa      	ldrb	r2, [r7, #3]
 80022ee:	4611      	mov	r1, r2
 80022f0:	4618      	mov	r0, r3
 80022f2:	f003 fb4b 	bl	800598c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80022fe:	2300      	movs	r3, #0
}
 8002300:	4618      	mov	r0, r3
 8002302:	3708      	adds	r7, #8
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b084      	sub	sp, #16
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	4608      	mov	r0, r1
 8002312:	4611      	mov	r1, r2
 8002314:	461a      	mov	r2, r3
 8002316:	4603      	mov	r3, r0
 8002318:	70fb      	strb	r3, [r7, #3]
 800231a:	460b      	mov	r3, r1
 800231c:	803b      	strh	r3, [r7, #0]
 800231e:	4613      	mov	r3, r2
 8002320:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002322:	2300      	movs	r3, #0
 8002324:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002326:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800232a:	2b00      	cmp	r3, #0
 800232c:	da0b      	bge.n	8002346 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800232e:	78fb      	ldrb	r3, [r7, #3]
 8002330:	f003 0307 	and.w	r3, r3, #7
 8002334:	015b      	lsls	r3, r3, #5
 8002336:	3328      	adds	r3, #40	; 0x28
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	4413      	add	r3, r2
 800233c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2201      	movs	r2, #1
 8002342:	705a      	strb	r2, [r3, #1]
 8002344:	e00b      	b.n	800235e <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002346:	78fb      	ldrb	r3, [r7, #3]
 8002348:	f003 0307 	and.w	r3, r3, #7
 800234c:	015b      	lsls	r3, r3, #5
 800234e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	4413      	add	r3, r2
 8002356:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2200      	movs	r2, #0
 800235c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800235e:	78fb      	ldrb	r3, [r7, #3]
 8002360:	f003 0307 	and.w	r3, r3, #7
 8002364:	b2da      	uxtb	r2, r3
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800236a:	883a      	ldrh	r2, [r7, #0]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	78ba      	ldrb	r2, [r7, #2]
 8002374:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	785b      	ldrb	r3, [r3, #1]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d004      	beq.n	8002388 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	b29a      	uxth	r2, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002388:	78bb      	ldrb	r3, [r7, #2]
 800238a:	2b02      	cmp	r3, #2
 800238c:	d102      	bne.n	8002394 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2200      	movs	r2, #0
 8002392:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800239a:	2b01      	cmp	r3, #1
 800239c:	d101      	bne.n	80023a2 <HAL_PCD_EP_Open+0x9a>
 800239e:	2302      	movs	r3, #2
 80023a0:	e00e      	b.n	80023c0 <HAL_PCD_EP_Open+0xb8>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2201      	movs	r2, #1
 80023a6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	68f9      	ldr	r1, [r7, #12]
 80023b0:	4618      	mov	r0, r3
 80023b2:	f002 fc59 	bl	8004c68 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 80023be:	7afb      	ldrb	r3, [r7, #11]
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3710      	adds	r7, #16
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b086      	sub	sp, #24
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	607a      	str	r2, [r7, #4]
 80023d2:	603b      	str	r3, [r7, #0]
 80023d4:	460b      	mov	r3, r1
 80023d6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023d8:	7afb      	ldrb	r3, [r7, #11]
 80023da:	f003 0307 	and.w	r3, r3, #7
 80023de:	015b      	lsls	r3, r3, #5
 80023e0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80023e4:	68fa      	ldr	r2, [r7, #12]
 80023e6:	4413      	add	r3, r2
 80023e8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	683a      	ldr	r2, [r7, #0]
 80023f4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	2200      	movs	r2, #0
 80023fa:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	2200      	movs	r2, #0
 8002400:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002402:	7afb      	ldrb	r3, [r7, #11]
 8002404:	f003 0307 	and.w	r3, r3, #7
 8002408:	b2da      	uxtb	r2, r3
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800240e:	7afb      	ldrb	r3, [r7, #11]
 8002410:	f003 0307 	and.w	r3, r3, #7
 8002414:	2b00      	cmp	r3, #0
 8002416:	d106      	bne.n	8002426 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	6979      	ldr	r1, [r7, #20]
 800241e:	4618      	mov	r0, r3
 8002420:	f002 ff10 	bl	8005244 <USB_EPStartXfer>
 8002424:	e005      	b.n	8002432 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	6979      	ldr	r1, [r7, #20]
 800242c:	4618      	mov	r0, r3
 800242e:	f002 ff09 	bl	8005244 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002432:	2300      	movs	r3, #0
}
 8002434:	4618      	mov	r0, r3
 8002436:	3718      	adds	r7, #24
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}

0800243c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b086      	sub	sp, #24
 8002440:	af00      	add	r7, sp, #0
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	607a      	str	r2, [r7, #4]
 8002446:	603b      	str	r3, [r7, #0]
 8002448:	460b      	mov	r3, r1
 800244a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800244c:	7afb      	ldrb	r3, [r7, #11]
 800244e:	f003 0307 	and.w	r3, r3, #7
 8002452:	015b      	lsls	r3, r3, #5
 8002454:	3328      	adds	r3, #40	; 0x28
 8002456:	68fa      	ldr	r2, [r7, #12]
 8002458:	4413      	add	r3, r2
 800245a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	683a      	ldr	r2, [r7, #0]
 8002466:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	2200      	movs	r2, #0
 800246c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	2201      	movs	r2, #1
 8002472:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002474:	7afb      	ldrb	r3, [r7, #11]
 8002476:	f003 0307 	and.w	r3, r3, #7
 800247a:	b2da      	uxtb	r2, r3
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002480:	7afb      	ldrb	r3, [r7, #11]
 8002482:	f003 0307 	and.w	r3, r3, #7
 8002486:	2b00      	cmp	r3, #0
 8002488:	d106      	bne.n	8002498 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	6979      	ldr	r1, [r7, #20]
 8002490:	4618      	mov	r0, r3
 8002492:	f002 fed7 	bl	8005244 <USB_EPStartXfer>
 8002496:	e005      	b.n	80024a4 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	6979      	ldr	r1, [r7, #20]
 800249e:	4618      	mov	r0, r3
 80024a0:	f002 fed0 	bl	8005244 <USB_EPStartXfer>
  }

  return HAL_OK;
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3718      	adds	r7, #24
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}

080024ae <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024ae:	b580      	push	{r7, lr}
 80024b0:	b084      	sub	sp, #16
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
 80024b6:	460b      	mov	r3, r1
 80024b8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80024ba:	78fb      	ldrb	r3, [r7, #3]
 80024bc:	f003 0207 	and.w	r2, r3, #7
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d901      	bls.n	80024cc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e046      	b.n	800255a <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80024cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	da0b      	bge.n	80024ec <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024d4:	78fb      	ldrb	r3, [r7, #3]
 80024d6:	f003 0307 	and.w	r3, r3, #7
 80024da:	015b      	lsls	r3, r3, #5
 80024dc:	3328      	adds	r3, #40	; 0x28
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	4413      	add	r3, r2
 80024e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2201      	movs	r2, #1
 80024e8:	705a      	strb	r2, [r3, #1]
 80024ea:	e009      	b.n	8002500 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80024ec:	78fb      	ldrb	r3, [r7, #3]
 80024ee:	015b      	lsls	r3, r3, #5
 80024f0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	4413      	add	r3, r2
 80024f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2200      	movs	r2, #0
 80024fe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2201      	movs	r2, #1
 8002504:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002506:	78fb      	ldrb	r3, [r7, #3]
 8002508:	f003 0307 	and.w	r3, r3, #7
 800250c:	b2da      	uxtb	r2, r3
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002518:	2b01      	cmp	r3, #1
 800251a:	d101      	bne.n	8002520 <HAL_PCD_EP_SetStall+0x72>
 800251c:	2302      	movs	r3, #2
 800251e:	e01c      	b.n	800255a <HAL_PCD_EP_SetStall+0xac>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	68f9      	ldr	r1, [r7, #12]
 800252e:	4618      	mov	r0, r3
 8002530:	f003 f940 	bl	80057b4 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002534:	78fb      	ldrb	r3, [r7, #3]
 8002536:	f003 0307 	and.w	r3, r3, #7
 800253a:	2b00      	cmp	r3, #0
 800253c:	d108      	bne.n	8002550 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8002548:	4619      	mov	r1, r3
 800254a:	4610      	mov	r0, r2
 800254c:	f003 fa54 	bl	80059f8 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2200      	movs	r2, #0
 8002554:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8002558:	2300      	movs	r3, #0
}
 800255a:	4618      	mov	r0, r3
 800255c:	3710      	adds	r7, #16
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}

08002562 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002562:	b580      	push	{r7, lr}
 8002564:	b084      	sub	sp, #16
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
 800256a:	460b      	mov	r3, r1
 800256c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800256e:	78fb      	ldrb	r3, [r7, #3]
 8002570:	f003 020f 	and.w	r2, r3, #15
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	429a      	cmp	r2, r3
 800257a:	d901      	bls.n	8002580 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e03a      	b.n	80025f6 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002580:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002584:	2b00      	cmp	r3, #0
 8002586:	da0b      	bge.n	80025a0 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002588:	78fb      	ldrb	r3, [r7, #3]
 800258a:	f003 0307 	and.w	r3, r3, #7
 800258e:	015b      	lsls	r3, r3, #5
 8002590:	3328      	adds	r3, #40	; 0x28
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	4413      	add	r3, r2
 8002596:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2201      	movs	r2, #1
 800259c:	705a      	strb	r2, [r3, #1]
 800259e:	e00b      	b.n	80025b8 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025a0:	78fb      	ldrb	r3, [r7, #3]
 80025a2:	f003 0307 	and.w	r3, r3, #7
 80025a6:	015b      	lsls	r3, r3, #5
 80025a8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	4413      	add	r3, r2
 80025b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2200      	movs	r2, #0
 80025b6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2200      	movs	r2, #0
 80025bc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80025be:	78fb      	ldrb	r3, [r7, #3]
 80025c0:	f003 0307 	and.w	r3, r3, #7
 80025c4:	b2da      	uxtb	r2, r3
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d101      	bne.n	80025d8 <HAL_PCD_EP_ClrStall+0x76>
 80025d4:	2302      	movs	r3, #2
 80025d6:	e00e      	b.n	80025f6 <HAL_PCD_EP_ClrStall+0x94>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2201      	movs	r2, #1
 80025dc:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	68f9      	ldr	r1, [r7, #12]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f003 f926 	bl	8005838 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3710      	adds	r7, #16
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
	...

08002600 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002600:	b590      	push	{r4, r7, lr}
 8002602:	b089      	sub	sp, #36	; 0x24
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002608:	e282      	b.n	8002b10 <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002612:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002614:	8afb      	ldrh	r3, [r7, #22]
 8002616:	b2db      	uxtb	r3, r3
 8002618:	f003 030f 	and.w	r3, r3, #15
 800261c:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 800261e:	7d7b      	ldrb	r3, [r7, #21]
 8002620:	2b00      	cmp	r3, #0
 8002622:	f040 8142 	bne.w	80028aa <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002626:	8afb      	ldrh	r3, [r7, #22]
 8002628:	f003 0310 	and.w	r3, r3, #16
 800262c:	2b00      	cmp	r3, #0
 800262e:	d151      	bne.n	80026d4 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	881b      	ldrh	r3, [r3, #0]
 8002636:	b29b      	uxth	r3, r3
 8002638:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800263c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002640:	b29c      	uxth	r4, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 800264a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800264e:	b29b      	uxth	r3, r3
 8002650:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	3328      	adds	r3, #40	; 0x28
 8002656:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002660:	b29b      	uxth	r3, r3
 8002662:	461a      	mov	r2, r3
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	00db      	lsls	r3, r3, #3
 800266a:	4413      	add	r3, r2
 800266c:	3302      	adds	r3, #2
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	6812      	ldr	r2, [r2, #0]
 8002674:	4413      	add	r3, r2
 8002676:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800267a:	881b      	ldrh	r3, [r3, #0]
 800267c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	695a      	ldr	r2, [r3, #20]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	69db      	ldr	r3, [r3, #28]
 800268c:	441a      	add	r2, r3
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002692:	2100      	movs	r1, #0
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f006 fa19 	bl	8008acc <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	f000 8234 	beq.w	8002b10 <PCD_EP_ISR_Handler+0x510>
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	699b      	ldr	r3, [r3, #24]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	f040 822f 	bne.w	8002b10 <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80026be:	b2da      	uxtb	r2, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	b292      	uxth	r2, r2
 80026c6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80026d2:	e21d      	b.n	8002b10 <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80026da:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	881b      	ldrh	r3, [r3, #0]
 80026e2:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80026e4:	8a7b      	ldrh	r3, [r7, #18]
 80026e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d033      	beq.n	8002756 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	461a      	mov	r2, r3
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	00db      	lsls	r3, r3, #3
 8002700:	4413      	add	r3, r2
 8002702:	3306      	adds	r3, #6
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	6812      	ldr	r2, [r2, #0]
 800270a:	4413      	add	r3, r2
 800270c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002710:	881b      	ldrh	r3, [r3, #0]
 8002712:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6818      	ldr	r0, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800272c:	b29b      	uxth	r3, r3
 800272e:	f003 f9b2 	bl	8005a96 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	881b      	ldrh	r3, [r3, #0]
 8002738:	b29a      	uxth	r2, r3
 800273a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800273e:	4013      	ands	r3, r2
 8002740:	b29c      	uxth	r4, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 800274a:	b292      	uxth	r2, r2
 800274c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f006 f992 	bl	8008a78 <HAL_PCD_SetupStageCallback>
 8002754:	e1dc      	b.n	8002b10 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002756:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800275a:	2b00      	cmp	r3, #0
 800275c:	f280 81d8 	bge.w	8002b10 <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	881b      	ldrh	r3, [r3, #0]
 8002766:	b29a      	uxth	r2, r3
 8002768:	f640 738f 	movw	r3, #3983	; 0xf8f
 800276c:	4013      	ands	r3, r2
 800276e:	b29c      	uxth	r4, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8002778:	b292      	uxth	r2, r2
 800277a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002784:	b29b      	uxth	r3, r3
 8002786:	461a      	mov	r2, r3
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	00db      	lsls	r3, r3, #3
 800278e:	4413      	add	r3, r2
 8002790:	3306      	adds	r3, #6
 8002792:	005b      	lsls	r3, r3, #1
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	6812      	ldr	r2, [r2, #0]
 8002798:	4413      	add	r3, r2
 800279a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800279e:	881b      	ldrh	r3, [r3, #0]
 80027a0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	69db      	ldr	r3, [r3, #28]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d019      	beq.n	80027e4 <PCD_EP_ISR_Handler+0x1e4>
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	695b      	ldr	r3, [r3, #20]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d015      	beq.n	80027e4 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6818      	ldr	r0, [r3, #0]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6959      	ldr	r1, [r3, #20]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	f003 f964 	bl	8005a96 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	695a      	ldr	r2, [r3, #20]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	69db      	ldr	r3, [r3, #28]
 80027d6:	441a      	add	r2, r3
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80027dc:	2100      	movs	r1, #0
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f006 f95c 	bl	8008a9c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	461c      	mov	r4, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	441c      	add	r4, r3
 80027f6:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 80027fa:	461c      	mov	r4, r3
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	691b      	ldr	r3, [r3, #16]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d10e      	bne.n	8002822 <PCD_EP_ISR_Handler+0x222>
 8002804:	8823      	ldrh	r3, [r4, #0]
 8002806:	b29b      	uxth	r3, r3
 8002808:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800280c:	b29b      	uxth	r3, r3
 800280e:	8023      	strh	r3, [r4, #0]
 8002810:	8823      	ldrh	r3, [r4, #0]
 8002812:	b29b      	uxth	r3, r3
 8002814:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002818:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800281c:	b29b      	uxth	r3, r3
 800281e:	8023      	strh	r3, [r4, #0]
 8002820:	e02d      	b.n	800287e <PCD_EP_ISR_Handler+0x27e>
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	2b3e      	cmp	r3, #62	; 0x3e
 8002828:	d812      	bhi.n	8002850 <PCD_EP_ISR_Handler+0x250>
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	691b      	ldr	r3, [r3, #16]
 800282e:	085b      	lsrs	r3, r3, #1
 8002830:	61bb      	str	r3, [r7, #24]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	f003 0301 	and.w	r3, r3, #1
 800283a:	2b00      	cmp	r3, #0
 800283c:	d002      	beq.n	8002844 <PCD_EP_ISR_Handler+0x244>
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	3301      	adds	r3, #1
 8002842:	61bb      	str	r3, [r7, #24]
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	b29b      	uxth	r3, r3
 8002848:	029b      	lsls	r3, r3, #10
 800284a:	b29b      	uxth	r3, r3
 800284c:	8023      	strh	r3, [r4, #0]
 800284e:	e016      	b.n	800287e <PCD_EP_ISR_Handler+0x27e>
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	691b      	ldr	r3, [r3, #16]
 8002854:	095b      	lsrs	r3, r3, #5
 8002856:	61bb      	str	r3, [r7, #24]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	691b      	ldr	r3, [r3, #16]
 800285c:	f003 031f 	and.w	r3, r3, #31
 8002860:	2b00      	cmp	r3, #0
 8002862:	d102      	bne.n	800286a <PCD_EP_ISR_Handler+0x26a>
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	3b01      	subs	r3, #1
 8002868:	61bb      	str	r3, [r7, #24]
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	b29b      	uxth	r3, r3
 800286e:	029b      	lsls	r3, r3, #10
 8002870:	b29b      	uxth	r3, r3
 8002872:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002876:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800287a:	b29b      	uxth	r3, r3
 800287c:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	881b      	ldrh	r3, [r3, #0]
 8002884:	b29b      	uxth	r3, r3
 8002886:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800288a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800288e:	b29c      	uxth	r4, r3
 8002890:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8002894:	b29c      	uxth	r4, r3
 8002896:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800289a:	b29c      	uxth	r4, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	4ba2      	ldr	r3, [pc, #648]	; (8002b2c <PCD_EP_ISR_Handler+0x52c>)
 80028a2:	4323      	orrs	r3, r4
 80028a4:	b29b      	uxth	r3, r3
 80028a6:	8013      	strh	r3, [r2, #0]
 80028a8:	e132      	b.n	8002b10 <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	461a      	mov	r2, r3
 80028b0:	7d7b      	ldrb	r3, [r7, #21]
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	4413      	add	r3, r2
 80028b6:	881b      	ldrh	r3, [r3, #0]
 80028b8:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80028ba:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	f280 80d1 	bge.w	8002a66 <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	461a      	mov	r2, r3
 80028ca:	7d7b      	ldrb	r3, [r7, #21]
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	4413      	add	r3, r2
 80028d0:	881b      	ldrh	r3, [r3, #0]
 80028d2:	b29a      	uxth	r2, r3
 80028d4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80028d8:	4013      	ands	r3, r2
 80028da:	b29c      	uxth	r4, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	461a      	mov	r2, r3
 80028e2:	7d7b      	ldrb	r3, [r7, #21]
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	4413      	add	r3, r2
 80028e8:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80028ec:	b292      	uxth	r2, r2
 80028ee:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80028f0:	7d7b      	ldrb	r3, [r7, #21]
 80028f2:	015b      	lsls	r3, r3, #5
 80028f4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	4413      	add	r3, r2
 80028fc:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	7b1b      	ldrb	r3, [r3, #12]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d121      	bne.n	800294a <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800290e:	b29b      	uxth	r3, r3
 8002910:	461a      	mov	r2, r3
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	00db      	lsls	r3, r3, #3
 8002918:	4413      	add	r3, r2
 800291a:	3306      	adds	r3, #6
 800291c:	005b      	lsls	r3, r3, #1
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	6812      	ldr	r2, [r2, #0]
 8002922:	4413      	add	r3, r2
 8002924:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002928:	881b      	ldrh	r3, [r3, #0]
 800292a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800292e:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8002930:	8bfb      	ldrh	r3, [r7, #30]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d072      	beq.n	8002a1c <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6818      	ldr	r0, [r3, #0]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	6959      	ldr	r1, [r3, #20]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	88da      	ldrh	r2, [r3, #6]
 8002942:	8bfb      	ldrh	r3, [r7, #30]
 8002944:	f003 f8a7 	bl	8005a96 <USB_ReadPMA>
 8002948:	e068      	b.n	8002a1c <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	461a      	mov	r2, r3
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	4413      	add	r3, r2
 8002958:	881b      	ldrh	r3, [r3, #0]
 800295a:	b29b      	uxth	r3, r3
 800295c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d021      	beq.n	80029a8 <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800296c:	b29b      	uxth	r3, r3
 800296e:	461a      	mov	r2, r3
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	00db      	lsls	r3, r3, #3
 8002976:	4413      	add	r3, r2
 8002978:	3302      	adds	r3, #2
 800297a:	005b      	lsls	r3, r3, #1
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	6812      	ldr	r2, [r2, #0]
 8002980:	4413      	add	r3, r2
 8002982:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002986:	881b      	ldrh	r3, [r3, #0]
 8002988:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800298c:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 800298e:	8bfb      	ldrh	r3, [r7, #30]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d02a      	beq.n	80029ea <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6818      	ldr	r0, [r3, #0]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6959      	ldr	r1, [r3, #20]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	891a      	ldrh	r2, [r3, #8]
 80029a0:	8bfb      	ldrh	r3, [r7, #30]
 80029a2:	f003 f878 	bl	8005a96 <USB_ReadPMA>
 80029a6:	e020      	b.n	80029ea <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	461a      	mov	r2, r3
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	00db      	lsls	r3, r3, #3
 80029ba:	4413      	add	r3, r2
 80029bc:	3306      	adds	r3, #6
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	6812      	ldr	r2, [r2, #0]
 80029c4:	4413      	add	r3, r2
 80029c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80029ca:	881b      	ldrh	r3, [r3, #0]
 80029cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029d0:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80029d2:	8bfb      	ldrh	r3, [r7, #30]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d008      	beq.n	80029ea <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6818      	ldr	r0, [r3, #0]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6959      	ldr	r1, [r3, #20]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	895a      	ldrh	r2, [r3, #10]
 80029e4:	8bfb      	ldrh	r3, [r7, #30]
 80029e6:	f003 f856 	bl	8005a96 <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	461a      	mov	r2, r3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	4413      	add	r3, r2
 80029f8:	881b      	ldrh	r3, [r3, #0]
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a04:	b29c      	uxth	r4, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	441a      	add	r2, r3
 8002a14:	4b46      	ldr	r3, [pc, #280]	; (8002b30 <PCD_EP_ISR_Handler+0x530>)
 8002a16:	4323      	orrs	r3, r4
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	69da      	ldr	r2, [r3, #28]
 8002a20:	8bfb      	ldrh	r3, [r7, #30]
 8002a22:	441a      	add	r2, r3
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	695a      	ldr	r2, [r3, #20]
 8002a2c:	8bfb      	ldrh	r3, [r7, #30]
 8002a2e:	441a      	add	r2, r3
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	699b      	ldr	r3, [r3, #24]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d004      	beq.n	8002a46 <PCD_EP_ISR_Handler+0x446>
 8002a3c:	8bfa      	ldrh	r2, [r7, #30]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	691b      	ldr	r3, [r3, #16]
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d206      	bcs.n	8002a54 <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f006 f825 	bl	8008a9c <HAL_PCD_DataOutStageCallback>
 8002a52:	e008      	b.n	8002a66 <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	7819      	ldrb	r1, [r3, #0]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	695a      	ldr	r2, [r3, #20]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	699b      	ldr	r3, [r3, #24]
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f7ff fcb1 	bl	80023c8 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002a66:	8a7b      	ldrh	r3, [r7, #18]
 8002a68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d04f      	beq.n	8002b10 <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 8002a70:	7d7b      	ldrb	r3, [r7, #21]
 8002a72:	015b      	lsls	r3, r3, #5
 8002a74:	3328      	adds	r3, #40	; 0x28
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	4413      	add	r3, r2
 8002a7a:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	461a      	mov	r2, r3
 8002a82:	7d7b      	ldrb	r3, [r7, #21]
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	4413      	add	r3, r2
 8002a88:	881b      	ldrh	r3, [r3, #0]
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002a90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a94:	b29c      	uxth	r4, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	7d7b      	ldrb	r3, [r7, #21]
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	441a      	add	r2, r3
 8002aa2:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8002aa6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	461a      	mov	r2, r3
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	00db      	lsls	r3, r3, #3
 8002ac0:	4413      	add	r3, r2
 8002ac2:	3302      	adds	r3, #2
 8002ac4:	005b      	lsls	r3, r3, #1
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	6812      	ldr	r2, [r2, #0]
 8002aca:	4413      	add	r3, r2
 8002acc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ad0:	881b      	ldrh	r3, [r3, #0]
 8002ad2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	695a      	ldr	r2, [r3, #20]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	69db      	ldr	r3, [r3, #28]
 8002ae2:	441a      	add	r2, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	699b      	ldr	r3, [r3, #24]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d106      	bne.n	8002afe <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	4619      	mov	r1, r3
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f005 ffe8 	bl	8008acc <HAL_PCD_DataInStageCallback>
 8002afc:	e008      	b.n	8002b10 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	7819      	ldrb	r1, [r3, #0]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	695a      	ldr	r2, [r3, #20]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	699b      	ldr	r3, [r3, #24]
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f7ff fc96 	bl	800243c <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	b21b      	sxth	r3, r3
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	f6ff ad74 	blt.w	800260a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8002b22:	2300      	movs	r3, #0
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3724      	adds	r7, #36	; 0x24
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd90      	pop	{r4, r7, pc}
 8002b2c:	ffff8080 	.word	0xffff8080
 8002b30:	ffff80c0 	.word	0xffff80c0

08002b34 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b087      	sub	sp, #28
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	607b      	str	r3, [r7, #4]
 8002b3e:	460b      	mov	r3, r1
 8002b40:	817b      	strh	r3, [r7, #10]
 8002b42:	4613      	mov	r3, r2
 8002b44:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002b46:	897b      	ldrh	r3, [r7, #10]
 8002b48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d008      	beq.n	8002b64 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b52:	897b      	ldrh	r3, [r7, #10]
 8002b54:	f003 0307 	and.w	r3, r3, #7
 8002b58:	015b      	lsls	r3, r3, #5
 8002b5a:	3328      	adds	r3, #40	; 0x28
 8002b5c:	68fa      	ldr	r2, [r7, #12]
 8002b5e:	4413      	add	r3, r2
 8002b60:	617b      	str	r3, [r7, #20]
 8002b62:	e006      	b.n	8002b72 <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002b64:	897b      	ldrh	r3, [r7, #10]
 8002b66:	015b      	lsls	r3, r3, #5
 8002b68:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002b6c:	68fa      	ldr	r2, [r7, #12]
 8002b6e:	4413      	add	r3, r2
 8002b70:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002b72:	893b      	ldrh	r3, [r7, #8]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d107      	bne.n	8002b88 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	b29a      	uxth	r2, r3
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	80da      	strh	r2, [r3, #6]
 8002b86:	e00b      	b.n	8002ba0 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	b29a      	uxth	r2, r3
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	0c1b      	lsrs	r3, r3, #16
 8002b9a:	b29a      	uxth	r2, r3
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	371c      	adds	r7, #28
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bc80      	pop	{r7}
 8002baa:	4770      	bx	lr

08002bac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b086      	sub	sp, #24
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d101      	bne.n	8002bbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e26c      	b.n	8003098 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	f000 8087 	beq.w	8002cda <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bcc:	4b92      	ldr	r3, [pc, #584]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f003 030c 	and.w	r3, r3, #12
 8002bd4:	2b04      	cmp	r3, #4
 8002bd6:	d00c      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002bd8:	4b8f      	ldr	r3, [pc, #572]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f003 030c 	and.w	r3, r3, #12
 8002be0:	2b08      	cmp	r3, #8
 8002be2:	d112      	bne.n	8002c0a <HAL_RCC_OscConfig+0x5e>
 8002be4:	4b8c      	ldr	r3, [pc, #560]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bf0:	d10b      	bne.n	8002c0a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bf2:	4b89      	ldr	r3, [pc, #548]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d06c      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x12c>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d168      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e246      	b.n	8003098 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c12:	d106      	bne.n	8002c22 <HAL_RCC_OscConfig+0x76>
 8002c14:	4b80      	ldr	r3, [pc, #512]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a7f      	ldr	r2, [pc, #508]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002c1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c1e:	6013      	str	r3, [r2, #0]
 8002c20:	e02e      	b.n	8002c80 <HAL_RCC_OscConfig+0xd4>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d10c      	bne.n	8002c44 <HAL_RCC_OscConfig+0x98>
 8002c2a:	4b7b      	ldr	r3, [pc, #492]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a7a      	ldr	r2, [pc, #488]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002c30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c34:	6013      	str	r3, [r2, #0]
 8002c36:	4b78      	ldr	r3, [pc, #480]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a77      	ldr	r2, [pc, #476]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002c3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c40:	6013      	str	r3, [r2, #0]
 8002c42:	e01d      	b.n	8002c80 <HAL_RCC_OscConfig+0xd4>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c4c:	d10c      	bne.n	8002c68 <HAL_RCC_OscConfig+0xbc>
 8002c4e:	4b72      	ldr	r3, [pc, #456]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a71      	ldr	r2, [pc, #452]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002c54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c58:	6013      	str	r3, [r2, #0]
 8002c5a:	4b6f      	ldr	r3, [pc, #444]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a6e      	ldr	r2, [pc, #440]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002c60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c64:	6013      	str	r3, [r2, #0]
 8002c66:	e00b      	b.n	8002c80 <HAL_RCC_OscConfig+0xd4>
 8002c68:	4b6b      	ldr	r3, [pc, #428]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a6a      	ldr	r2, [pc, #424]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002c6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c72:	6013      	str	r3, [r2, #0]
 8002c74:	4b68      	ldr	r3, [pc, #416]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a67      	ldr	r2, [pc, #412]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002c7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c7e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d013      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c88:	f7fe fbfc 	bl	8001484 <HAL_GetTick>
 8002c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c8e:	e008      	b.n	8002ca2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c90:	f7fe fbf8 	bl	8001484 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b64      	cmp	r3, #100	; 0x64
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e1fa      	b.n	8003098 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ca2:	4b5d      	ldr	r3, [pc, #372]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d0f0      	beq.n	8002c90 <HAL_RCC_OscConfig+0xe4>
 8002cae:	e014      	b.n	8002cda <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb0:	f7fe fbe8 	bl	8001484 <HAL_GetTick>
 8002cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cb6:	e008      	b.n	8002cca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cb8:	f7fe fbe4 	bl	8001484 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b64      	cmp	r3, #100	; 0x64
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e1e6      	b.n	8003098 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cca:	4b53      	ldr	r3, [pc, #332]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d1f0      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x10c>
 8002cd6:	e000      	b.n	8002cda <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0302 	and.w	r3, r3, #2
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d063      	beq.n	8002dae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ce6:	4b4c      	ldr	r3, [pc, #304]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f003 030c 	and.w	r3, r3, #12
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d00b      	beq.n	8002d0a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002cf2:	4b49      	ldr	r3, [pc, #292]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f003 030c 	and.w	r3, r3, #12
 8002cfa:	2b08      	cmp	r3, #8
 8002cfc:	d11c      	bne.n	8002d38 <HAL_RCC_OscConfig+0x18c>
 8002cfe:	4b46      	ldr	r3, [pc, #280]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d116      	bne.n	8002d38 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d0a:	4b43      	ldr	r3, [pc, #268]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d005      	beq.n	8002d22 <HAL_RCC_OscConfig+0x176>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	691b      	ldr	r3, [r3, #16]
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d001      	beq.n	8002d22 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e1ba      	b.n	8003098 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d22:	4b3d      	ldr	r3, [pc, #244]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	695b      	ldr	r3, [r3, #20]
 8002d2e:	00db      	lsls	r3, r3, #3
 8002d30:	4939      	ldr	r1, [pc, #228]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d36:	e03a      	b.n	8002dae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	691b      	ldr	r3, [r3, #16]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d020      	beq.n	8002d82 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d40:	4b36      	ldr	r3, [pc, #216]	; (8002e1c <HAL_RCC_OscConfig+0x270>)
 8002d42:	2201      	movs	r2, #1
 8002d44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d46:	f7fe fb9d 	bl	8001484 <HAL_GetTick>
 8002d4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d4c:	e008      	b.n	8002d60 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d4e:	f7fe fb99 	bl	8001484 <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d901      	bls.n	8002d60 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e19b      	b.n	8003098 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d60:	4b2d      	ldr	r3, [pc, #180]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0302 	and.w	r3, r3, #2
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d0f0      	beq.n	8002d4e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d6c:	4b2a      	ldr	r3, [pc, #168]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	695b      	ldr	r3, [r3, #20]
 8002d78:	00db      	lsls	r3, r3, #3
 8002d7a:	4927      	ldr	r1, [pc, #156]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	600b      	str	r3, [r1, #0]
 8002d80:	e015      	b.n	8002dae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d82:	4b26      	ldr	r3, [pc, #152]	; (8002e1c <HAL_RCC_OscConfig+0x270>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d88:	f7fe fb7c 	bl	8001484 <HAL_GetTick>
 8002d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d8e:	e008      	b.n	8002da2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d90:	f7fe fb78 	bl	8001484 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e17a      	b.n	8003098 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002da2:	4b1d      	ldr	r3, [pc, #116]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d1f0      	bne.n	8002d90 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0308 	and.w	r3, r3, #8
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d03a      	beq.n	8002e30 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	699b      	ldr	r3, [r3, #24]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d019      	beq.n	8002df6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dc2:	4b17      	ldr	r3, [pc, #92]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dc8:	f7fe fb5c 	bl	8001484 <HAL_GetTick>
 8002dcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dce:	e008      	b.n	8002de2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dd0:	f7fe fb58 	bl	8001484 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e15a      	b.n	8003098 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002de2:	4b0d      	ldr	r3, [pc, #52]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de6:	f003 0302 	and.w	r3, r3, #2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d0f0      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002dee:	2001      	movs	r0, #1
 8002df0:	f000 fada 	bl	80033a8 <RCC_Delay>
 8002df4:	e01c      	b.n	8002e30 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002df6:	4b0a      	ldr	r3, [pc, #40]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dfc:	f7fe fb42 	bl	8001484 <HAL_GetTick>
 8002e00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e02:	e00f      	b.n	8002e24 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e04:	f7fe fb3e 	bl	8001484 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d908      	bls.n	8002e24 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e140      	b.n	8003098 <HAL_RCC_OscConfig+0x4ec>
 8002e16:	bf00      	nop
 8002e18:	40021000 	.word	0x40021000
 8002e1c:	42420000 	.word	0x42420000
 8002e20:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e24:	4b9e      	ldr	r3, [pc, #632]	; (80030a0 <HAL_RCC_OscConfig+0x4f4>)
 8002e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e28:	f003 0302 	and.w	r3, r3, #2
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d1e9      	bne.n	8002e04 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0304 	and.w	r3, r3, #4
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	f000 80a6 	beq.w	8002f8a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e42:	4b97      	ldr	r3, [pc, #604]	; (80030a0 <HAL_RCC_OscConfig+0x4f4>)
 8002e44:	69db      	ldr	r3, [r3, #28]
 8002e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d10d      	bne.n	8002e6a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e4e:	4b94      	ldr	r3, [pc, #592]	; (80030a0 <HAL_RCC_OscConfig+0x4f4>)
 8002e50:	69db      	ldr	r3, [r3, #28]
 8002e52:	4a93      	ldr	r2, [pc, #588]	; (80030a0 <HAL_RCC_OscConfig+0x4f4>)
 8002e54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e58:	61d3      	str	r3, [r2, #28]
 8002e5a:	4b91      	ldr	r3, [pc, #580]	; (80030a0 <HAL_RCC_OscConfig+0x4f4>)
 8002e5c:	69db      	ldr	r3, [r3, #28]
 8002e5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e62:	60bb      	str	r3, [r7, #8]
 8002e64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e66:	2301      	movs	r3, #1
 8002e68:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e6a:	4b8e      	ldr	r3, [pc, #568]	; (80030a4 <HAL_RCC_OscConfig+0x4f8>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d118      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e76:	4b8b      	ldr	r3, [pc, #556]	; (80030a4 <HAL_RCC_OscConfig+0x4f8>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a8a      	ldr	r2, [pc, #552]	; (80030a4 <HAL_RCC_OscConfig+0x4f8>)
 8002e7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e82:	f7fe faff 	bl	8001484 <HAL_GetTick>
 8002e86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e88:	e008      	b.n	8002e9c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e8a:	f7fe fafb 	bl	8001484 <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	2b64      	cmp	r3, #100	; 0x64
 8002e96:	d901      	bls.n	8002e9c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	e0fd      	b.n	8003098 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e9c:	4b81      	ldr	r3, [pc, #516]	; (80030a4 <HAL_RCC_OscConfig+0x4f8>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d0f0      	beq.n	8002e8a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d106      	bne.n	8002ebe <HAL_RCC_OscConfig+0x312>
 8002eb0:	4b7b      	ldr	r3, [pc, #492]	; (80030a0 <HAL_RCC_OscConfig+0x4f4>)
 8002eb2:	6a1b      	ldr	r3, [r3, #32]
 8002eb4:	4a7a      	ldr	r2, [pc, #488]	; (80030a0 <HAL_RCC_OscConfig+0x4f4>)
 8002eb6:	f043 0301 	orr.w	r3, r3, #1
 8002eba:	6213      	str	r3, [r2, #32]
 8002ebc:	e02d      	b.n	8002f1a <HAL_RCC_OscConfig+0x36e>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d10c      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x334>
 8002ec6:	4b76      	ldr	r3, [pc, #472]	; (80030a0 <HAL_RCC_OscConfig+0x4f4>)
 8002ec8:	6a1b      	ldr	r3, [r3, #32]
 8002eca:	4a75      	ldr	r2, [pc, #468]	; (80030a0 <HAL_RCC_OscConfig+0x4f4>)
 8002ecc:	f023 0301 	bic.w	r3, r3, #1
 8002ed0:	6213      	str	r3, [r2, #32]
 8002ed2:	4b73      	ldr	r3, [pc, #460]	; (80030a0 <HAL_RCC_OscConfig+0x4f4>)
 8002ed4:	6a1b      	ldr	r3, [r3, #32]
 8002ed6:	4a72      	ldr	r2, [pc, #456]	; (80030a0 <HAL_RCC_OscConfig+0x4f4>)
 8002ed8:	f023 0304 	bic.w	r3, r3, #4
 8002edc:	6213      	str	r3, [r2, #32]
 8002ede:	e01c      	b.n	8002f1a <HAL_RCC_OscConfig+0x36e>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	2b05      	cmp	r3, #5
 8002ee6:	d10c      	bne.n	8002f02 <HAL_RCC_OscConfig+0x356>
 8002ee8:	4b6d      	ldr	r3, [pc, #436]	; (80030a0 <HAL_RCC_OscConfig+0x4f4>)
 8002eea:	6a1b      	ldr	r3, [r3, #32]
 8002eec:	4a6c      	ldr	r2, [pc, #432]	; (80030a0 <HAL_RCC_OscConfig+0x4f4>)
 8002eee:	f043 0304 	orr.w	r3, r3, #4
 8002ef2:	6213      	str	r3, [r2, #32]
 8002ef4:	4b6a      	ldr	r3, [pc, #424]	; (80030a0 <HAL_RCC_OscConfig+0x4f4>)
 8002ef6:	6a1b      	ldr	r3, [r3, #32]
 8002ef8:	4a69      	ldr	r2, [pc, #420]	; (80030a0 <HAL_RCC_OscConfig+0x4f4>)
 8002efa:	f043 0301 	orr.w	r3, r3, #1
 8002efe:	6213      	str	r3, [r2, #32]
 8002f00:	e00b      	b.n	8002f1a <HAL_RCC_OscConfig+0x36e>
 8002f02:	4b67      	ldr	r3, [pc, #412]	; (80030a0 <HAL_RCC_OscConfig+0x4f4>)
 8002f04:	6a1b      	ldr	r3, [r3, #32]
 8002f06:	4a66      	ldr	r2, [pc, #408]	; (80030a0 <HAL_RCC_OscConfig+0x4f4>)
 8002f08:	f023 0301 	bic.w	r3, r3, #1
 8002f0c:	6213      	str	r3, [r2, #32]
 8002f0e:	4b64      	ldr	r3, [pc, #400]	; (80030a0 <HAL_RCC_OscConfig+0x4f4>)
 8002f10:	6a1b      	ldr	r3, [r3, #32]
 8002f12:	4a63      	ldr	r2, [pc, #396]	; (80030a0 <HAL_RCC_OscConfig+0x4f4>)
 8002f14:	f023 0304 	bic.w	r3, r3, #4
 8002f18:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d015      	beq.n	8002f4e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f22:	f7fe faaf 	bl	8001484 <HAL_GetTick>
 8002f26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f28:	e00a      	b.n	8002f40 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f2a:	f7fe faab 	bl	8001484 <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d901      	bls.n	8002f40 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e0ab      	b.n	8003098 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f40:	4b57      	ldr	r3, [pc, #348]	; (80030a0 <HAL_RCC_OscConfig+0x4f4>)
 8002f42:	6a1b      	ldr	r3, [r3, #32]
 8002f44:	f003 0302 	and.w	r3, r3, #2
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d0ee      	beq.n	8002f2a <HAL_RCC_OscConfig+0x37e>
 8002f4c:	e014      	b.n	8002f78 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f4e:	f7fe fa99 	bl	8001484 <HAL_GetTick>
 8002f52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f54:	e00a      	b.n	8002f6c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f56:	f7fe fa95 	bl	8001484 <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d901      	bls.n	8002f6c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	e095      	b.n	8003098 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f6c:	4b4c      	ldr	r3, [pc, #304]	; (80030a0 <HAL_RCC_OscConfig+0x4f4>)
 8002f6e:	6a1b      	ldr	r3, [r3, #32]
 8002f70:	f003 0302 	and.w	r3, r3, #2
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d1ee      	bne.n	8002f56 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f78:	7dfb      	ldrb	r3, [r7, #23]
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d105      	bne.n	8002f8a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f7e:	4b48      	ldr	r3, [pc, #288]	; (80030a0 <HAL_RCC_OscConfig+0x4f4>)
 8002f80:	69db      	ldr	r3, [r3, #28]
 8002f82:	4a47      	ldr	r2, [pc, #284]	; (80030a0 <HAL_RCC_OscConfig+0x4f4>)
 8002f84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f88:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	69db      	ldr	r3, [r3, #28]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	f000 8081 	beq.w	8003096 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f94:	4b42      	ldr	r3, [pc, #264]	; (80030a0 <HAL_RCC_OscConfig+0x4f4>)
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f003 030c 	and.w	r3, r3, #12
 8002f9c:	2b08      	cmp	r3, #8
 8002f9e:	d061      	beq.n	8003064 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	69db      	ldr	r3, [r3, #28]
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d146      	bne.n	8003036 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fa8:	4b3f      	ldr	r3, [pc, #252]	; (80030a8 <HAL_RCC_OscConfig+0x4fc>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fae:	f7fe fa69 	bl	8001484 <HAL_GetTick>
 8002fb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fb4:	e008      	b.n	8002fc8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fb6:	f7fe fa65 	bl	8001484 <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d901      	bls.n	8002fc8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e067      	b.n	8003098 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fc8:	4b35      	ldr	r3, [pc, #212]	; (80030a0 <HAL_RCC_OscConfig+0x4f4>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d1f0      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a1b      	ldr	r3, [r3, #32]
 8002fd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fdc:	d108      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002fde:	4b30      	ldr	r3, [pc, #192]	; (80030a0 <HAL_RCC_OscConfig+0x4f4>)
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	492d      	ldr	r1, [pc, #180]	; (80030a0 <HAL_RCC_OscConfig+0x4f4>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ff0:	4b2b      	ldr	r3, [pc, #172]	; (80030a0 <HAL_RCC_OscConfig+0x4f4>)
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a19      	ldr	r1, [r3, #32]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003000:	430b      	orrs	r3, r1
 8003002:	4927      	ldr	r1, [pc, #156]	; (80030a0 <HAL_RCC_OscConfig+0x4f4>)
 8003004:	4313      	orrs	r3, r2
 8003006:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003008:	4b27      	ldr	r3, [pc, #156]	; (80030a8 <HAL_RCC_OscConfig+0x4fc>)
 800300a:	2201      	movs	r2, #1
 800300c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800300e:	f7fe fa39 	bl	8001484 <HAL_GetTick>
 8003012:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003014:	e008      	b.n	8003028 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003016:	f7fe fa35 	bl	8001484 <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	2b02      	cmp	r3, #2
 8003022:	d901      	bls.n	8003028 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	e037      	b.n	8003098 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003028:	4b1d      	ldr	r3, [pc, #116]	; (80030a0 <HAL_RCC_OscConfig+0x4f4>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d0f0      	beq.n	8003016 <HAL_RCC_OscConfig+0x46a>
 8003034:	e02f      	b.n	8003096 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003036:	4b1c      	ldr	r3, [pc, #112]	; (80030a8 <HAL_RCC_OscConfig+0x4fc>)
 8003038:	2200      	movs	r2, #0
 800303a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800303c:	f7fe fa22 	bl	8001484 <HAL_GetTick>
 8003040:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003042:	e008      	b.n	8003056 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003044:	f7fe fa1e 	bl	8001484 <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	2b02      	cmp	r3, #2
 8003050:	d901      	bls.n	8003056 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e020      	b.n	8003098 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003056:	4b12      	ldr	r3, [pc, #72]	; (80030a0 <HAL_RCC_OscConfig+0x4f4>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d1f0      	bne.n	8003044 <HAL_RCC_OscConfig+0x498>
 8003062:	e018      	b.n	8003096 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	69db      	ldr	r3, [r3, #28]
 8003068:	2b01      	cmp	r3, #1
 800306a:	d101      	bne.n	8003070 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e013      	b.n	8003098 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003070:	4b0b      	ldr	r3, [pc, #44]	; (80030a0 <HAL_RCC_OscConfig+0x4f4>)
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6a1b      	ldr	r3, [r3, #32]
 8003080:	429a      	cmp	r2, r3
 8003082:	d106      	bne.n	8003092 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800308e:	429a      	cmp	r2, r3
 8003090:	d001      	beq.n	8003096 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e000      	b.n	8003098 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003096:	2300      	movs	r3, #0
}
 8003098:	4618      	mov	r0, r3
 800309a:	3718      	adds	r7, #24
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	40021000 	.word	0x40021000
 80030a4:	40007000 	.word	0x40007000
 80030a8:	42420060 	.word	0x42420060

080030ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d101      	bne.n	80030c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e0d0      	b.n	8003262 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030c0:	4b6a      	ldr	r3, [pc, #424]	; (800326c <HAL_RCC_ClockConfig+0x1c0>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0307 	and.w	r3, r3, #7
 80030c8:	683a      	ldr	r2, [r7, #0]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d910      	bls.n	80030f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ce:	4b67      	ldr	r3, [pc, #412]	; (800326c <HAL_RCC_ClockConfig+0x1c0>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f023 0207 	bic.w	r2, r3, #7
 80030d6:	4965      	ldr	r1, [pc, #404]	; (800326c <HAL_RCC_ClockConfig+0x1c0>)
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	4313      	orrs	r3, r2
 80030dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030de:	4b63      	ldr	r3, [pc, #396]	; (800326c <HAL_RCC_ClockConfig+0x1c0>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0307 	and.w	r3, r3, #7
 80030e6:	683a      	ldr	r2, [r7, #0]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d001      	beq.n	80030f0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e0b8      	b.n	8003262 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0302 	and.w	r3, r3, #2
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d020      	beq.n	800313e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0304 	and.w	r3, r3, #4
 8003104:	2b00      	cmp	r3, #0
 8003106:	d005      	beq.n	8003114 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003108:	4b59      	ldr	r3, [pc, #356]	; (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	4a58      	ldr	r2, [pc, #352]	; (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 800310e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003112:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0308 	and.w	r3, r3, #8
 800311c:	2b00      	cmp	r3, #0
 800311e:	d005      	beq.n	800312c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003120:	4b53      	ldr	r3, [pc, #332]	; (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	4a52      	ldr	r2, [pc, #328]	; (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 8003126:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800312a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800312c:	4b50      	ldr	r3, [pc, #320]	; (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	494d      	ldr	r1, [pc, #308]	; (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 800313a:	4313      	orrs	r3, r2
 800313c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0301 	and.w	r3, r3, #1
 8003146:	2b00      	cmp	r3, #0
 8003148:	d040      	beq.n	80031cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	2b01      	cmp	r3, #1
 8003150:	d107      	bne.n	8003162 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003152:	4b47      	ldr	r3, [pc, #284]	; (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d115      	bne.n	800318a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e07f      	b.n	8003262 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	2b02      	cmp	r3, #2
 8003168:	d107      	bne.n	800317a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800316a:	4b41      	ldr	r3, [pc, #260]	; (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d109      	bne.n	800318a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e073      	b.n	8003262 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800317a:	4b3d      	ldr	r3, [pc, #244]	; (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0302 	and.w	r3, r3, #2
 8003182:	2b00      	cmp	r3, #0
 8003184:	d101      	bne.n	800318a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e06b      	b.n	8003262 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800318a:	4b39      	ldr	r3, [pc, #228]	; (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f023 0203 	bic.w	r2, r3, #3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	4936      	ldr	r1, [pc, #216]	; (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 8003198:	4313      	orrs	r3, r2
 800319a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800319c:	f7fe f972 	bl	8001484 <HAL_GetTick>
 80031a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031a2:	e00a      	b.n	80031ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031a4:	f7fe f96e 	bl	8001484 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d901      	bls.n	80031ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e053      	b.n	8003262 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ba:	4b2d      	ldr	r3, [pc, #180]	; (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f003 020c 	and.w	r2, r3, #12
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d1eb      	bne.n	80031a4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031cc:	4b27      	ldr	r3, [pc, #156]	; (800326c <HAL_RCC_ClockConfig+0x1c0>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0307 	and.w	r3, r3, #7
 80031d4:	683a      	ldr	r2, [r7, #0]
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d210      	bcs.n	80031fc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031da:	4b24      	ldr	r3, [pc, #144]	; (800326c <HAL_RCC_ClockConfig+0x1c0>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f023 0207 	bic.w	r2, r3, #7
 80031e2:	4922      	ldr	r1, [pc, #136]	; (800326c <HAL_RCC_ClockConfig+0x1c0>)
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ea:	4b20      	ldr	r3, [pc, #128]	; (800326c <HAL_RCC_ClockConfig+0x1c0>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0307 	and.w	r3, r3, #7
 80031f2:	683a      	ldr	r2, [r7, #0]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d001      	beq.n	80031fc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e032      	b.n	8003262 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0304 	and.w	r3, r3, #4
 8003204:	2b00      	cmp	r3, #0
 8003206:	d008      	beq.n	800321a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003208:	4b19      	ldr	r3, [pc, #100]	; (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	4916      	ldr	r1, [pc, #88]	; (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 8003216:	4313      	orrs	r3, r2
 8003218:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0308 	and.w	r3, r3, #8
 8003222:	2b00      	cmp	r3, #0
 8003224:	d009      	beq.n	800323a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003226:	4b12      	ldr	r3, [pc, #72]	; (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	00db      	lsls	r3, r3, #3
 8003234:	490e      	ldr	r1, [pc, #56]	; (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 8003236:	4313      	orrs	r3, r2
 8003238:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800323a:	f000 f821 	bl	8003280 <HAL_RCC_GetSysClockFreq>
 800323e:	4601      	mov	r1, r0
 8003240:	4b0b      	ldr	r3, [pc, #44]	; (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	091b      	lsrs	r3, r3, #4
 8003246:	f003 030f 	and.w	r3, r3, #15
 800324a:	4a0a      	ldr	r2, [pc, #40]	; (8003274 <HAL_RCC_ClockConfig+0x1c8>)
 800324c:	5cd3      	ldrb	r3, [r2, r3]
 800324e:	fa21 f303 	lsr.w	r3, r1, r3
 8003252:	4a09      	ldr	r2, [pc, #36]	; (8003278 <HAL_RCC_ClockConfig+0x1cc>)
 8003254:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003256:	4b09      	ldr	r3, [pc, #36]	; (800327c <HAL_RCC_ClockConfig+0x1d0>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4618      	mov	r0, r3
 800325c:	f7fe f8d0 	bl	8001400 <HAL_InitTick>

  return HAL_OK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	3710      	adds	r7, #16
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	40022000 	.word	0x40022000
 8003270:	40021000 	.word	0x40021000
 8003274:	0800903c 	.word	0x0800903c
 8003278:	20000000 	.word	0x20000000
 800327c:	20000004 	.word	0x20000004

08003280 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003280:	b490      	push	{r4, r7}
 8003282:	b08a      	sub	sp, #40	; 0x28
 8003284:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003286:	4b2a      	ldr	r3, [pc, #168]	; (8003330 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003288:	1d3c      	adds	r4, r7, #4
 800328a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800328c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003290:	4b28      	ldr	r3, [pc, #160]	; (8003334 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003292:	881b      	ldrh	r3, [r3, #0]
 8003294:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003296:	2300      	movs	r3, #0
 8003298:	61fb      	str	r3, [r7, #28]
 800329a:	2300      	movs	r3, #0
 800329c:	61bb      	str	r3, [r7, #24]
 800329e:	2300      	movs	r3, #0
 80032a0:	627b      	str	r3, [r7, #36]	; 0x24
 80032a2:	2300      	movs	r3, #0
 80032a4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80032a6:	2300      	movs	r3, #0
 80032a8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80032aa:	4b23      	ldr	r3, [pc, #140]	; (8003338 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	f003 030c 	and.w	r3, r3, #12
 80032b6:	2b04      	cmp	r3, #4
 80032b8:	d002      	beq.n	80032c0 <HAL_RCC_GetSysClockFreq+0x40>
 80032ba:	2b08      	cmp	r3, #8
 80032bc:	d003      	beq.n	80032c6 <HAL_RCC_GetSysClockFreq+0x46>
 80032be:	e02d      	b.n	800331c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80032c0:	4b1e      	ldr	r3, [pc, #120]	; (800333c <HAL_RCC_GetSysClockFreq+0xbc>)
 80032c2:	623b      	str	r3, [r7, #32]
      break;
 80032c4:	e02d      	b.n	8003322 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	0c9b      	lsrs	r3, r3, #18
 80032ca:	f003 030f 	and.w	r3, r3, #15
 80032ce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80032d2:	4413      	add	r3, r2
 80032d4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80032d8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d013      	beq.n	800330c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80032e4:	4b14      	ldr	r3, [pc, #80]	; (8003338 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	0c5b      	lsrs	r3, r3, #17
 80032ea:	f003 0301 	and.w	r3, r3, #1
 80032ee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80032f2:	4413      	add	r3, r2
 80032f4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80032f8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	4a0f      	ldr	r2, [pc, #60]	; (800333c <HAL_RCC_GetSysClockFreq+0xbc>)
 80032fe:	fb02 f203 	mul.w	r2, r2, r3
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	fbb2 f3f3 	udiv	r3, r2, r3
 8003308:	627b      	str	r3, [r7, #36]	; 0x24
 800330a:	e004      	b.n	8003316 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	4a0c      	ldr	r2, [pc, #48]	; (8003340 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003310:	fb02 f303 	mul.w	r3, r2, r3
 8003314:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003318:	623b      	str	r3, [r7, #32]
      break;
 800331a:	e002      	b.n	8003322 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800331c:	4b07      	ldr	r3, [pc, #28]	; (800333c <HAL_RCC_GetSysClockFreq+0xbc>)
 800331e:	623b      	str	r3, [r7, #32]
      break;
 8003320:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003322:	6a3b      	ldr	r3, [r7, #32]
}
 8003324:	4618      	mov	r0, r3
 8003326:	3728      	adds	r7, #40	; 0x28
 8003328:	46bd      	mov	sp, r7
 800332a:	bc90      	pop	{r4, r7}
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	08008f78 	.word	0x08008f78
 8003334:	08008f88 	.word	0x08008f88
 8003338:	40021000 	.word	0x40021000
 800333c:	007a1200 	.word	0x007a1200
 8003340:	003d0900 	.word	0x003d0900

08003344 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003344:	b480      	push	{r7}
 8003346:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003348:	4b02      	ldr	r3, [pc, #8]	; (8003354 <HAL_RCC_GetHCLKFreq+0x10>)
 800334a:	681b      	ldr	r3, [r3, #0]
}
 800334c:	4618      	mov	r0, r3
 800334e:	46bd      	mov	sp, r7
 8003350:	bc80      	pop	{r7}
 8003352:	4770      	bx	lr
 8003354:	20000000 	.word	0x20000000

08003358 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800335c:	f7ff fff2 	bl	8003344 <HAL_RCC_GetHCLKFreq>
 8003360:	4601      	mov	r1, r0
 8003362:	4b05      	ldr	r3, [pc, #20]	; (8003378 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	0a1b      	lsrs	r3, r3, #8
 8003368:	f003 0307 	and.w	r3, r3, #7
 800336c:	4a03      	ldr	r2, [pc, #12]	; (800337c <HAL_RCC_GetPCLK1Freq+0x24>)
 800336e:	5cd3      	ldrb	r3, [r2, r3]
 8003370:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003374:	4618      	mov	r0, r3
 8003376:	bd80      	pop	{r7, pc}
 8003378:	40021000 	.word	0x40021000
 800337c:	0800904c 	.word	0x0800904c

08003380 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003384:	f7ff ffde 	bl	8003344 <HAL_RCC_GetHCLKFreq>
 8003388:	4601      	mov	r1, r0
 800338a:	4b05      	ldr	r3, [pc, #20]	; (80033a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	0adb      	lsrs	r3, r3, #11
 8003390:	f003 0307 	and.w	r3, r3, #7
 8003394:	4a03      	ldr	r2, [pc, #12]	; (80033a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003396:	5cd3      	ldrb	r3, [r2, r3]
 8003398:	fa21 f303 	lsr.w	r3, r1, r3
}
 800339c:	4618      	mov	r0, r3
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	40021000 	.word	0x40021000
 80033a4:	0800904c 	.word	0x0800904c

080033a8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b085      	sub	sp, #20
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80033b0:	4b0a      	ldr	r3, [pc, #40]	; (80033dc <RCC_Delay+0x34>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a0a      	ldr	r2, [pc, #40]	; (80033e0 <RCC_Delay+0x38>)
 80033b6:	fba2 2303 	umull	r2, r3, r2, r3
 80033ba:	0a5b      	lsrs	r3, r3, #9
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	fb02 f303 	mul.w	r3, r2, r3
 80033c2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80033c4:	bf00      	nop
  }
  while (Delay --);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	1e5a      	subs	r2, r3, #1
 80033ca:	60fa      	str	r2, [r7, #12]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d1f9      	bne.n	80033c4 <RCC_Delay+0x1c>
}
 80033d0:	bf00      	nop
 80033d2:	3714      	adds	r7, #20
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bc80      	pop	{r7}
 80033d8:	4770      	bx	lr
 80033da:	bf00      	nop
 80033dc:	20000000 	.word	0x20000000
 80033e0:	10624dd3 	.word	0x10624dd3

080033e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b086      	sub	sp, #24
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80033ec:	2300      	movs	r3, #0
 80033ee:	613b      	str	r3, [r7, #16]
 80033f0:	2300      	movs	r3, #0
 80033f2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0301 	and.w	r3, r3, #1
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d07d      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003400:	2300      	movs	r3, #0
 8003402:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003404:	4b4f      	ldr	r3, [pc, #316]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003406:	69db      	ldr	r3, [r3, #28]
 8003408:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800340c:	2b00      	cmp	r3, #0
 800340e:	d10d      	bne.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003410:	4b4c      	ldr	r3, [pc, #304]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003412:	69db      	ldr	r3, [r3, #28]
 8003414:	4a4b      	ldr	r2, [pc, #300]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003416:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800341a:	61d3      	str	r3, [r2, #28]
 800341c:	4b49      	ldr	r3, [pc, #292]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800341e:	69db      	ldr	r3, [r3, #28]
 8003420:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003424:	60bb      	str	r3, [r7, #8]
 8003426:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003428:	2301      	movs	r3, #1
 800342a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800342c:	4b46      	ldr	r3, [pc, #280]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003434:	2b00      	cmp	r3, #0
 8003436:	d118      	bne.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003438:	4b43      	ldr	r3, [pc, #268]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a42      	ldr	r2, [pc, #264]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800343e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003442:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003444:	f7fe f81e 	bl	8001484 <HAL_GetTick>
 8003448:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800344a:	e008      	b.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800344c:	f7fe f81a 	bl	8001484 <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b64      	cmp	r3, #100	; 0x64
 8003458:	d901      	bls.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e06d      	b.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800345e:	4b3a      	ldr	r3, [pc, #232]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003466:	2b00      	cmp	r3, #0
 8003468:	d0f0      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800346a:	4b36      	ldr	r3, [pc, #216]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800346c:	6a1b      	ldr	r3, [r3, #32]
 800346e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003472:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d02e      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003482:	68fa      	ldr	r2, [r7, #12]
 8003484:	429a      	cmp	r2, r3
 8003486:	d027      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003488:	4b2e      	ldr	r3, [pc, #184]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800348a:	6a1b      	ldr	r3, [r3, #32]
 800348c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003490:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003492:	4b2e      	ldr	r3, [pc, #184]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003494:	2201      	movs	r2, #1
 8003496:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003498:	4b2c      	ldr	r3, [pc, #176]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800349a:	2200      	movs	r2, #0
 800349c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800349e:	4a29      	ldr	r2, [pc, #164]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f003 0301 	and.w	r3, r3, #1
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d014      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ae:	f7fd ffe9 	bl	8001484 <HAL_GetTick>
 80034b2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034b4:	e00a      	b.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034b6:	f7fd ffe5 	bl	8001484 <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d901      	bls.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	e036      	b.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034cc:	4b1d      	ldr	r3, [pc, #116]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ce:	6a1b      	ldr	r3, [r3, #32]
 80034d0:	f003 0302 	and.w	r3, r3, #2
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d0ee      	beq.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034d8:	4b1a      	ldr	r3, [pc, #104]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034da:	6a1b      	ldr	r3, [r3, #32]
 80034dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	4917      	ldr	r1, [pc, #92]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034e6:	4313      	orrs	r3, r2
 80034e8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80034ea:	7dfb      	ldrb	r3, [r7, #23]
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d105      	bne.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034f0:	4b14      	ldr	r3, [pc, #80]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034f2:	69db      	ldr	r3, [r3, #28]
 80034f4:	4a13      	ldr	r2, [pc, #76]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034fa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0302 	and.w	r3, r3, #2
 8003504:	2b00      	cmp	r3, #0
 8003506:	d008      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003508:	4b0e      	ldr	r3, [pc, #56]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	490b      	ldr	r1, [pc, #44]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003516:	4313      	orrs	r3, r2
 8003518:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0310 	and.w	r3, r3, #16
 8003522:	2b00      	cmp	r3, #0
 8003524:	d008      	beq.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003526:	4b07      	ldr	r3, [pc, #28]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	4904      	ldr	r1, [pc, #16]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003534:	4313      	orrs	r3, r2
 8003536:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3718      	adds	r7, #24
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	40021000 	.word	0x40021000
 8003548:	40007000 	.word	0x40007000
 800354c:	42420440 	.word	0x42420440

08003550 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d101      	bne.n	8003562 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e053      	b.n	800360a <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800356e:	b2db      	uxtb	r3, r3
 8003570:	2b00      	cmp	r3, #0
 8003572:	d106      	bne.n	8003582 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f7fd fa25 	bl	80009cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2202      	movs	r2, #2
 8003586:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003598:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685a      	ldr	r2, [r3, #4]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	431a      	orrs	r2, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	431a      	orrs	r2, r3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	691b      	ldr	r3, [r3, #16]
 80035ae:	431a      	orrs	r2, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	695b      	ldr	r3, [r3, #20]
 80035b4:	431a      	orrs	r2, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	699b      	ldr	r3, [r3, #24]
 80035ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035be:	431a      	orrs	r2, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	69db      	ldr	r3, [r3, #28]
 80035c4:	431a      	orrs	r2, r3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a1b      	ldr	r3, [r3, #32]
 80035ca:	ea42 0103 	orr.w	r1, r2, r3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	430a      	orrs	r2, r1
 80035d8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	699b      	ldr	r3, [r3, #24]
 80035de:	0c1a      	lsrs	r2, r3, #16
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f002 0204 	and.w	r2, r2, #4
 80035e8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	69da      	ldr	r2, [r3, #28]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035f8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003608:	2300      	movs	r3, #0
}
 800360a:	4618      	mov	r0, r3
 800360c:	3708      	adds	r7, #8
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}

08003612 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003612:	b580      	push	{r7, lr}
 8003614:	b088      	sub	sp, #32
 8003616:	af02      	add	r7, sp, #8
 8003618:	60f8      	str	r0, [r7, #12]
 800361a:	60b9      	str	r1, [r7, #8]
 800361c:	603b      	str	r3, [r7, #0]
 800361e:	4613      	mov	r3, r2
 8003620:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003622:	2300      	movs	r3, #0
 8003624:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800362e:	d112      	bne.n	8003656 <HAL_SPI_Receive+0x44>
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d10e      	bne.n	8003656 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2204      	movs	r2, #4
 800363c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003640:	88fa      	ldrh	r2, [r7, #6]
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	9300      	str	r3, [sp, #0]
 8003646:	4613      	mov	r3, r2
 8003648:	68ba      	ldr	r2, [r7, #8]
 800364a:	68b9      	ldr	r1, [r7, #8]
 800364c:	68f8      	ldr	r0, [r7, #12]
 800364e:	f000 f8e9 	bl	8003824 <HAL_SPI_TransmitReceive>
 8003652:	4603      	mov	r3, r0
 8003654:	e0e2      	b.n	800381c <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800365c:	2b01      	cmp	r3, #1
 800365e:	d101      	bne.n	8003664 <HAL_SPI_Receive+0x52>
 8003660:	2302      	movs	r3, #2
 8003662:	e0db      	b.n	800381c <HAL_SPI_Receive+0x20a>
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800366c:	f7fd ff0a 	bl	8001484 <HAL_GetTick>
 8003670:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003678:	b2db      	uxtb	r3, r3
 800367a:	2b01      	cmp	r3, #1
 800367c:	d002      	beq.n	8003684 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800367e:	2302      	movs	r3, #2
 8003680:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003682:	e0c2      	b.n	800380a <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d002      	beq.n	8003690 <HAL_SPI_Receive+0x7e>
 800368a:	88fb      	ldrh	r3, [r7, #6]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d102      	bne.n	8003696 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003694:	e0b9      	b.n	800380a <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2204      	movs	r2, #4
 800369a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2200      	movs	r2, #0
 80036a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	68ba      	ldr	r2, [r7, #8]
 80036a8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	88fa      	ldrh	r2, [r7, #6]
 80036ae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	88fa      	ldrh	r2, [r7, #6]
 80036b4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2200      	movs	r2, #0
 80036ba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2200      	movs	r2, #0
 80036c0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2200      	movs	r2, #0
 80036c6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2200      	movs	r2, #0
 80036cc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2200      	movs	r2, #0
 80036d2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036dc:	d107      	bne.n	80036ee <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80036ec:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036f8:	2b40      	cmp	r3, #64	; 0x40
 80036fa:	d007      	beq.n	800370c <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800370a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d162      	bne.n	80037da <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003714:	e02e      	b.n	8003774 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	f003 0301 	and.w	r3, r3, #1
 8003720:	2b01      	cmp	r3, #1
 8003722:	d115      	bne.n	8003750 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f103 020c 	add.w	r2, r3, #12
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003730:	7812      	ldrb	r2, [r2, #0]
 8003732:	b2d2      	uxtb	r2, r2
 8003734:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800373a:	1c5a      	adds	r2, r3, #1
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003744:	b29b      	uxth	r3, r3
 8003746:	3b01      	subs	r3, #1
 8003748:	b29a      	uxth	r2, r3
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800374e:	e011      	b.n	8003774 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003750:	f7fd fe98 	bl	8001484 <HAL_GetTick>
 8003754:	4602      	mov	r2, r0
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	683a      	ldr	r2, [r7, #0]
 800375c:	429a      	cmp	r2, r3
 800375e:	d803      	bhi.n	8003768 <HAL_SPI_Receive+0x156>
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003766:	d102      	bne.n	800376e <HAL_SPI_Receive+0x15c>
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d102      	bne.n	8003774 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003772:	e04a      	b.n	800380a <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003778:	b29b      	uxth	r3, r3
 800377a:	2b00      	cmp	r3, #0
 800377c:	d1cb      	bne.n	8003716 <HAL_SPI_Receive+0x104>
 800377e:	e031      	b.n	80037e4 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	f003 0301 	and.w	r3, r3, #1
 800378a:	2b01      	cmp	r3, #1
 800378c:	d113      	bne.n	80037b6 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68da      	ldr	r2, [r3, #12]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003798:	b292      	uxth	r2, r2
 800379a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a0:	1c9a      	adds	r2, r3, #2
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	3b01      	subs	r3, #1
 80037ae:	b29a      	uxth	r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80037b4:	e011      	b.n	80037da <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80037b6:	f7fd fe65 	bl	8001484 <HAL_GetTick>
 80037ba:	4602      	mov	r2, r0
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	683a      	ldr	r2, [r7, #0]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d803      	bhi.n	80037ce <HAL_SPI_Receive+0x1bc>
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037cc:	d102      	bne.n	80037d4 <HAL_SPI_Receive+0x1c2>
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d102      	bne.n	80037da <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80037d4:	2303      	movs	r3, #3
 80037d6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80037d8:	e017      	b.n	800380a <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037de:	b29b      	uxth	r3, r3
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d1cd      	bne.n	8003780 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80037e4:	693a      	ldr	r2, [r7, #16]
 80037e6:	6839      	ldr	r1, [r7, #0]
 80037e8:	68f8      	ldr	r0, [r7, #12]
 80037ea:	f000 fa27 	bl	8003c3c <SPI_EndRxTransaction>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d002      	beq.n	80037fa <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2220      	movs	r2, #32
 80037f8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d002      	beq.n	8003808 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	75fb      	strb	r3, [r7, #23]
 8003806:	e000      	b.n	800380a <HAL_SPI_Receive+0x1f8>
  }

error :
 8003808:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2201      	movs	r2, #1
 800380e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800381a:	7dfb      	ldrb	r3, [r7, #23]
}
 800381c:	4618      	mov	r0, r3
 800381e:	3718      	adds	r7, #24
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}

08003824 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b08c      	sub	sp, #48	; 0x30
 8003828:	af00      	add	r7, sp, #0
 800382a:	60f8      	str	r0, [r7, #12]
 800382c:	60b9      	str	r1, [r7, #8]
 800382e:	607a      	str	r2, [r7, #4]
 8003830:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003832:	2301      	movs	r3, #1
 8003834:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003836:	2300      	movs	r3, #0
 8003838:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003842:	2b01      	cmp	r3, #1
 8003844:	d101      	bne.n	800384a <HAL_SPI_TransmitReceive+0x26>
 8003846:	2302      	movs	r3, #2
 8003848:	e18a      	b.n	8003b60 <HAL_SPI_TransmitReceive+0x33c>
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2201      	movs	r2, #1
 800384e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003852:	f7fd fe17 	bl	8001484 <HAL_GetTick>
 8003856:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800385e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003868:	887b      	ldrh	r3, [r7, #2]
 800386a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800386c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003870:	2b01      	cmp	r3, #1
 8003872:	d00f      	beq.n	8003894 <HAL_SPI_TransmitReceive+0x70>
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800387a:	d107      	bne.n	800388c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d103      	bne.n	800388c <HAL_SPI_TransmitReceive+0x68>
 8003884:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003888:	2b04      	cmp	r3, #4
 800388a:	d003      	beq.n	8003894 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800388c:	2302      	movs	r3, #2
 800388e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003892:	e15b      	b.n	8003b4c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d005      	beq.n	80038a6 <HAL_SPI_TransmitReceive+0x82>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d002      	beq.n	80038a6 <HAL_SPI_TransmitReceive+0x82>
 80038a0:	887b      	ldrh	r3, [r7, #2]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d103      	bne.n	80038ae <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80038ac:	e14e      	b.n	8003b4c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	2b04      	cmp	r3, #4
 80038b8:	d003      	beq.n	80038c2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2205      	movs	r2, #5
 80038be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2200      	movs	r2, #0
 80038c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	887a      	ldrh	r2, [r7, #2]
 80038d2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	887a      	ldrh	r2, [r7, #2]
 80038d8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	68ba      	ldr	r2, [r7, #8]
 80038de:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	887a      	ldrh	r2, [r7, #2]
 80038e4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	887a      	ldrh	r2, [r7, #2]
 80038ea:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2200      	movs	r2, #0
 80038f0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2200      	movs	r2, #0
 80038f6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003902:	2b40      	cmp	r3, #64	; 0x40
 8003904:	d007      	beq.n	8003916 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003914:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800391e:	d178      	bne.n	8003a12 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d002      	beq.n	800392e <HAL_SPI_TransmitReceive+0x10a>
 8003928:	8b7b      	ldrh	r3, [r7, #26]
 800392a:	2b01      	cmp	r3, #1
 800392c:	d166      	bne.n	80039fc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003932:	881a      	ldrh	r2, [r3, #0]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393e:	1c9a      	adds	r2, r3, #2
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003948:	b29b      	uxth	r3, r3
 800394a:	3b01      	subs	r3, #1
 800394c:	b29a      	uxth	r2, r3
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003952:	e053      	b.n	80039fc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	f003 0302 	and.w	r3, r3, #2
 800395e:	2b02      	cmp	r3, #2
 8003960:	d11b      	bne.n	800399a <HAL_SPI_TransmitReceive+0x176>
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003966:	b29b      	uxth	r3, r3
 8003968:	2b00      	cmp	r3, #0
 800396a:	d016      	beq.n	800399a <HAL_SPI_TransmitReceive+0x176>
 800396c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800396e:	2b01      	cmp	r3, #1
 8003970:	d113      	bne.n	800399a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003976:	881a      	ldrh	r2, [r3, #0]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003982:	1c9a      	adds	r2, r3, #2
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800398c:	b29b      	uxth	r3, r3
 800398e:	3b01      	subs	r3, #1
 8003990:	b29a      	uxth	r2, r3
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003996:	2300      	movs	r3, #0
 8003998:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	f003 0301 	and.w	r3, r3, #1
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d119      	bne.n	80039dc <HAL_SPI_TransmitReceive+0x1b8>
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d014      	beq.n	80039dc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	68da      	ldr	r2, [r3, #12]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039bc:	b292      	uxth	r2, r2
 80039be:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c4:	1c9a      	adds	r2, r3, #2
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	3b01      	subs	r3, #1
 80039d2:	b29a      	uxth	r2, r3
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80039d8:	2301      	movs	r3, #1
 80039da:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80039dc:	f7fd fd52 	bl	8001484 <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d807      	bhi.n	80039fc <HAL_SPI_TransmitReceive+0x1d8>
 80039ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039f2:	d003      	beq.n	80039fc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80039f4:	2303      	movs	r3, #3
 80039f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80039fa:	e0a7      	b.n	8003b4c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d1a6      	bne.n	8003954 <HAL_SPI_TransmitReceive+0x130>
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d1a1      	bne.n	8003954 <HAL_SPI_TransmitReceive+0x130>
 8003a10:	e07c      	b.n	8003b0c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d002      	beq.n	8003a20 <HAL_SPI_TransmitReceive+0x1fc>
 8003a1a:	8b7b      	ldrh	r3, [r7, #26]
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d16b      	bne.n	8003af8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	330c      	adds	r3, #12
 8003a2a:	7812      	ldrb	r2, [r2, #0]
 8003a2c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a32:	1c5a      	adds	r2, r3, #1
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	3b01      	subs	r3, #1
 8003a40:	b29a      	uxth	r2, r3
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a46:	e057      	b.n	8003af8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	f003 0302 	and.w	r3, r3, #2
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d11c      	bne.n	8003a90 <HAL_SPI_TransmitReceive+0x26c>
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d017      	beq.n	8003a90 <HAL_SPI_TransmitReceive+0x26c>
 8003a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d114      	bne.n	8003a90 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	330c      	adds	r3, #12
 8003a70:	7812      	ldrb	r2, [r2, #0]
 8003a72:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a78:	1c5a      	adds	r2, r3, #1
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	3b01      	subs	r3, #1
 8003a86:	b29a      	uxth	r2, r3
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d119      	bne.n	8003ad2 <HAL_SPI_TransmitReceive+0x2ae>
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d014      	beq.n	8003ad2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	68da      	ldr	r2, [r3, #12]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab2:	b2d2      	uxtb	r2, r2
 8003ab4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aba:	1c5a      	adds	r2, r3, #1
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	3b01      	subs	r3, #1
 8003ac8:	b29a      	uxth	r2, r3
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003ad2:	f7fd fcd7 	bl	8001484 <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d803      	bhi.n	8003aea <HAL_SPI_TransmitReceive+0x2c6>
 8003ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ae8:	d102      	bne.n	8003af0 <HAL_SPI_TransmitReceive+0x2cc>
 8003aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d103      	bne.n	8003af8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003af0:	2303      	movs	r3, #3
 8003af2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003af6:	e029      	b.n	8003b4c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d1a2      	bne.n	8003a48 <HAL_SPI_TransmitReceive+0x224>
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d19d      	bne.n	8003a48 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b0e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003b10:	68f8      	ldr	r0, [r7, #12]
 8003b12:	f000 f8e5 	bl	8003ce0 <SPI_EndRxTxTransaction>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d006      	beq.n	8003b2a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2220      	movs	r2, #32
 8003b26:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003b28:	e010      	b.n	8003b4c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d10b      	bne.n	8003b4a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b32:	2300      	movs	r3, #0
 8003b34:	617b      	str	r3, [r7, #20]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	617b      	str	r3, [r7, #20]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	617b      	str	r3, [r7, #20]
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	e000      	b.n	8003b4c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003b4a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2200      	movs	r2, #0
 8003b58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003b5c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3730      	adds	r7, #48	; 0x30
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}

08003b68 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b084      	sub	sp, #16
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	60b9      	str	r1, [r7, #8]
 8003b72:	603b      	str	r3, [r7, #0]
 8003b74:	4613      	mov	r3, r2
 8003b76:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b78:	e04c      	b.n	8003c14 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b80:	d048      	beq.n	8003c14 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003b82:	f7fd fc7f 	bl	8001484 <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	69bb      	ldr	r3, [r7, #24]
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	683a      	ldr	r2, [r7, #0]
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d902      	bls.n	8003b98 <SPI_WaitFlagStateUntilTimeout+0x30>
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d13d      	bne.n	8003c14 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	685a      	ldr	r2, [r3, #4]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003ba6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bb0:	d111      	bne.n	8003bd6 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bba:	d004      	beq.n	8003bc6 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bc4:	d107      	bne.n	8003bd6 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bd4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bde:	d10f      	bne.n	8003c00 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003bee:	601a      	str	r2, [r3, #0]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003bfe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003c10:	2303      	movs	r3, #3
 8003c12:	e00f      	b.n	8003c34 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	689a      	ldr	r2, [r3, #8]
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	68ba      	ldr	r2, [r7, #8]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	bf0c      	ite	eq
 8003c24:	2301      	moveq	r3, #1
 8003c26:	2300      	movne	r3, #0
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	79fb      	ldrb	r3, [r7, #7]
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d1a3      	bne.n	8003b7a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003c32:	2300      	movs	r3, #0
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3710      	adds	r7, #16
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b086      	sub	sp, #24
 8003c40:	af02      	add	r7, sp, #8
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c50:	d111      	bne.n	8003c76 <SPI_EndRxTransaction+0x3a>
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c5a:	d004      	beq.n	8003c66 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c64:	d107      	bne.n	8003c76 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c74:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c7e:	d117      	bne.n	8003cb0 <SPI_EndRxTransaction+0x74>
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c88:	d112      	bne.n	8003cb0 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	9300      	str	r3, [sp, #0]
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	2200      	movs	r2, #0
 8003c92:	2101      	movs	r1, #1
 8003c94:	68f8      	ldr	r0, [r7, #12]
 8003c96:	f7ff ff67 	bl	8003b68 <SPI_WaitFlagStateUntilTimeout>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d01a      	beq.n	8003cd6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ca4:	f043 0220 	orr.w	r2, r3, #32
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	e013      	b.n	8003cd8 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	9300      	str	r3, [sp, #0]
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	2180      	movs	r1, #128	; 0x80
 8003cba:	68f8      	ldr	r0, [r7, #12]
 8003cbc:	f7ff ff54 	bl	8003b68 <SPI_WaitFlagStateUntilTimeout>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d007      	beq.n	8003cd6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cca:	f043 0220 	orr.w	r2, r3, #32
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e000      	b.n	8003cd8 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8003cd6:	2300      	movs	r3, #0
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3710      	adds	r7, #16
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b086      	sub	sp, #24
 8003ce4:	af02      	add	r7, sp, #8
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	60b9      	str	r1, [r7, #8]
 8003cea:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	9300      	str	r3, [sp, #0]
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	2180      	movs	r1, #128	; 0x80
 8003cf6:	68f8      	ldr	r0, [r7, #12]
 8003cf8:	f7ff ff36 	bl	8003b68 <SPI_WaitFlagStateUntilTimeout>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d007      	beq.n	8003d12 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d06:	f043 0220 	orr.w	r2, r3, #32
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e000      	b.n	8003d14 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003d12:	2300      	movs	r3, #0
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3710      	adds	r7, #16
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}

08003d1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d101      	bne.n	8003d2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e01d      	b.n	8003d6a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d106      	bne.n	8003d48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f7fc febc 	bl	8000ac0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2202      	movs	r2, #2
 8003d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	3304      	adds	r3, #4
 8003d58:	4619      	mov	r1, r3
 8003d5a:	4610      	mov	r0, r2
 8003d5c:	f000 fb12 	bl	8004384 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3708      	adds	r7, #8
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}

08003d72 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d72:	b480      	push	{r7}
 8003d74:	b085      	sub	sp, #20
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	68da      	ldr	r2, [r3, #12]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f042 0201 	orr.w	r2, r2, #1
 8003d88:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	f003 0307 	and.w	r3, r3, #7
 8003d94:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2b06      	cmp	r3, #6
 8003d9a:	d007      	beq.n	8003dac <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f042 0201 	orr.w	r2, r2, #1
 8003daa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003dac:	2300      	movs	r3, #0
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3714      	adds	r7, #20
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bc80      	pop	{r7}
 8003db6:	4770      	bx	lr

08003db8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d101      	bne.n	8003dca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e01d      	b.n	8003e06 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d106      	bne.n	8003de4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 f815 	bl	8003e0e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2202      	movs	r2, #2
 8003de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	3304      	adds	r3, #4
 8003df4:	4619      	mov	r1, r3
 8003df6:	4610      	mov	r0, r2
 8003df8:	f000 fac4 	bl	8004384 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3708      	adds	r7, #8
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}

08003e0e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003e0e:	b480      	push	{r7}
 8003e10:	b083      	sub	sp, #12
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003e16:	bf00      	nop
 8003e18:	370c      	adds	r7, #12
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bc80      	pop	{r7}
 8003e1e:	4770      	bx	lr

08003e20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	691b      	ldr	r3, [r3, #16]
 8003e2e:	f003 0302 	and.w	r3, r3, #2
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d122      	bne.n	8003e7c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	f003 0302 	and.w	r3, r3, #2
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	d11b      	bne.n	8003e7c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f06f 0202 	mvn.w	r2, #2
 8003e4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2201      	movs	r2, #1
 8003e52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	699b      	ldr	r3, [r3, #24]
 8003e5a:	f003 0303 	and.w	r3, r3, #3
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d003      	beq.n	8003e6a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f000 fa73 	bl	800434e <HAL_TIM_IC_CaptureCallback>
 8003e68:	e005      	b.n	8003e76 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f000 fa66 	bl	800433c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f000 fa75 	bl	8004360 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	f003 0304 	and.w	r3, r3, #4
 8003e86:	2b04      	cmp	r3, #4
 8003e88:	d122      	bne.n	8003ed0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	f003 0304 	and.w	r3, r3, #4
 8003e94:	2b04      	cmp	r3, #4
 8003e96:	d11b      	bne.n	8003ed0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f06f 0204 	mvn.w	r2, #4
 8003ea0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2202      	movs	r2, #2
 8003ea6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	699b      	ldr	r3, [r3, #24]
 8003eae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d003      	beq.n	8003ebe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 fa49 	bl	800434e <HAL_TIM_IC_CaptureCallback>
 8003ebc:	e005      	b.n	8003eca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 fa3c 	bl	800433c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f000 fa4b 	bl	8004360 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	f003 0308 	and.w	r3, r3, #8
 8003eda:	2b08      	cmp	r3, #8
 8003edc:	d122      	bne.n	8003f24 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	f003 0308 	and.w	r3, r3, #8
 8003ee8:	2b08      	cmp	r3, #8
 8003eea:	d11b      	bne.n	8003f24 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f06f 0208 	mvn.w	r2, #8
 8003ef4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2204      	movs	r2, #4
 8003efa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	69db      	ldr	r3, [r3, #28]
 8003f02:	f003 0303 	and.w	r3, r3, #3
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d003      	beq.n	8003f12 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f000 fa1f 	bl	800434e <HAL_TIM_IC_CaptureCallback>
 8003f10:	e005      	b.n	8003f1e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f000 fa12 	bl	800433c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f000 fa21 	bl	8004360 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	f003 0310 	and.w	r3, r3, #16
 8003f2e:	2b10      	cmp	r3, #16
 8003f30:	d122      	bne.n	8003f78 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	f003 0310 	and.w	r3, r3, #16
 8003f3c:	2b10      	cmp	r3, #16
 8003f3e:	d11b      	bne.n	8003f78 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f06f 0210 	mvn.w	r2, #16
 8003f48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2208      	movs	r2, #8
 8003f4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	69db      	ldr	r3, [r3, #28]
 8003f56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d003      	beq.n	8003f66 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f000 f9f5 	bl	800434e <HAL_TIM_IC_CaptureCallback>
 8003f64:	e005      	b.n	8003f72 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 f9e8 	bl	800433c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f000 f9f7 	bl	8004360 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	f003 0301 	and.w	r3, r3, #1
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d10e      	bne.n	8003fa4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	f003 0301 	and.w	r3, r3, #1
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d107      	bne.n	8003fa4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f06f 0201 	mvn.w	r2, #1
 8003f9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f000 f9c3 	bl	800432a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fae:	2b80      	cmp	r3, #128	; 0x80
 8003fb0:	d10e      	bne.n	8003fd0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fbc:	2b80      	cmp	r3, #128	; 0x80
 8003fbe:	d107      	bne.n	8003fd0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003fc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f000 fca7 	bl	800491e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fda:	2b40      	cmp	r3, #64	; 0x40
 8003fdc:	d10e      	bne.n	8003ffc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fe8:	2b40      	cmp	r3, #64	; 0x40
 8003fea:	d107      	bne.n	8003ffc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ff4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 f9bb 	bl	8004372 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	f003 0320 	and.w	r3, r3, #32
 8004006:	2b20      	cmp	r3, #32
 8004008:	d10e      	bne.n	8004028 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	f003 0320 	and.w	r3, r3, #32
 8004014:	2b20      	cmp	r3, #32
 8004016:	d107      	bne.n	8004028 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f06f 0220 	mvn.w	r2, #32
 8004020:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 fc72 	bl	800490c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004028:	bf00      	nop
 800402a:	3708      	adds	r7, #8
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	60b9      	str	r1, [r7, #8]
 800403a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004042:	2b01      	cmp	r3, #1
 8004044:	d101      	bne.n	800404a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004046:	2302      	movs	r3, #2
 8004048:	e0b4      	b.n	80041b4 <HAL_TIM_PWM_ConfigChannel+0x184>
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2201      	movs	r2, #1
 800404e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2202      	movs	r2, #2
 8004056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2b0c      	cmp	r3, #12
 800405e:	f200 809f 	bhi.w	80041a0 <HAL_TIM_PWM_ConfigChannel+0x170>
 8004062:	a201      	add	r2, pc, #4	; (adr r2, 8004068 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004068:	0800409d 	.word	0x0800409d
 800406c:	080041a1 	.word	0x080041a1
 8004070:	080041a1 	.word	0x080041a1
 8004074:	080041a1 	.word	0x080041a1
 8004078:	080040dd 	.word	0x080040dd
 800407c:	080041a1 	.word	0x080041a1
 8004080:	080041a1 	.word	0x080041a1
 8004084:	080041a1 	.word	0x080041a1
 8004088:	0800411f 	.word	0x0800411f
 800408c:	080041a1 	.word	0x080041a1
 8004090:	080041a1 	.word	0x080041a1
 8004094:	080041a1 	.word	0x080041a1
 8004098:	0800415f 	.word	0x0800415f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	68b9      	ldr	r1, [r7, #8]
 80040a2:	4618      	mov	r0, r3
 80040a4:	f000 f9d0 	bl	8004448 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	699a      	ldr	r2, [r3, #24]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f042 0208 	orr.w	r2, r2, #8
 80040b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	699a      	ldr	r2, [r3, #24]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f022 0204 	bic.w	r2, r2, #4
 80040c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	6999      	ldr	r1, [r3, #24]
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	691a      	ldr	r2, [r3, #16]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	430a      	orrs	r2, r1
 80040d8:	619a      	str	r2, [r3, #24]
      break;
 80040da:	e062      	b.n	80041a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	68b9      	ldr	r1, [r7, #8]
 80040e2:	4618      	mov	r0, r3
 80040e4:	f000 fa16 	bl	8004514 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	699a      	ldr	r2, [r3, #24]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	699a      	ldr	r2, [r3, #24]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004106:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	6999      	ldr	r1, [r3, #24]
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	021a      	lsls	r2, r3, #8
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	430a      	orrs	r2, r1
 800411a:	619a      	str	r2, [r3, #24]
      break;
 800411c:	e041      	b.n	80041a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	68b9      	ldr	r1, [r7, #8]
 8004124:	4618      	mov	r0, r3
 8004126:	f000 fa5f 	bl	80045e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	69da      	ldr	r2, [r3, #28]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f042 0208 	orr.w	r2, r2, #8
 8004138:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	69da      	ldr	r2, [r3, #28]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f022 0204 	bic.w	r2, r2, #4
 8004148:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	69d9      	ldr	r1, [r3, #28]
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	691a      	ldr	r2, [r3, #16]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	430a      	orrs	r2, r1
 800415a:	61da      	str	r2, [r3, #28]
      break;
 800415c:	e021      	b.n	80041a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	68b9      	ldr	r1, [r7, #8]
 8004164:	4618      	mov	r0, r3
 8004166:	f000 faa9 	bl	80046bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	69da      	ldr	r2, [r3, #28]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004178:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	69da      	ldr	r2, [r3, #28]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004188:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	69d9      	ldr	r1, [r3, #28]
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	691b      	ldr	r3, [r3, #16]
 8004194:	021a      	lsls	r2, r3, #8
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	430a      	orrs	r2, r1
 800419c:	61da      	str	r2, [r3, #28]
      break;
 800419e:	e000      	b.n	80041a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80041a0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2201      	movs	r2, #1
 80041a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2200      	movs	r2, #0
 80041ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041b2:	2300      	movs	r3, #0
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3710      	adds	r7, #16
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}

080041bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d101      	bne.n	80041d4 <HAL_TIM_ConfigClockSource+0x18>
 80041d0:	2302      	movs	r3, #2
 80041d2:	e0a6      	b.n	8004322 <HAL_TIM_ConfigClockSource+0x166>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2202      	movs	r2, #2
 80041e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80041f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041fa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	68fa      	ldr	r2, [r7, #12]
 8004202:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2b40      	cmp	r3, #64	; 0x40
 800420a:	d067      	beq.n	80042dc <HAL_TIM_ConfigClockSource+0x120>
 800420c:	2b40      	cmp	r3, #64	; 0x40
 800420e:	d80b      	bhi.n	8004228 <HAL_TIM_ConfigClockSource+0x6c>
 8004210:	2b10      	cmp	r3, #16
 8004212:	d073      	beq.n	80042fc <HAL_TIM_ConfigClockSource+0x140>
 8004214:	2b10      	cmp	r3, #16
 8004216:	d802      	bhi.n	800421e <HAL_TIM_ConfigClockSource+0x62>
 8004218:	2b00      	cmp	r3, #0
 800421a:	d06f      	beq.n	80042fc <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800421c:	e078      	b.n	8004310 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800421e:	2b20      	cmp	r3, #32
 8004220:	d06c      	beq.n	80042fc <HAL_TIM_ConfigClockSource+0x140>
 8004222:	2b30      	cmp	r3, #48	; 0x30
 8004224:	d06a      	beq.n	80042fc <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004226:	e073      	b.n	8004310 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004228:	2b70      	cmp	r3, #112	; 0x70
 800422a:	d00d      	beq.n	8004248 <HAL_TIM_ConfigClockSource+0x8c>
 800422c:	2b70      	cmp	r3, #112	; 0x70
 800422e:	d804      	bhi.n	800423a <HAL_TIM_ConfigClockSource+0x7e>
 8004230:	2b50      	cmp	r3, #80	; 0x50
 8004232:	d033      	beq.n	800429c <HAL_TIM_ConfigClockSource+0xe0>
 8004234:	2b60      	cmp	r3, #96	; 0x60
 8004236:	d041      	beq.n	80042bc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004238:	e06a      	b.n	8004310 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800423a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800423e:	d066      	beq.n	800430e <HAL_TIM_ConfigClockSource+0x152>
 8004240:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004244:	d017      	beq.n	8004276 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004246:	e063      	b.n	8004310 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6818      	ldr	r0, [r3, #0]
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	6899      	ldr	r1, [r3, #8]
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	685a      	ldr	r2, [r3, #4]
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	f000 faf5 	bl	8004846 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800426a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	68fa      	ldr	r2, [r7, #12]
 8004272:	609a      	str	r2, [r3, #8]
      break;
 8004274:	e04c      	b.n	8004310 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6818      	ldr	r0, [r3, #0]
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	6899      	ldr	r1, [r3, #8]
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	685a      	ldr	r2, [r3, #4]
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	f000 fade 	bl	8004846 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	689a      	ldr	r2, [r3, #8]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004298:	609a      	str	r2, [r3, #8]
      break;
 800429a:	e039      	b.n	8004310 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6818      	ldr	r0, [r3, #0]
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	6859      	ldr	r1, [r3, #4]
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	461a      	mov	r2, r3
 80042aa:	f000 fa55 	bl	8004758 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	2150      	movs	r1, #80	; 0x50
 80042b4:	4618      	mov	r0, r3
 80042b6:	f000 faac 	bl	8004812 <TIM_ITRx_SetConfig>
      break;
 80042ba:	e029      	b.n	8004310 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6818      	ldr	r0, [r3, #0]
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	6859      	ldr	r1, [r3, #4]
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	461a      	mov	r2, r3
 80042ca:	f000 fa73 	bl	80047b4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	2160      	movs	r1, #96	; 0x60
 80042d4:	4618      	mov	r0, r3
 80042d6:	f000 fa9c 	bl	8004812 <TIM_ITRx_SetConfig>
      break;
 80042da:	e019      	b.n	8004310 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6818      	ldr	r0, [r3, #0]
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	6859      	ldr	r1, [r3, #4]
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	461a      	mov	r2, r3
 80042ea:	f000 fa35 	bl	8004758 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	2140      	movs	r1, #64	; 0x40
 80042f4:	4618      	mov	r0, r3
 80042f6:	f000 fa8c 	bl	8004812 <TIM_ITRx_SetConfig>
      break;
 80042fa:	e009      	b.n	8004310 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4619      	mov	r1, r3
 8004306:	4610      	mov	r0, r2
 8004308:	f000 fa83 	bl	8004812 <TIM_ITRx_SetConfig>
      break;
 800430c:	e000      	b.n	8004310 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800430e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2200      	movs	r2, #0
 800431c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	3710      	adds	r7, #16
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}

0800432a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800432a:	b480      	push	{r7}
 800432c:	b083      	sub	sp, #12
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004332:	bf00      	nop
 8004334:	370c      	adds	r7, #12
 8004336:	46bd      	mov	sp, r7
 8004338:	bc80      	pop	{r7}
 800433a:	4770      	bx	lr

0800433c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800433c:	b480      	push	{r7}
 800433e:	b083      	sub	sp, #12
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004344:	bf00      	nop
 8004346:	370c      	adds	r7, #12
 8004348:	46bd      	mov	sp, r7
 800434a:	bc80      	pop	{r7}
 800434c:	4770      	bx	lr

0800434e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800434e:	b480      	push	{r7}
 8004350:	b083      	sub	sp, #12
 8004352:	af00      	add	r7, sp, #0
 8004354:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004356:	bf00      	nop
 8004358:	370c      	adds	r7, #12
 800435a:	46bd      	mov	sp, r7
 800435c:	bc80      	pop	{r7}
 800435e:	4770      	bx	lr

08004360 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004360:	b480      	push	{r7}
 8004362:	b083      	sub	sp, #12
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004368:	bf00      	nop
 800436a:	370c      	adds	r7, #12
 800436c:	46bd      	mov	sp, r7
 800436e:	bc80      	pop	{r7}
 8004370:	4770      	bx	lr

08004372 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004372:	b480      	push	{r7}
 8004374:	b083      	sub	sp, #12
 8004376:	af00      	add	r7, sp, #0
 8004378:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800437a:	bf00      	nop
 800437c:	370c      	adds	r7, #12
 800437e:	46bd      	mov	sp, r7
 8004380:	bc80      	pop	{r7}
 8004382:	4770      	bx	lr

08004384 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004384:	b480      	push	{r7}
 8004386:	b085      	sub	sp, #20
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	4a29      	ldr	r2, [pc, #164]	; (800443c <TIM_Base_SetConfig+0xb8>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d00b      	beq.n	80043b4 <TIM_Base_SetConfig+0x30>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043a2:	d007      	beq.n	80043b4 <TIM_Base_SetConfig+0x30>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	4a26      	ldr	r2, [pc, #152]	; (8004440 <TIM_Base_SetConfig+0xbc>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d003      	beq.n	80043b4 <TIM_Base_SetConfig+0x30>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	4a25      	ldr	r2, [pc, #148]	; (8004444 <TIM_Base_SetConfig+0xc0>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d108      	bne.n	80043c6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	68fa      	ldr	r2, [r7, #12]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a1c      	ldr	r2, [pc, #112]	; (800443c <TIM_Base_SetConfig+0xb8>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d00b      	beq.n	80043e6 <TIM_Base_SetConfig+0x62>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043d4:	d007      	beq.n	80043e6 <TIM_Base_SetConfig+0x62>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a19      	ldr	r2, [pc, #100]	; (8004440 <TIM_Base_SetConfig+0xbc>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d003      	beq.n	80043e6 <TIM_Base_SetConfig+0x62>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a18      	ldr	r2, [pc, #96]	; (8004444 <TIM_Base_SetConfig+0xc0>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d108      	bne.n	80043f8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	68fa      	ldr	r2, [r7, #12]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	695b      	ldr	r3, [r3, #20]
 8004402:	4313      	orrs	r3, r2
 8004404:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	68fa      	ldr	r2, [r7, #12]
 800440a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	689a      	ldr	r2, [r3, #8]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	4a07      	ldr	r2, [pc, #28]	; (800443c <TIM_Base_SetConfig+0xb8>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d103      	bne.n	800442c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	691a      	ldr	r2, [r3, #16]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	615a      	str	r2, [r3, #20]
}
 8004432:	bf00      	nop
 8004434:	3714      	adds	r7, #20
 8004436:	46bd      	mov	sp, r7
 8004438:	bc80      	pop	{r7}
 800443a:	4770      	bx	lr
 800443c:	40012c00 	.word	0x40012c00
 8004440:	40000400 	.word	0x40000400
 8004444:	40000800 	.word	0x40000800

08004448 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004448:	b480      	push	{r7}
 800444a:	b087      	sub	sp, #28
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a1b      	ldr	r3, [r3, #32]
 8004456:	f023 0201 	bic.w	r2, r3, #1
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a1b      	ldr	r3, [r3, #32]
 8004462:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	699b      	ldr	r3, [r3, #24]
 800446e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004476:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f023 0303 	bic.w	r3, r3, #3
 800447e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	68fa      	ldr	r2, [r7, #12]
 8004486:	4313      	orrs	r3, r2
 8004488:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	f023 0302 	bic.w	r3, r3, #2
 8004490:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	697a      	ldr	r2, [r7, #20]
 8004498:	4313      	orrs	r3, r2
 800449a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	4a1c      	ldr	r2, [pc, #112]	; (8004510 <TIM_OC1_SetConfig+0xc8>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d10c      	bne.n	80044be <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	f023 0308 	bic.w	r3, r3, #8
 80044aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	697a      	ldr	r2, [r7, #20]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	f023 0304 	bic.w	r3, r3, #4
 80044bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a13      	ldr	r2, [pc, #76]	; (8004510 <TIM_OC1_SetConfig+0xc8>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d111      	bne.n	80044ea <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80044d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	695b      	ldr	r3, [r3, #20]
 80044da:	693a      	ldr	r2, [r7, #16]
 80044dc:	4313      	orrs	r3, r2
 80044de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	699b      	ldr	r3, [r3, #24]
 80044e4:	693a      	ldr	r2, [r7, #16]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	693a      	ldr	r2, [r7, #16]
 80044ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	68fa      	ldr	r2, [r7, #12]
 80044f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	685a      	ldr	r2, [r3, #4]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	697a      	ldr	r2, [r7, #20]
 8004502:	621a      	str	r2, [r3, #32]
}
 8004504:	bf00      	nop
 8004506:	371c      	adds	r7, #28
 8004508:	46bd      	mov	sp, r7
 800450a:	bc80      	pop	{r7}
 800450c:	4770      	bx	lr
 800450e:	bf00      	nop
 8004510:	40012c00 	.word	0x40012c00

08004514 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004514:	b480      	push	{r7}
 8004516:	b087      	sub	sp, #28
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a1b      	ldr	r3, [r3, #32]
 8004522:	f023 0210 	bic.w	r2, r3, #16
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6a1b      	ldr	r3, [r3, #32]
 800452e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	699b      	ldr	r3, [r3, #24]
 800453a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004542:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800454a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	021b      	lsls	r3, r3, #8
 8004552:	68fa      	ldr	r2, [r7, #12]
 8004554:	4313      	orrs	r3, r2
 8004556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	f023 0320 	bic.w	r3, r3, #32
 800455e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	011b      	lsls	r3, r3, #4
 8004566:	697a      	ldr	r2, [r7, #20]
 8004568:	4313      	orrs	r3, r2
 800456a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	4a1d      	ldr	r2, [pc, #116]	; (80045e4 <TIM_OC2_SetConfig+0xd0>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d10d      	bne.n	8004590 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800457a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	011b      	lsls	r3, r3, #4
 8004582:	697a      	ldr	r2, [r7, #20]
 8004584:	4313      	orrs	r3, r2
 8004586:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800458e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	4a14      	ldr	r2, [pc, #80]	; (80045e4 <TIM_OC2_SetConfig+0xd0>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d113      	bne.n	80045c0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800459e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80045a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	695b      	ldr	r3, [r3, #20]
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	693a      	ldr	r2, [r7, #16]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	699b      	ldr	r3, [r3, #24]
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	693a      	ldr	r2, [r7, #16]
 80045bc:	4313      	orrs	r3, r2
 80045be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	693a      	ldr	r2, [r7, #16]
 80045c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	68fa      	ldr	r2, [r7, #12]
 80045ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	685a      	ldr	r2, [r3, #4]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	697a      	ldr	r2, [r7, #20]
 80045d8:	621a      	str	r2, [r3, #32]
}
 80045da:	bf00      	nop
 80045dc:	371c      	adds	r7, #28
 80045de:	46bd      	mov	sp, r7
 80045e0:	bc80      	pop	{r7}
 80045e2:	4770      	bx	lr
 80045e4:	40012c00 	.word	0x40012c00

080045e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b087      	sub	sp, #28
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a1b      	ldr	r3, [r3, #32]
 80045f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a1b      	ldr	r3, [r3, #32]
 8004602:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	69db      	ldr	r3, [r3, #28]
 800460e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004616:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f023 0303 	bic.w	r3, r3, #3
 800461e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	68fa      	ldr	r2, [r7, #12]
 8004626:	4313      	orrs	r3, r2
 8004628:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004630:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	021b      	lsls	r3, r3, #8
 8004638:	697a      	ldr	r2, [r7, #20]
 800463a:	4313      	orrs	r3, r2
 800463c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a1d      	ldr	r2, [pc, #116]	; (80046b8 <TIM_OC3_SetConfig+0xd0>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d10d      	bne.n	8004662 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800464c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	021b      	lsls	r3, r3, #8
 8004654:	697a      	ldr	r2, [r7, #20]
 8004656:	4313      	orrs	r3, r2
 8004658:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004660:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a14      	ldr	r2, [pc, #80]	; (80046b8 <TIM_OC3_SetConfig+0xd0>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d113      	bne.n	8004692 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004670:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004678:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	695b      	ldr	r3, [r3, #20]
 800467e:	011b      	lsls	r3, r3, #4
 8004680:	693a      	ldr	r2, [r7, #16]
 8004682:	4313      	orrs	r3, r2
 8004684:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	699b      	ldr	r3, [r3, #24]
 800468a:	011b      	lsls	r3, r3, #4
 800468c:	693a      	ldr	r2, [r7, #16]
 800468e:	4313      	orrs	r3, r2
 8004690:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	693a      	ldr	r2, [r7, #16]
 8004696:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	68fa      	ldr	r2, [r7, #12]
 800469c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	685a      	ldr	r2, [r3, #4]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	697a      	ldr	r2, [r7, #20]
 80046aa:	621a      	str	r2, [r3, #32]
}
 80046ac:	bf00      	nop
 80046ae:	371c      	adds	r7, #28
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bc80      	pop	{r7}
 80046b4:	4770      	bx	lr
 80046b6:	bf00      	nop
 80046b8:	40012c00 	.word	0x40012c00

080046bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046bc:	b480      	push	{r7}
 80046be:	b087      	sub	sp, #28
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6a1b      	ldr	r3, [r3, #32]
 80046ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a1b      	ldr	r3, [r3, #32]
 80046d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	69db      	ldr	r3, [r3, #28]
 80046e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	021b      	lsls	r3, r3, #8
 80046fa:	68fa      	ldr	r2, [r7, #12]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004706:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	031b      	lsls	r3, r3, #12
 800470e:	693a      	ldr	r2, [r7, #16]
 8004710:	4313      	orrs	r3, r2
 8004712:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	4a0f      	ldr	r2, [pc, #60]	; (8004754 <TIM_OC4_SetConfig+0x98>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d109      	bne.n	8004730 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004722:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	695b      	ldr	r3, [r3, #20]
 8004728:	019b      	lsls	r3, r3, #6
 800472a:	697a      	ldr	r2, [r7, #20]
 800472c:	4313      	orrs	r3, r2
 800472e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	697a      	ldr	r2, [r7, #20]
 8004734:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	68fa      	ldr	r2, [r7, #12]
 800473a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	685a      	ldr	r2, [r3, #4]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	693a      	ldr	r2, [r7, #16]
 8004748:	621a      	str	r2, [r3, #32]
}
 800474a:	bf00      	nop
 800474c:	371c      	adds	r7, #28
 800474e:	46bd      	mov	sp, r7
 8004750:	bc80      	pop	{r7}
 8004752:	4770      	bx	lr
 8004754:	40012c00 	.word	0x40012c00

08004758 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004758:	b480      	push	{r7}
 800475a:	b087      	sub	sp, #28
 800475c:	af00      	add	r7, sp, #0
 800475e:	60f8      	str	r0, [r7, #12]
 8004760:	60b9      	str	r1, [r7, #8]
 8004762:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6a1b      	ldr	r3, [r3, #32]
 8004768:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	6a1b      	ldr	r3, [r3, #32]
 800476e:	f023 0201 	bic.w	r2, r3, #1
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	699b      	ldr	r3, [r3, #24]
 800477a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004782:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	011b      	lsls	r3, r3, #4
 8004788:	693a      	ldr	r2, [r7, #16]
 800478a:	4313      	orrs	r3, r2
 800478c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	f023 030a 	bic.w	r3, r3, #10
 8004794:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004796:	697a      	ldr	r2, [r7, #20]
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	4313      	orrs	r3, r2
 800479c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	693a      	ldr	r2, [r7, #16]
 80047a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	697a      	ldr	r2, [r7, #20]
 80047a8:	621a      	str	r2, [r3, #32]
}
 80047aa:	bf00      	nop
 80047ac:	371c      	adds	r7, #28
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bc80      	pop	{r7}
 80047b2:	4770      	bx	lr

080047b4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b087      	sub	sp, #28
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	60b9      	str	r1, [r7, #8]
 80047be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6a1b      	ldr	r3, [r3, #32]
 80047c4:	f023 0210 	bic.w	r2, r3, #16
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	699b      	ldr	r3, [r3, #24]
 80047d0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6a1b      	ldr	r3, [r3, #32]
 80047d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80047de:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	031b      	lsls	r3, r3, #12
 80047e4:	697a      	ldr	r2, [r7, #20]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80047f0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	011b      	lsls	r3, r3, #4
 80047f6:	693a      	ldr	r2, [r7, #16]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	697a      	ldr	r2, [r7, #20]
 8004800:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	693a      	ldr	r2, [r7, #16]
 8004806:	621a      	str	r2, [r3, #32]
}
 8004808:	bf00      	nop
 800480a:	371c      	adds	r7, #28
 800480c:	46bd      	mov	sp, r7
 800480e:	bc80      	pop	{r7}
 8004810:	4770      	bx	lr

08004812 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004812:	b480      	push	{r7}
 8004814:	b085      	sub	sp, #20
 8004816:	af00      	add	r7, sp, #0
 8004818:	6078      	str	r0, [r7, #4]
 800481a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004828:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800482a:	683a      	ldr	r2, [r7, #0]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	4313      	orrs	r3, r2
 8004830:	f043 0307 	orr.w	r3, r3, #7
 8004834:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	68fa      	ldr	r2, [r7, #12]
 800483a:	609a      	str	r2, [r3, #8]
}
 800483c:	bf00      	nop
 800483e:	3714      	adds	r7, #20
 8004840:	46bd      	mov	sp, r7
 8004842:	bc80      	pop	{r7}
 8004844:	4770      	bx	lr

08004846 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004846:	b480      	push	{r7}
 8004848:	b087      	sub	sp, #28
 800484a:	af00      	add	r7, sp, #0
 800484c:	60f8      	str	r0, [r7, #12]
 800484e:	60b9      	str	r1, [r7, #8]
 8004850:	607a      	str	r2, [r7, #4]
 8004852:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004860:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	021a      	lsls	r2, r3, #8
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	431a      	orrs	r2, r3
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	4313      	orrs	r3, r2
 800486e:	697a      	ldr	r2, [r7, #20]
 8004870:	4313      	orrs	r3, r2
 8004872:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	697a      	ldr	r2, [r7, #20]
 8004878:	609a      	str	r2, [r3, #8]
}
 800487a:	bf00      	nop
 800487c:	371c      	adds	r7, #28
 800487e:	46bd      	mov	sp, r7
 8004880:	bc80      	pop	{r7}
 8004882:	4770      	bx	lr

08004884 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004884:	b480      	push	{r7}
 8004886:	b085      	sub	sp, #20
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004894:	2b01      	cmp	r3, #1
 8004896:	d101      	bne.n	800489c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004898:	2302      	movs	r3, #2
 800489a:	e032      	b.n	8004902 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2202      	movs	r2, #2
 80048a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	68fa      	ldr	r2, [r7, #12]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048d4:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	68ba      	ldr	r2, [r7, #8]
 80048dc:	4313      	orrs	r3, r2
 80048de:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	68fa      	ldr	r2, [r7, #12]
 80048e6:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	68ba      	ldr	r2, [r7, #8]
 80048ee:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004900:	2300      	movs	r3, #0
}
 8004902:	4618      	mov	r0, r3
 8004904:	3714      	adds	r7, #20
 8004906:	46bd      	mov	sp, r7
 8004908:	bc80      	pop	{r7}
 800490a:	4770      	bx	lr

0800490c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800490c:	b480      	push	{r7}
 800490e:	b083      	sub	sp, #12
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004914:	bf00      	nop
 8004916:	370c      	adds	r7, #12
 8004918:	46bd      	mov	sp, r7
 800491a:	bc80      	pop	{r7}
 800491c:	4770      	bx	lr

0800491e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800491e:	b480      	push	{r7}
 8004920:	b083      	sub	sp, #12
 8004922:	af00      	add	r7, sp, #0
 8004924:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004926:	bf00      	nop
 8004928:	370c      	adds	r7, #12
 800492a:	46bd      	mov	sp, r7
 800492c:	bc80      	pop	{r7}
 800492e:	4770      	bx	lr

08004930 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b082      	sub	sp, #8
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d101      	bne.n	8004942 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e03f      	b.n	80049c2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004948:	b2db      	uxtb	r3, r3
 800494a:	2b00      	cmp	r3, #0
 800494c:	d106      	bne.n	800495c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f7fc f97a 	bl	8000c50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2224      	movs	r2, #36	; 0x24
 8004960:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	68da      	ldr	r2, [r3, #12]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004972:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f000 f829 	bl	80049cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	691a      	ldr	r2, [r3, #16]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004988:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	695a      	ldr	r2, [r3, #20]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004998:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	68da      	ldr	r2, [r3, #12]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80049a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2220      	movs	r2, #32
 80049b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2220      	movs	r2, #32
 80049bc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80049c0:	2300      	movs	r3, #0
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3708      	adds	r7, #8
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
	...

080049cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b084      	sub	sp, #16
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	691b      	ldr	r3, [r3, #16]
 80049da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	68da      	ldr	r2, [r3, #12]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	430a      	orrs	r2, r1
 80049e8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	689a      	ldr	r2, [r3, #8]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	691b      	ldr	r3, [r3, #16]
 80049f2:	431a      	orrs	r2, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	695b      	ldr	r3, [r3, #20]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004a06:	f023 030c 	bic.w	r3, r3, #12
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	6812      	ldr	r2, [r2, #0]
 8004a0e:	68f9      	ldr	r1, [r7, #12]
 8004a10:	430b      	orrs	r3, r1
 8004a12:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	695b      	ldr	r3, [r3, #20]
 8004a1a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	699a      	ldr	r2, [r3, #24]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	430a      	orrs	r2, r1
 8004a28:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a52      	ldr	r2, [pc, #328]	; (8004b78 <UART_SetConfig+0x1ac>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d14e      	bne.n	8004ad2 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004a34:	f7fe fca4 	bl	8003380 <HAL_RCC_GetPCLK2Freq>
 8004a38:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a3a:	68ba      	ldr	r2, [r7, #8]
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	4413      	add	r3, r2
 8004a42:	009a      	lsls	r2, r3, #2
 8004a44:	441a      	add	r2, r3
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a50:	4a4a      	ldr	r2, [pc, #296]	; (8004b7c <UART_SetConfig+0x1b0>)
 8004a52:	fba2 2303 	umull	r2, r3, r2, r3
 8004a56:	095b      	lsrs	r3, r3, #5
 8004a58:	0119      	lsls	r1, r3, #4
 8004a5a:	68ba      	ldr	r2, [r7, #8]
 8004a5c:	4613      	mov	r3, r2
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	4413      	add	r3, r2
 8004a62:	009a      	lsls	r2, r3, #2
 8004a64:	441a      	add	r2, r3
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a70:	4b42      	ldr	r3, [pc, #264]	; (8004b7c <UART_SetConfig+0x1b0>)
 8004a72:	fba3 0302 	umull	r0, r3, r3, r2
 8004a76:	095b      	lsrs	r3, r3, #5
 8004a78:	2064      	movs	r0, #100	; 0x64
 8004a7a:	fb00 f303 	mul.w	r3, r0, r3
 8004a7e:	1ad3      	subs	r3, r2, r3
 8004a80:	011b      	lsls	r3, r3, #4
 8004a82:	3332      	adds	r3, #50	; 0x32
 8004a84:	4a3d      	ldr	r2, [pc, #244]	; (8004b7c <UART_SetConfig+0x1b0>)
 8004a86:	fba2 2303 	umull	r2, r3, r2, r3
 8004a8a:	095b      	lsrs	r3, r3, #5
 8004a8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a90:	4419      	add	r1, r3
 8004a92:	68ba      	ldr	r2, [r7, #8]
 8004a94:	4613      	mov	r3, r2
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	4413      	add	r3, r2
 8004a9a:	009a      	lsls	r2, r3, #2
 8004a9c:	441a      	add	r2, r3
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	fbb2 f2f3 	udiv	r2, r2, r3
 8004aa8:	4b34      	ldr	r3, [pc, #208]	; (8004b7c <UART_SetConfig+0x1b0>)
 8004aaa:	fba3 0302 	umull	r0, r3, r3, r2
 8004aae:	095b      	lsrs	r3, r3, #5
 8004ab0:	2064      	movs	r0, #100	; 0x64
 8004ab2:	fb00 f303 	mul.w	r3, r0, r3
 8004ab6:	1ad3      	subs	r3, r2, r3
 8004ab8:	011b      	lsls	r3, r3, #4
 8004aba:	3332      	adds	r3, #50	; 0x32
 8004abc:	4a2f      	ldr	r2, [pc, #188]	; (8004b7c <UART_SetConfig+0x1b0>)
 8004abe:	fba2 2303 	umull	r2, r3, r2, r3
 8004ac2:	095b      	lsrs	r3, r3, #5
 8004ac4:	f003 020f 	and.w	r2, r3, #15
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	440a      	add	r2, r1
 8004ace:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8004ad0:	e04d      	b.n	8004b6e <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8004ad2:	f7fe fc41 	bl	8003358 <HAL_RCC_GetPCLK1Freq>
 8004ad6:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ad8:	68ba      	ldr	r2, [r7, #8]
 8004ada:	4613      	mov	r3, r2
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	4413      	add	r3, r2
 8004ae0:	009a      	lsls	r2, r3, #2
 8004ae2:	441a      	add	r2, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aee:	4a23      	ldr	r2, [pc, #140]	; (8004b7c <UART_SetConfig+0x1b0>)
 8004af0:	fba2 2303 	umull	r2, r3, r2, r3
 8004af4:	095b      	lsrs	r3, r3, #5
 8004af6:	0119      	lsls	r1, r3, #4
 8004af8:	68ba      	ldr	r2, [r7, #8]
 8004afa:	4613      	mov	r3, r2
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	4413      	add	r3, r2
 8004b00:	009a      	lsls	r2, r3, #2
 8004b02:	441a      	add	r2, r3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b0e:	4b1b      	ldr	r3, [pc, #108]	; (8004b7c <UART_SetConfig+0x1b0>)
 8004b10:	fba3 0302 	umull	r0, r3, r3, r2
 8004b14:	095b      	lsrs	r3, r3, #5
 8004b16:	2064      	movs	r0, #100	; 0x64
 8004b18:	fb00 f303 	mul.w	r3, r0, r3
 8004b1c:	1ad3      	subs	r3, r2, r3
 8004b1e:	011b      	lsls	r3, r3, #4
 8004b20:	3332      	adds	r3, #50	; 0x32
 8004b22:	4a16      	ldr	r2, [pc, #88]	; (8004b7c <UART_SetConfig+0x1b0>)
 8004b24:	fba2 2303 	umull	r2, r3, r2, r3
 8004b28:	095b      	lsrs	r3, r3, #5
 8004b2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b2e:	4419      	add	r1, r3
 8004b30:	68ba      	ldr	r2, [r7, #8]
 8004b32:	4613      	mov	r3, r2
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	4413      	add	r3, r2
 8004b38:	009a      	lsls	r2, r3, #2
 8004b3a:	441a      	add	r2, r3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	009b      	lsls	r3, r3, #2
 8004b42:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b46:	4b0d      	ldr	r3, [pc, #52]	; (8004b7c <UART_SetConfig+0x1b0>)
 8004b48:	fba3 0302 	umull	r0, r3, r3, r2
 8004b4c:	095b      	lsrs	r3, r3, #5
 8004b4e:	2064      	movs	r0, #100	; 0x64
 8004b50:	fb00 f303 	mul.w	r3, r0, r3
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	011b      	lsls	r3, r3, #4
 8004b58:	3332      	adds	r3, #50	; 0x32
 8004b5a:	4a08      	ldr	r2, [pc, #32]	; (8004b7c <UART_SetConfig+0x1b0>)
 8004b5c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b60:	095b      	lsrs	r3, r3, #5
 8004b62:	f003 020f 	and.w	r2, r3, #15
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	440a      	add	r2, r1
 8004b6c:	609a      	str	r2, [r3, #8]
}
 8004b6e:	bf00      	nop
 8004b70:	3710      	adds	r7, #16
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	40013800 	.word	0x40013800
 8004b7c:	51eb851f 	.word	0x51eb851f

08004b80 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004b80:	b084      	sub	sp, #16
 8004b82:	b480      	push	{r7}
 8004b84:	b083      	sub	sp, #12
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	6078      	str	r0, [r7, #4]
 8004b8a:	f107 0014 	add.w	r0, r7, #20
 8004b8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004b92:	2300      	movs	r3, #0
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	370c      	adds	r7, #12
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bc80      	pop	{r7}
 8004b9c:	b004      	add	sp, #16
 8004b9e:	4770      	bx	lr

08004ba0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b085      	sub	sp, #20
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004ba8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004bac:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004bb4:	b29a      	uxth	r2, r3
 8004bb6:	89fb      	ldrh	r3, [r7, #14]
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	b29a      	uxth	r2, r3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004bc2:	2300      	movs	r3, #0
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3714      	adds	r7, #20
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bc80      	pop	{r7}
 8004bcc:	4770      	bx	lr

08004bce <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004bce:	b480      	push	{r7}
 8004bd0:	b085      	sub	sp, #20
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004bd6:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004bda:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	b21a      	sxth	r2, r3
 8004be6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004bea:	43db      	mvns	r3, r3
 8004bec:	b21b      	sxth	r3, r3
 8004bee:	4013      	ands	r3, r2
 8004bf0:	b21b      	sxth	r3, r3
 8004bf2:	b29a      	uxth	r2, r3
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004bfa:	2300      	movs	r3, #0
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3714      	adds	r7, #20
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bc80      	pop	{r7}
 8004c04:	4770      	bx	lr

08004c06 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004c06:	b480      	push	{r7}
 8004c08:	b083      	sub	sp, #12
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	6078      	str	r0, [r7, #4]
 8004c0e:	460b      	mov	r3, r1
 8004c10:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004c12:	2300      	movs	r3, #0
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	370c      	adds	r7, #12
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bc80      	pop	{r7}
 8004c1c:	4770      	bx	lr

08004c1e <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004c1e:	b084      	sub	sp, #16
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b082      	sub	sp, #8
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	f107 0014 	add.w	r0, r7, #20
 8004c2c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f7ff ffa5 	bl	8004ba0 <USB_EnableGlobalInt>

  return HAL_OK;
 8004c56:	2300      	movs	r3, #0
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3708      	adds	r7, #8
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c62:	b004      	add	sp, #16
 8004c64:	4770      	bx	lr
	...

08004c68 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004c68:	b490      	push	{r4, r7}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004c72:	2300      	movs	r3, #0
 8004c74:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004c76:	687a      	ldr	r2, [r7, #4]
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	781b      	ldrb	r3, [r3, #0]
 8004c7c:	009b      	lsls	r3, r3, #2
 8004c7e:	4413      	add	r3, r2
 8004c80:	881b      	ldrh	r3, [r3, #0]
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004c88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c8c:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	78db      	ldrb	r3, [r3, #3]
 8004c92:	2b03      	cmp	r3, #3
 8004c94:	d819      	bhi.n	8004cca <USB_ActivateEndpoint+0x62>
 8004c96:	a201      	add	r2, pc, #4	; (adr r2, 8004c9c <USB_ActivateEndpoint+0x34>)
 8004c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c9c:	08004cad 	.word	0x08004cad
 8004ca0:	08004cc1 	.word	0x08004cc1
 8004ca4:	08004cd1 	.word	0x08004cd1
 8004ca8:	08004cb7 	.word	0x08004cb7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004cac:	89bb      	ldrh	r3, [r7, #12]
 8004cae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004cb2:	81bb      	strh	r3, [r7, #12]
      break;
 8004cb4:	e00d      	b.n	8004cd2 <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004cb6:	89bb      	ldrh	r3, [r7, #12]
 8004cb8:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004cbc:	81bb      	strh	r3, [r7, #12]
      break;
 8004cbe:	e008      	b.n	8004cd2 <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004cc0:	89bb      	ldrh	r3, [r7, #12]
 8004cc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004cc6:	81bb      	strh	r3, [r7, #12]
      break;
 8004cc8:	e003      	b.n	8004cd2 <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	73fb      	strb	r3, [r7, #15]
      break;
 8004cce:	e000      	b.n	8004cd2 <USB_ActivateEndpoint+0x6a>
      break;
 8004cd0:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	441a      	add	r2, r3
 8004cdc:	89bb      	ldrh	r3, [r7, #12]
 8004cde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ce2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ce6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	781b      	ldrb	r3, [r3, #0]
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	4413      	add	r3, r2
 8004cfc:	881b      	ldrh	r3, [r3, #0]
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d08:	b29a      	uxth	r2, r3
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	4313      	orrs	r3, r2
 8004d12:	b29c      	uxth	r4, r3
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	441a      	add	r2, r3
 8004d1e:	4b8a      	ldr	r3, [pc, #552]	; (8004f48 <USB_ActivateEndpoint+0x2e0>)
 8004d20:	4323      	orrs	r3, r4
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	7b1b      	ldrb	r3, [r3, #12]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	f040 8112 	bne.w	8004f54 <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	785b      	ldrb	r3, [r3, #1]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d067      	beq.n	8004e08 <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004d38:	687c      	ldr	r4, [r7, #4]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	441c      	add	r4, r3
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	011b      	lsls	r3, r3, #4
 8004d4a:	4423      	add	r3, r4
 8004d4c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d50:	461c      	mov	r4, r3
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	88db      	ldrh	r3, [r3, #6]
 8004d56:	085b      	lsrs	r3, r3, #1
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	005b      	lsls	r3, r3, #1
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	4413      	add	r3, r2
 8004d6a:	881b      	ldrh	r3, [r3, #0]
 8004d6c:	b29c      	uxth	r4, r3
 8004d6e:	4623      	mov	r3, r4
 8004d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d014      	beq.n	8004da2 <USB_ActivateEndpoint+0x13a>
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	781b      	ldrb	r3, [r3, #0]
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	4413      	add	r3, r2
 8004d82:	881b      	ldrh	r3, [r3, #0]
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d8e:	b29c      	uxth	r4, r3
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	781b      	ldrb	r3, [r3, #0]
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	441a      	add	r2, r3
 8004d9a:	4b6c      	ldr	r3, [pc, #432]	; (8004f4c <USB_ActivateEndpoint+0x2e4>)
 8004d9c:	4323      	orrs	r3, r4
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	78db      	ldrb	r3, [r3, #3]
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d018      	beq.n	8004ddc <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	4413      	add	r3, r2
 8004db4:	881b      	ldrh	r3, [r3, #0]
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dc0:	b29c      	uxth	r4, r3
 8004dc2:	f084 0320 	eor.w	r3, r4, #32
 8004dc6:	b29c      	uxth	r4, r3
 8004dc8:	687a      	ldr	r2, [r7, #4]
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	781b      	ldrb	r3, [r3, #0]
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	441a      	add	r2, r3
 8004dd2:	4b5d      	ldr	r3, [pc, #372]	; (8004f48 <USB_ActivateEndpoint+0x2e0>)
 8004dd4:	4323      	orrs	r3, r4
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	8013      	strh	r3, [r2, #0]
 8004dda:	e22b      	b.n	8005234 <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	781b      	ldrb	r3, [r3, #0]
 8004de2:	009b      	lsls	r3, r3, #2
 8004de4:	4413      	add	r3, r2
 8004de6:	881b      	ldrh	r3, [r3, #0]
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004df2:	b29c      	uxth	r4, r3
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	441a      	add	r2, r3
 8004dfe:	4b52      	ldr	r3, [pc, #328]	; (8004f48 <USB_ActivateEndpoint+0x2e0>)
 8004e00:	4323      	orrs	r3, r4
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	8013      	strh	r3, [r2, #0]
 8004e06:	e215      	b.n	8005234 <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004e08:	687c      	ldr	r4, [r7, #4]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	441c      	add	r4, r3
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	781b      	ldrb	r3, [r3, #0]
 8004e18:	011b      	lsls	r3, r3, #4
 8004e1a:	4423      	add	r3, r4
 8004e1c:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004e20:	461c      	mov	r4, r3
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	88db      	ldrh	r3, [r3, #6]
 8004e26:	085b      	lsrs	r3, r3, #1
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	005b      	lsls	r3, r3, #1
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004e30:	687c      	ldr	r4, [r7, #4]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	441c      	add	r4, r3
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	781b      	ldrb	r3, [r3, #0]
 8004e40:	011b      	lsls	r3, r3, #4
 8004e42:	4423      	add	r3, r4
 8004e44:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004e48:	461c      	mov	r4, r3
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	691b      	ldr	r3, [r3, #16]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d10e      	bne.n	8004e70 <USB_ActivateEndpoint+0x208>
 8004e52:	8823      	ldrh	r3, [r4, #0]
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	8023      	strh	r3, [r4, #0]
 8004e5e:	8823      	ldrh	r3, [r4, #0]
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	8023      	strh	r3, [r4, #0]
 8004e6e:	e02d      	b.n	8004ecc <USB_ActivateEndpoint+0x264>
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	691b      	ldr	r3, [r3, #16]
 8004e74:	2b3e      	cmp	r3, #62	; 0x3e
 8004e76:	d812      	bhi.n	8004e9e <USB_ActivateEndpoint+0x236>
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	691b      	ldr	r3, [r3, #16]
 8004e7c:	085b      	lsrs	r3, r3, #1
 8004e7e:	60bb      	str	r3, [r7, #8]
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	691b      	ldr	r3, [r3, #16]
 8004e84:	f003 0301 	and.w	r3, r3, #1
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d002      	beq.n	8004e92 <USB_ActivateEndpoint+0x22a>
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	3301      	adds	r3, #1
 8004e90:	60bb      	str	r3, [r7, #8]
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	029b      	lsls	r3, r3, #10
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	8023      	strh	r3, [r4, #0]
 8004e9c:	e016      	b.n	8004ecc <USB_ActivateEndpoint+0x264>
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	095b      	lsrs	r3, r3, #5
 8004ea4:	60bb      	str	r3, [r7, #8]
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	691b      	ldr	r3, [r3, #16]
 8004eaa:	f003 031f 	and.w	r3, r3, #31
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d102      	bne.n	8004eb8 <USB_ActivateEndpoint+0x250>
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	3b01      	subs	r3, #1
 8004eb6:	60bb      	str	r3, [r7, #8]
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	029b      	lsls	r3, r3, #10
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ec4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	781b      	ldrb	r3, [r3, #0]
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	4413      	add	r3, r2
 8004ed6:	881b      	ldrh	r3, [r3, #0]
 8004ed8:	b29c      	uxth	r4, r3
 8004eda:	4623      	mov	r3, r4
 8004edc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d014      	beq.n	8004f0e <USB_ActivateEndpoint+0x2a6>
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	781b      	ldrb	r3, [r3, #0]
 8004eea:	009b      	lsls	r3, r3, #2
 8004eec:	4413      	add	r3, r2
 8004eee:	881b      	ldrh	r3, [r3, #0]
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004efa:	b29c      	uxth	r4, r3
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	441a      	add	r2, r3
 8004f06:	4b12      	ldr	r3, [pc, #72]	; (8004f50 <USB_ActivateEndpoint+0x2e8>)
 8004f08:	4323      	orrs	r3, r4
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	781b      	ldrb	r3, [r3, #0]
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	4413      	add	r3, r2
 8004f18:	881b      	ldrh	r3, [r3, #0]
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f24:	b29c      	uxth	r4, r3
 8004f26:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004f2a:	b29c      	uxth	r4, r3
 8004f2c:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004f30:	b29c      	uxth	r4, r3
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	781b      	ldrb	r3, [r3, #0]
 8004f38:	009b      	lsls	r3, r3, #2
 8004f3a:	441a      	add	r2, r3
 8004f3c:	4b02      	ldr	r3, [pc, #8]	; (8004f48 <USB_ActivateEndpoint+0x2e0>)
 8004f3e:	4323      	orrs	r3, r4
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	8013      	strh	r3, [r2, #0]
 8004f44:	e176      	b.n	8005234 <USB_ActivateEndpoint+0x5cc>
 8004f46:	bf00      	nop
 8004f48:	ffff8080 	.word	0xffff8080
 8004f4c:	ffff80c0 	.word	0xffff80c0
 8004f50:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	781b      	ldrb	r3, [r3, #0]
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	4413      	add	r3, r2
 8004f5e:	881b      	ldrh	r3, [r3, #0]
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f6a:	b29c      	uxth	r4, r3
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	781b      	ldrb	r3, [r3, #0]
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	441a      	add	r2, r3
 8004f76:	4b96      	ldr	r3, [pc, #600]	; (80051d0 <USB_ActivateEndpoint+0x568>)
 8004f78:	4323      	orrs	r3, r4
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004f7e:	687c      	ldr	r4, [r7, #4]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	441c      	add	r4, r3
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	781b      	ldrb	r3, [r3, #0]
 8004f8e:	011b      	lsls	r3, r3, #4
 8004f90:	4423      	add	r3, r4
 8004f92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f96:	461c      	mov	r4, r3
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	891b      	ldrh	r3, [r3, #8]
 8004f9c:	085b      	lsrs	r3, r3, #1
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	005b      	lsls	r3, r3, #1
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	8023      	strh	r3, [r4, #0]
 8004fa6:	687c      	ldr	r4, [r7, #4]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	441c      	add	r4, r3
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	781b      	ldrb	r3, [r3, #0]
 8004fb6:	011b      	lsls	r3, r3, #4
 8004fb8:	4423      	add	r3, r4
 8004fba:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004fbe:	461c      	mov	r4, r3
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	895b      	ldrh	r3, [r3, #10]
 8004fc4:	085b      	lsrs	r3, r3, #1
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	005b      	lsls	r3, r3, #1
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	785b      	ldrb	r3, [r3, #1]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	f040 8088 	bne.w	80050e8 <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	4413      	add	r3, r2
 8004fe2:	881b      	ldrh	r3, [r3, #0]
 8004fe4:	b29c      	uxth	r4, r3
 8004fe6:	4623      	mov	r3, r4
 8004fe8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d014      	beq.n	800501a <USB_ActivateEndpoint+0x3b2>
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	4413      	add	r3, r2
 8004ffa:	881b      	ldrh	r3, [r3, #0]
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005006:	b29c      	uxth	r4, r3
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	781b      	ldrb	r3, [r3, #0]
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	441a      	add	r2, r3
 8005012:	4b70      	ldr	r3, [pc, #448]	; (80051d4 <USB_ActivateEndpoint+0x56c>)
 8005014:	4323      	orrs	r3, r4
 8005016:	b29b      	uxth	r3, r3
 8005018:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	4413      	add	r3, r2
 8005024:	881b      	ldrh	r3, [r3, #0]
 8005026:	b29c      	uxth	r4, r3
 8005028:	4623      	mov	r3, r4
 800502a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800502e:	2b00      	cmp	r3, #0
 8005030:	d014      	beq.n	800505c <USB_ActivateEndpoint+0x3f4>
 8005032:	687a      	ldr	r2, [r7, #4]
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	4413      	add	r3, r2
 800503c:	881b      	ldrh	r3, [r3, #0]
 800503e:	b29b      	uxth	r3, r3
 8005040:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005044:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005048:	b29c      	uxth	r4, r3
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	441a      	add	r2, r3
 8005054:	4b60      	ldr	r3, [pc, #384]	; (80051d8 <USB_ActivateEndpoint+0x570>)
 8005056:	4323      	orrs	r3, r4
 8005058:	b29b      	uxth	r3, r3
 800505a:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	4413      	add	r3, r2
 8005066:	881b      	ldrh	r3, [r3, #0]
 8005068:	b29b      	uxth	r3, r3
 800506a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800506e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005072:	b29c      	uxth	r4, r3
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	781b      	ldrb	r3, [r3, #0]
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	441a      	add	r2, r3
 800507e:	4b56      	ldr	r3, [pc, #344]	; (80051d8 <USB_ActivateEndpoint+0x570>)
 8005080:	4323      	orrs	r3, r4
 8005082:	b29b      	uxth	r3, r3
 8005084:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005086:	687a      	ldr	r2, [r7, #4]
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	009b      	lsls	r3, r3, #2
 800508e:	4413      	add	r3, r2
 8005090:	881b      	ldrh	r3, [r3, #0]
 8005092:	b29b      	uxth	r3, r3
 8005094:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005098:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800509c:	b29c      	uxth	r4, r3
 800509e:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80050a2:	b29c      	uxth	r4, r3
 80050a4:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80050a8:	b29c      	uxth	r4, r3
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	441a      	add	r2, r3
 80050b4:	4b49      	ldr	r3, [pc, #292]	; (80051dc <USB_ActivateEndpoint+0x574>)
 80050b6:	4323      	orrs	r3, r4
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	781b      	ldrb	r3, [r3, #0]
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	4413      	add	r3, r2
 80050c6:	881b      	ldrh	r3, [r3, #0]
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050d2:	b29c      	uxth	r4, r3
 80050d4:	687a      	ldr	r2, [r7, #4]
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	441a      	add	r2, r3
 80050de:	4b3f      	ldr	r3, [pc, #252]	; (80051dc <USB_ActivateEndpoint+0x574>)
 80050e0:	4323      	orrs	r3, r4
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	8013      	strh	r3, [r2, #0]
 80050e6:	e0a5      	b.n	8005234 <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	781b      	ldrb	r3, [r3, #0]
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	4413      	add	r3, r2
 80050f2:	881b      	ldrh	r3, [r3, #0]
 80050f4:	b29c      	uxth	r4, r3
 80050f6:	4623      	mov	r3, r4
 80050f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d014      	beq.n	800512a <USB_ActivateEndpoint+0x4c2>
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	781b      	ldrb	r3, [r3, #0]
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	4413      	add	r3, r2
 800510a:	881b      	ldrh	r3, [r3, #0]
 800510c:	b29b      	uxth	r3, r3
 800510e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005116:	b29c      	uxth	r4, r3
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	781b      	ldrb	r3, [r3, #0]
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	441a      	add	r2, r3
 8005122:	4b2c      	ldr	r3, [pc, #176]	; (80051d4 <USB_ActivateEndpoint+0x56c>)
 8005124:	4323      	orrs	r3, r4
 8005126:	b29b      	uxth	r3, r3
 8005128:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	4413      	add	r3, r2
 8005134:	881b      	ldrh	r3, [r3, #0]
 8005136:	b29c      	uxth	r4, r3
 8005138:	4623      	mov	r3, r4
 800513a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800513e:	2b00      	cmp	r3, #0
 8005140:	d014      	beq.n	800516c <USB_ActivateEndpoint+0x504>
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	781b      	ldrb	r3, [r3, #0]
 8005148:	009b      	lsls	r3, r3, #2
 800514a:	4413      	add	r3, r2
 800514c:	881b      	ldrh	r3, [r3, #0]
 800514e:	b29b      	uxth	r3, r3
 8005150:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005154:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005158:	b29c      	uxth	r4, r3
 800515a:	687a      	ldr	r2, [r7, #4]
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	781b      	ldrb	r3, [r3, #0]
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	441a      	add	r2, r3
 8005164:	4b1c      	ldr	r3, [pc, #112]	; (80051d8 <USB_ActivateEndpoint+0x570>)
 8005166:	4323      	orrs	r3, r4
 8005168:	b29b      	uxth	r3, r3
 800516a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	781b      	ldrb	r3, [r3, #0]
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	4413      	add	r3, r2
 8005176:	881b      	ldrh	r3, [r3, #0]
 8005178:	b29b      	uxth	r3, r3
 800517a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800517e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005182:	b29c      	uxth	r4, r3
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	781b      	ldrb	r3, [r3, #0]
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	441a      	add	r2, r3
 800518e:	4b11      	ldr	r3, [pc, #68]	; (80051d4 <USB_ActivateEndpoint+0x56c>)
 8005190:	4323      	orrs	r3, r4
 8005192:	b29b      	uxth	r3, r3
 8005194:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	78db      	ldrb	r3, [r3, #3]
 800519a:	2b01      	cmp	r3, #1
 800519c:	d020      	beq.n	80051e0 <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	009b      	lsls	r3, r3, #2
 80051a6:	4413      	add	r3, r2
 80051a8:	881b      	ldrh	r3, [r3, #0]
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051b4:	b29c      	uxth	r4, r3
 80051b6:	f084 0320 	eor.w	r3, r4, #32
 80051ba:	b29c      	uxth	r4, r3
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	781b      	ldrb	r3, [r3, #0]
 80051c2:	009b      	lsls	r3, r3, #2
 80051c4:	441a      	add	r2, r3
 80051c6:	4b05      	ldr	r3, [pc, #20]	; (80051dc <USB_ActivateEndpoint+0x574>)
 80051c8:	4323      	orrs	r3, r4
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	8013      	strh	r3, [r2, #0]
 80051ce:	e01c      	b.n	800520a <USB_ActivateEndpoint+0x5a2>
 80051d0:	ffff8180 	.word	0xffff8180
 80051d4:	ffffc080 	.word	0xffffc080
 80051d8:	ffff80c0 	.word	0xffff80c0
 80051dc:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	781b      	ldrb	r3, [r3, #0]
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	4413      	add	r3, r2
 80051ea:	881b      	ldrh	r3, [r3, #0]
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051f6:	b29c      	uxth	r4, r3
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	441a      	add	r2, r3
 8005202:	4b0f      	ldr	r3, [pc, #60]	; (8005240 <USB_ActivateEndpoint+0x5d8>)
 8005204:	4323      	orrs	r3, r4
 8005206:	b29b      	uxth	r3, r3
 8005208:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	009b      	lsls	r3, r3, #2
 8005212:	4413      	add	r3, r2
 8005214:	881b      	ldrh	r3, [r3, #0]
 8005216:	b29b      	uxth	r3, r3
 8005218:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800521c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005220:	b29c      	uxth	r4, r3
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	781b      	ldrb	r3, [r3, #0]
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	441a      	add	r2, r3
 800522c:	4b04      	ldr	r3, [pc, #16]	; (8005240 <USB_ActivateEndpoint+0x5d8>)
 800522e:	4323      	orrs	r3, r4
 8005230:	b29b      	uxth	r3, r3
 8005232:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8005234:	7bfb      	ldrb	r3, [r7, #15]
}
 8005236:	4618      	mov	r0, r3
 8005238:	3710      	adds	r7, #16
 800523a:	46bd      	mov	sp, r7
 800523c:	bc90      	pop	{r4, r7}
 800523e:	4770      	bx	lr
 8005240:	ffff8080 	.word	0xffff8080

08005244 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005244:	b590      	push	{r4, r7, lr}
 8005246:	b08d      	sub	sp, #52	; 0x34
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	785b      	ldrb	r3, [r3, #1]
 8005252:	2b01      	cmp	r3, #1
 8005254:	f040 8160 	bne.w	8005518 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	699a      	ldr	r2, [r3, #24]
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	691b      	ldr	r3, [r3, #16]
 8005260:	429a      	cmp	r2, r3
 8005262:	d909      	bls.n	8005278 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	691b      	ldr	r3, [r3, #16]
 8005268:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	699a      	ldr	r2, [r3, #24]
 800526e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005270:	1ad2      	subs	r2, r2, r3
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	619a      	str	r2, [r3, #24]
 8005276:	e005      	b.n	8005284 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	699b      	ldr	r3, [r3, #24]
 800527c:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	2200      	movs	r2, #0
 8005282:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	7b1b      	ldrb	r3, [r3, #12]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d119      	bne.n	80052c0 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	6959      	ldr	r1, [r3, #20]
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	88da      	ldrh	r2, [r3, #6]
 8005294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005296:	b29b      	uxth	r3, r3
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f000 fbb8 	bl	8005a0e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800529e:	687c      	ldr	r4, [r7, #4]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	441c      	add	r4, r3
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	781b      	ldrb	r3, [r3, #0]
 80052ae:	011b      	lsls	r3, r3, #4
 80052b0:	4423      	add	r3, r4
 80052b2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80052b6:	461c      	mov	r4, r3
 80052b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	8023      	strh	r3, [r4, #0]
 80052be:	e10f      	b.n	80054e0 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	009b      	lsls	r3, r3, #2
 80052c8:	4413      	add	r3, r2
 80052ca:	881b      	ldrh	r3, [r3, #0]
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d065      	beq.n	80053a2 <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80052d6:	687c      	ldr	r4, [r7, #4]
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	785b      	ldrb	r3, [r3, #1]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d148      	bne.n	8005372 <USB_EPStartXfer+0x12e>
 80052e0:	687c      	ldr	r4, [r7, #4]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	441c      	add	r4, r3
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	011b      	lsls	r3, r3, #4
 80052f2:	4423      	add	r3, r4
 80052f4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80052f8:	461c      	mov	r4, r3
 80052fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d10e      	bne.n	800531e <USB_EPStartXfer+0xda>
 8005300:	8823      	ldrh	r3, [r4, #0]
 8005302:	b29b      	uxth	r3, r3
 8005304:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005308:	b29b      	uxth	r3, r3
 800530a:	8023      	strh	r3, [r4, #0]
 800530c:	8823      	ldrh	r3, [r4, #0]
 800530e:	b29b      	uxth	r3, r3
 8005310:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005314:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005318:	b29b      	uxth	r3, r3
 800531a:	8023      	strh	r3, [r4, #0]
 800531c:	e03d      	b.n	800539a <USB_EPStartXfer+0x156>
 800531e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005320:	2b3e      	cmp	r3, #62	; 0x3e
 8005322:	d810      	bhi.n	8005346 <USB_EPStartXfer+0x102>
 8005324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005326:	085b      	lsrs	r3, r3, #1
 8005328:	627b      	str	r3, [r7, #36]	; 0x24
 800532a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800532c:	f003 0301 	and.w	r3, r3, #1
 8005330:	2b00      	cmp	r3, #0
 8005332:	d002      	beq.n	800533a <USB_EPStartXfer+0xf6>
 8005334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005336:	3301      	adds	r3, #1
 8005338:	627b      	str	r3, [r7, #36]	; 0x24
 800533a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533c:	b29b      	uxth	r3, r3
 800533e:	029b      	lsls	r3, r3, #10
 8005340:	b29b      	uxth	r3, r3
 8005342:	8023      	strh	r3, [r4, #0]
 8005344:	e029      	b.n	800539a <USB_EPStartXfer+0x156>
 8005346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005348:	095b      	lsrs	r3, r3, #5
 800534a:	627b      	str	r3, [r7, #36]	; 0x24
 800534c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800534e:	f003 031f 	and.w	r3, r3, #31
 8005352:	2b00      	cmp	r3, #0
 8005354:	d102      	bne.n	800535c <USB_EPStartXfer+0x118>
 8005356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005358:	3b01      	subs	r3, #1
 800535a:	627b      	str	r3, [r7, #36]	; 0x24
 800535c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535e:	b29b      	uxth	r3, r3
 8005360:	029b      	lsls	r3, r3, #10
 8005362:	b29b      	uxth	r3, r3
 8005364:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005368:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800536c:	b29b      	uxth	r3, r3
 800536e:	8023      	strh	r3, [r4, #0]
 8005370:	e013      	b.n	800539a <USB_EPStartXfer+0x156>
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	785b      	ldrb	r3, [r3, #1]
 8005376:	2b01      	cmp	r3, #1
 8005378:	d10f      	bne.n	800539a <USB_EPStartXfer+0x156>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005380:	b29b      	uxth	r3, r3
 8005382:	441c      	add	r4, r3
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	781b      	ldrb	r3, [r3, #0]
 8005388:	011b      	lsls	r3, r3, #4
 800538a:	4423      	add	r3, r4
 800538c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005390:	60fb      	str	r3, [r7, #12]
 8005392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005394:	b29a      	uxth	r2, r3
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	895b      	ldrh	r3, [r3, #10]
 800539e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80053a0:	e063      	b.n	800546a <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	785b      	ldrb	r3, [r3, #1]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d148      	bne.n	800543c <USB_EPStartXfer+0x1f8>
 80053aa:	687c      	ldr	r4, [r7, #4]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	441c      	add	r4, r3
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	011b      	lsls	r3, r3, #4
 80053bc:	4423      	add	r3, r4
 80053be:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80053c2:	461c      	mov	r4, r3
 80053c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d10e      	bne.n	80053e8 <USB_EPStartXfer+0x1a4>
 80053ca:	8823      	ldrh	r3, [r4, #0]
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80053d2:	b29b      	uxth	r3, r3
 80053d4:	8023      	strh	r3, [r4, #0]
 80053d6:	8823      	ldrh	r3, [r4, #0]
 80053d8:	b29b      	uxth	r3, r3
 80053da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	8023      	strh	r3, [r4, #0]
 80053e6:	e03d      	b.n	8005464 <USB_EPStartXfer+0x220>
 80053e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ea:	2b3e      	cmp	r3, #62	; 0x3e
 80053ec:	d810      	bhi.n	8005410 <USB_EPStartXfer+0x1cc>
 80053ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f0:	085b      	lsrs	r3, r3, #1
 80053f2:	623b      	str	r3, [r7, #32]
 80053f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f6:	f003 0301 	and.w	r3, r3, #1
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d002      	beq.n	8005404 <USB_EPStartXfer+0x1c0>
 80053fe:	6a3b      	ldr	r3, [r7, #32]
 8005400:	3301      	adds	r3, #1
 8005402:	623b      	str	r3, [r7, #32]
 8005404:	6a3b      	ldr	r3, [r7, #32]
 8005406:	b29b      	uxth	r3, r3
 8005408:	029b      	lsls	r3, r3, #10
 800540a:	b29b      	uxth	r3, r3
 800540c:	8023      	strh	r3, [r4, #0]
 800540e:	e029      	b.n	8005464 <USB_EPStartXfer+0x220>
 8005410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005412:	095b      	lsrs	r3, r3, #5
 8005414:	623b      	str	r3, [r7, #32]
 8005416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005418:	f003 031f 	and.w	r3, r3, #31
 800541c:	2b00      	cmp	r3, #0
 800541e:	d102      	bne.n	8005426 <USB_EPStartXfer+0x1e2>
 8005420:	6a3b      	ldr	r3, [r7, #32]
 8005422:	3b01      	subs	r3, #1
 8005424:	623b      	str	r3, [r7, #32]
 8005426:	6a3b      	ldr	r3, [r7, #32]
 8005428:	b29b      	uxth	r3, r3
 800542a:	029b      	lsls	r3, r3, #10
 800542c:	b29b      	uxth	r3, r3
 800542e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005432:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005436:	b29b      	uxth	r3, r3
 8005438:	8023      	strh	r3, [r4, #0]
 800543a:	e013      	b.n	8005464 <USB_EPStartXfer+0x220>
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	785b      	ldrb	r3, [r3, #1]
 8005440:	2b01      	cmp	r3, #1
 8005442:	d10f      	bne.n	8005464 <USB_EPStartXfer+0x220>
 8005444:	687c      	ldr	r4, [r7, #4]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800544c:	b29b      	uxth	r3, r3
 800544e:	441c      	add	r4, r3
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	011b      	lsls	r3, r3, #4
 8005456:	4423      	add	r3, r4
 8005458:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800545c:	461c      	mov	r4, r3
 800545e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005460:	b29b      	uxth	r3, r3
 8005462:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	891b      	ldrh	r3, [r3, #8]
 8005468:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	6959      	ldr	r1, [r3, #20]
 800546e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005470:	b29b      	uxth	r3, r3
 8005472:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f000 faca 	bl	8005a0e <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	785b      	ldrb	r3, [r3, #1]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d115      	bne.n	80054ae <USB_EPStartXfer+0x26a>
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	781b      	ldrb	r3, [r3, #0]
 8005488:	009b      	lsls	r3, r3, #2
 800548a:	4413      	add	r3, r2
 800548c:	881b      	ldrh	r3, [r3, #0]
 800548e:	b29b      	uxth	r3, r3
 8005490:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005494:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005498:	b29c      	uxth	r4, r3
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	009b      	lsls	r3, r3, #2
 80054a2:	441a      	add	r2, r3
 80054a4:	4b9a      	ldr	r3, [pc, #616]	; (8005710 <USB_EPStartXfer+0x4cc>)
 80054a6:	4323      	orrs	r3, r4
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	8013      	strh	r3, [r2, #0]
 80054ac:	e018      	b.n	80054e0 <USB_EPStartXfer+0x29c>
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	785b      	ldrb	r3, [r3, #1]
 80054b2:	2b01      	cmp	r3, #1
 80054b4:	d114      	bne.n	80054e0 <USB_EPStartXfer+0x29c>
 80054b6:	687a      	ldr	r2, [r7, #4]
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	4413      	add	r3, r2
 80054c0:	881b      	ldrh	r3, [r3, #0]
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054cc:	b29c      	uxth	r4, r3
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	441a      	add	r2, r3
 80054d8:	4b8e      	ldr	r3, [pc, #568]	; (8005714 <USB_EPStartXfer+0x4d0>)
 80054da:	4323      	orrs	r3, r4
 80054dc:	b29b      	uxth	r3, r3
 80054de:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	4413      	add	r3, r2
 80054ea:	881b      	ldrh	r3, [r3, #0]
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054f6:	b29c      	uxth	r4, r3
 80054f8:	f084 0310 	eor.w	r3, r4, #16
 80054fc:	b29c      	uxth	r4, r3
 80054fe:	f084 0320 	eor.w	r3, r4, #32
 8005502:	b29c      	uxth	r4, r3
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	441a      	add	r2, r3
 800550e:	4b82      	ldr	r3, [pc, #520]	; (8005718 <USB_EPStartXfer+0x4d4>)
 8005510:	4323      	orrs	r3, r4
 8005512:	b29b      	uxth	r3, r3
 8005514:	8013      	strh	r3, [r2, #0]
 8005516:	e146      	b.n	80057a6 <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	699a      	ldr	r2, [r3, #24]
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	691b      	ldr	r3, [r3, #16]
 8005520:	429a      	cmp	r2, r3
 8005522:	d909      	bls.n	8005538 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	691b      	ldr	r3, [r3, #16]
 8005528:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	699a      	ldr	r2, [r3, #24]
 800552e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005530:	1ad2      	subs	r2, r2, r3
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	619a      	str	r2, [r3, #24]
 8005536:	e005      	b.n	8005544 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	699b      	ldr	r3, [r3, #24]
 800553c:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	2200      	movs	r2, #0
 8005542:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	7b1b      	ldrb	r3, [r3, #12]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d148      	bne.n	80055de <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800554c:	687c      	ldr	r4, [r7, #4]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005554:	b29b      	uxth	r3, r3
 8005556:	441c      	add	r4, r3
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	011b      	lsls	r3, r3, #4
 800555e:	4423      	add	r3, r4
 8005560:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005564:	461c      	mov	r4, r3
 8005566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005568:	2b00      	cmp	r3, #0
 800556a:	d10e      	bne.n	800558a <USB_EPStartXfer+0x346>
 800556c:	8823      	ldrh	r3, [r4, #0]
 800556e:	b29b      	uxth	r3, r3
 8005570:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005574:	b29b      	uxth	r3, r3
 8005576:	8023      	strh	r3, [r4, #0]
 8005578:	8823      	ldrh	r3, [r4, #0]
 800557a:	b29b      	uxth	r3, r3
 800557c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005580:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005584:	b29b      	uxth	r3, r3
 8005586:	8023      	strh	r3, [r4, #0]
 8005588:	e0f2      	b.n	8005770 <USB_EPStartXfer+0x52c>
 800558a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800558c:	2b3e      	cmp	r3, #62	; 0x3e
 800558e:	d810      	bhi.n	80055b2 <USB_EPStartXfer+0x36e>
 8005590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005592:	085b      	lsrs	r3, r3, #1
 8005594:	61fb      	str	r3, [r7, #28]
 8005596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005598:	f003 0301 	and.w	r3, r3, #1
 800559c:	2b00      	cmp	r3, #0
 800559e:	d002      	beq.n	80055a6 <USB_EPStartXfer+0x362>
 80055a0:	69fb      	ldr	r3, [r7, #28]
 80055a2:	3301      	adds	r3, #1
 80055a4:	61fb      	str	r3, [r7, #28]
 80055a6:	69fb      	ldr	r3, [r7, #28]
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	029b      	lsls	r3, r3, #10
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	8023      	strh	r3, [r4, #0]
 80055b0:	e0de      	b.n	8005770 <USB_EPStartXfer+0x52c>
 80055b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b4:	095b      	lsrs	r3, r3, #5
 80055b6:	61fb      	str	r3, [r7, #28]
 80055b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ba:	f003 031f 	and.w	r3, r3, #31
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d102      	bne.n	80055c8 <USB_EPStartXfer+0x384>
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	3b01      	subs	r3, #1
 80055c6:	61fb      	str	r3, [r7, #28]
 80055c8:	69fb      	ldr	r3, [r7, #28]
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	029b      	lsls	r3, r3, #10
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055d8:	b29b      	uxth	r3, r3
 80055da:	8023      	strh	r3, [r4, #0]
 80055dc:	e0c8      	b.n	8005770 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	785b      	ldrb	r3, [r3, #1]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d148      	bne.n	8005678 <USB_EPStartXfer+0x434>
 80055e6:	687c      	ldr	r4, [r7, #4]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	441c      	add	r4, r3
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	781b      	ldrb	r3, [r3, #0]
 80055f6:	011b      	lsls	r3, r3, #4
 80055f8:	4423      	add	r3, r4
 80055fa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80055fe:	461c      	mov	r4, r3
 8005600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005602:	2b00      	cmp	r3, #0
 8005604:	d10e      	bne.n	8005624 <USB_EPStartXfer+0x3e0>
 8005606:	8823      	ldrh	r3, [r4, #0]
 8005608:	b29b      	uxth	r3, r3
 800560a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800560e:	b29b      	uxth	r3, r3
 8005610:	8023      	strh	r3, [r4, #0]
 8005612:	8823      	ldrh	r3, [r4, #0]
 8005614:	b29b      	uxth	r3, r3
 8005616:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800561a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800561e:	b29b      	uxth	r3, r3
 8005620:	8023      	strh	r3, [r4, #0]
 8005622:	e03d      	b.n	80056a0 <USB_EPStartXfer+0x45c>
 8005624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005626:	2b3e      	cmp	r3, #62	; 0x3e
 8005628:	d810      	bhi.n	800564c <USB_EPStartXfer+0x408>
 800562a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800562c:	085b      	lsrs	r3, r3, #1
 800562e:	61bb      	str	r3, [r7, #24]
 8005630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005632:	f003 0301 	and.w	r3, r3, #1
 8005636:	2b00      	cmp	r3, #0
 8005638:	d002      	beq.n	8005640 <USB_EPStartXfer+0x3fc>
 800563a:	69bb      	ldr	r3, [r7, #24]
 800563c:	3301      	adds	r3, #1
 800563e:	61bb      	str	r3, [r7, #24]
 8005640:	69bb      	ldr	r3, [r7, #24]
 8005642:	b29b      	uxth	r3, r3
 8005644:	029b      	lsls	r3, r3, #10
 8005646:	b29b      	uxth	r3, r3
 8005648:	8023      	strh	r3, [r4, #0]
 800564a:	e029      	b.n	80056a0 <USB_EPStartXfer+0x45c>
 800564c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800564e:	095b      	lsrs	r3, r3, #5
 8005650:	61bb      	str	r3, [r7, #24]
 8005652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005654:	f003 031f 	and.w	r3, r3, #31
 8005658:	2b00      	cmp	r3, #0
 800565a:	d102      	bne.n	8005662 <USB_EPStartXfer+0x41e>
 800565c:	69bb      	ldr	r3, [r7, #24]
 800565e:	3b01      	subs	r3, #1
 8005660:	61bb      	str	r3, [r7, #24]
 8005662:	69bb      	ldr	r3, [r7, #24]
 8005664:	b29b      	uxth	r3, r3
 8005666:	029b      	lsls	r3, r3, #10
 8005668:	b29b      	uxth	r3, r3
 800566a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800566e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005672:	b29b      	uxth	r3, r3
 8005674:	8023      	strh	r3, [r4, #0]
 8005676:	e013      	b.n	80056a0 <USB_EPStartXfer+0x45c>
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	785b      	ldrb	r3, [r3, #1]
 800567c:	2b01      	cmp	r3, #1
 800567e:	d10f      	bne.n	80056a0 <USB_EPStartXfer+0x45c>
 8005680:	687c      	ldr	r4, [r7, #4]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005688:	b29b      	uxth	r3, r3
 800568a:	441c      	add	r4, r3
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	781b      	ldrb	r3, [r3, #0]
 8005690:	011b      	lsls	r3, r3, #4
 8005692:	4423      	add	r3, r4
 8005694:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005698:	461c      	mov	r4, r3
 800569a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800569c:	b29b      	uxth	r3, r3
 800569e:	8023      	strh	r3, [r4, #0]
 80056a0:	687c      	ldr	r4, [r7, #4]
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	785b      	ldrb	r3, [r3, #1]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d14e      	bne.n	8005748 <USB_EPStartXfer+0x504>
 80056aa:	687c      	ldr	r4, [r7, #4]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	441c      	add	r4, r3
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	781b      	ldrb	r3, [r3, #0]
 80056ba:	011b      	lsls	r3, r3, #4
 80056bc:	4423      	add	r3, r4
 80056be:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80056c2:	461c      	mov	r4, r3
 80056c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d10e      	bne.n	80056e8 <USB_EPStartXfer+0x4a4>
 80056ca:	8823      	ldrh	r3, [r4, #0]
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	8023      	strh	r3, [r4, #0]
 80056d6:	8823      	ldrh	r3, [r4, #0]
 80056d8:	b29b      	uxth	r3, r3
 80056da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	8023      	strh	r3, [r4, #0]
 80056e6:	e043      	b.n	8005770 <USB_EPStartXfer+0x52c>
 80056e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ea:	2b3e      	cmp	r3, #62	; 0x3e
 80056ec:	d816      	bhi.n	800571c <USB_EPStartXfer+0x4d8>
 80056ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f0:	085b      	lsrs	r3, r3, #1
 80056f2:	617b      	str	r3, [r7, #20]
 80056f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f6:	f003 0301 	and.w	r3, r3, #1
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d002      	beq.n	8005704 <USB_EPStartXfer+0x4c0>
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	3301      	adds	r3, #1
 8005702:	617b      	str	r3, [r7, #20]
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	b29b      	uxth	r3, r3
 8005708:	029b      	lsls	r3, r3, #10
 800570a:	b29b      	uxth	r3, r3
 800570c:	8023      	strh	r3, [r4, #0]
 800570e:	e02f      	b.n	8005770 <USB_EPStartXfer+0x52c>
 8005710:	ffff80c0 	.word	0xffff80c0
 8005714:	ffffc080 	.word	0xffffc080
 8005718:	ffff8080 	.word	0xffff8080
 800571c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800571e:	095b      	lsrs	r3, r3, #5
 8005720:	617b      	str	r3, [r7, #20]
 8005722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005724:	f003 031f 	and.w	r3, r3, #31
 8005728:	2b00      	cmp	r3, #0
 800572a:	d102      	bne.n	8005732 <USB_EPStartXfer+0x4ee>
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	3b01      	subs	r3, #1
 8005730:	617b      	str	r3, [r7, #20]
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	b29b      	uxth	r3, r3
 8005736:	029b      	lsls	r3, r3, #10
 8005738:	b29b      	uxth	r3, r3
 800573a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800573e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005742:	b29b      	uxth	r3, r3
 8005744:	8023      	strh	r3, [r4, #0]
 8005746:	e013      	b.n	8005770 <USB_EPStartXfer+0x52c>
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	785b      	ldrb	r3, [r3, #1]
 800574c:	2b01      	cmp	r3, #1
 800574e:	d10f      	bne.n	8005770 <USB_EPStartXfer+0x52c>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005756:	b29b      	uxth	r3, r3
 8005758:	441c      	add	r4, r3
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	011b      	lsls	r3, r3, #4
 8005760:	4423      	add	r3, r4
 8005762:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005766:	613b      	str	r3, [r7, #16]
 8005768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800576a:	b29a      	uxth	r2, r3
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	4413      	add	r3, r2
 800577a:	881b      	ldrh	r3, [r3, #0]
 800577c:	b29b      	uxth	r3, r3
 800577e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005786:	b29c      	uxth	r4, r3
 8005788:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800578c:	b29c      	uxth	r4, r3
 800578e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8005792:	b29c      	uxth	r4, r3
 8005794:	687a      	ldr	r2, [r7, #4]
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	781b      	ldrb	r3, [r3, #0]
 800579a:	009b      	lsls	r3, r3, #2
 800579c:	441a      	add	r2, r3
 800579e:	4b04      	ldr	r3, [pc, #16]	; (80057b0 <USB_EPStartXfer+0x56c>)
 80057a0:	4323      	orrs	r3, r4
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80057a6:	2300      	movs	r3, #0
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3734      	adds	r7, #52	; 0x34
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd90      	pop	{r4, r7, pc}
 80057b0:	ffff8080 	.word	0xffff8080

080057b4 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80057b4:	b490      	push	{r4, r7}
 80057b6:	b082      	sub	sp, #8
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	785b      	ldrb	r3, [r3, #1]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d018      	beq.n	80057f8 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	4413      	add	r3, r2
 80057d0:	881b      	ldrh	r3, [r3, #0]
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057dc:	b29c      	uxth	r4, r3
 80057de:	f084 0310 	eor.w	r3, r4, #16
 80057e2:	b29c      	uxth	r4, r3
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	441a      	add	r2, r3
 80057ee:	4b11      	ldr	r3, [pc, #68]	; (8005834 <USB_EPSetStall+0x80>)
 80057f0:	4323      	orrs	r3, r4
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	8013      	strh	r3, [r2, #0]
 80057f6:	e017      	b.n	8005828 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	4413      	add	r3, r2
 8005802:	881b      	ldrh	r3, [r3, #0]
 8005804:	b29b      	uxth	r3, r3
 8005806:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800580a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800580e:	b29c      	uxth	r4, r3
 8005810:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8005814:	b29c      	uxth	r4, r3
 8005816:	687a      	ldr	r2, [r7, #4]
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	781b      	ldrb	r3, [r3, #0]
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	441a      	add	r2, r3
 8005820:	4b04      	ldr	r3, [pc, #16]	; (8005834 <USB_EPSetStall+0x80>)
 8005822:	4323      	orrs	r3, r4
 8005824:	b29b      	uxth	r3, r3
 8005826:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005828:	2300      	movs	r3, #0
}
 800582a:	4618      	mov	r0, r3
 800582c:	3708      	adds	r7, #8
 800582e:	46bd      	mov	sp, r7
 8005830:	bc90      	pop	{r4, r7}
 8005832:	4770      	bx	lr
 8005834:	ffff8080 	.word	0xffff8080

08005838 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005838:	b490      	push	{r4, r7}
 800583a:	b082      	sub	sp, #8
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	7b1b      	ldrb	r3, [r3, #12]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d17d      	bne.n	8005946 <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	785b      	ldrb	r3, [r3, #1]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d03d      	beq.n	80058ce <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	781b      	ldrb	r3, [r3, #0]
 8005858:	009b      	lsls	r3, r3, #2
 800585a:	4413      	add	r3, r2
 800585c:	881b      	ldrh	r3, [r3, #0]
 800585e:	b29c      	uxth	r4, r3
 8005860:	4623      	mov	r3, r4
 8005862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005866:	2b00      	cmp	r3, #0
 8005868:	d014      	beq.n	8005894 <USB_EPClearStall+0x5c>
 800586a:	687a      	ldr	r2, [r7, #4]
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	009b      	lsls	r3, r3, #2
 8005872:	4413      	add	r3, r2
 8005874:	881b      	ldrh	r3, [r3, #0]
 8005876:	b29b      	uxth	r3, r3
 8005878:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800587c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005880:	b29c      	uxth	r4, r3
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	009b      	lsls	r3, r3, #2
 800588a:	441a      	add	r2, r3
 800588c:	4b31      	ldr	r3, [pc, #196]	; (8005954 <USB_EPClearStall+0x11c>)
 800588e:	4323      	orrs	r3, r4
 8005890:	b29b      	uxth	r3, r3
 8005892:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	78db      	ldrb	r3, [r3, #3]
 8005898:	2b01      	cmp	r3, #1
 800589a:	d054      	beq.n	8005946 <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	009b      	lsls	r3, r3, #2
 80058a4:	4413      	add	r3, r2
 80058a6:	881b      	ldrh	r3, [r3, #0]
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058b2:	b29c      	uxth	r4, r3
 80058b4:	f084 0320 	eor.w	r3, r4, #32
 80058b8:	b29c      	uxth	r4, r3
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	009b      	lsls	r3, r3, #2
 80058c2:	441a      	add	r2, r3
 80058c4:	4b24      	ldr	r3, [pc, #144]	; (8005958 <USB_EPClearStall+0x120>)
 80058c6:	4323      	orrs	r3, r4
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	8013      	strh	r3, [r2, #0]
 80058cc:	e03b      	b.n	8005946 <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80058ce:	687a      	ldr	r2, [r7, #4]
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	781b      	ldrb	r3, [r3, #0]
 80058d4:	009b      	lsls	r3, r3, #2
 80058d6:	4413      	add	r3, r2
 80058d8:	881b      	ldrh	r3, [r3, #0]
 80058da:	b29c      	uxth	r4, r3
 80058dc:	4623      	mov	r3, r4
 80058de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d014      	beq.n	8005910 <USB_EPClearStall+0xd8>
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	009b      	lsls	r3, r3, #2
 80058ee:	4413      	add	r3, r2
 80058f0:	881b      	ldrh	r3, [r3, #0]
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058fc:	b29c      	uxth	r4, r3
 80058fe:	687a      	ldr	r2, [r7, #4]
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	009b      	lsls	r3, r3, #2
 8005906:	441a      	add	r2, r3
 8005908:	4b14      	ldr	r3, [pc, #80]	; (800595c <USB_EPClearStall+0x124>)
 800590a:	4323      	orrs	r3, r4
 800590c:	b29b      	uxth	r3, r3
 800590e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005910:	687a      	ldr	r2, [r7, #4]
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	4413      	add	r3, r2
 800591a:	881b      	ldrh	r3, [r3, #0]
 800591c:	b29b      	uxth	r3, r3
 800591e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005922:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005926:	b29c      	uxth	r4, r3
 8005928:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800592c:	b29c      	uxth	r4, r3
 800592e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8005932:	b29c      	uxth	r4, r3
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	441a      	add	r2, r3
 800593e:	4b06      	ldr	r3, [pc, #24]	; (8005958 <USB_EPClearStall+0x120>)
 8005940:	4323      	orrs	r3, r4
 8005942:	b29b      	uxth	r3, r3
 8005944:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005946:	2300      	movs	r3, #0
}
 8005948:	4618      	mov	r0, r3
 800594a:	3708      	adds	r7, #8
 800594c:	46bd      	mov	sp, r7
 800594e:	bc90      	pop	{r4, r7}
 8005950:	4770      	bx	lr
 8005952:	bf00      	nop
 8005954:	ffff80c0 	.word	0xffff80c0
 8005958:	ffff8080 	.word	0xffff8080
 800595c:	ffffc080 	.word	0xffffc080

08005960 <USB_StopDevice>:
  * @brief  USB_StopDevice : Stop the usb device mode
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_StopDevice(USB_TypeDef *USBx)
{
 8005960:	b480      	push	{r7}
 8005962:	b083      	sub	sp, #12
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  /* disable all interrupts and force USB reset */
  USBx->CNTR = USB_CNTR_FRES;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2201      	movs	r2, #1
 800596c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* clear interrupt status register */
  USBx->ISTR = 0;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* switch-off device */
  USBx->CNTR = (USB_CNTR_FRES | USB_CNTR_PDWN);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2203      	movs	r2, #3
 800597c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005980:	2300      	movs	r3, #0
}
 8005982:	4618      	mov	r0, r3
 8005984:	370c      	adds	r7, #12
 8005986:	46bd      	mov	sp, r7
 8005988:	bc80      	pop	{r7}
 800598a:	4770      	bx	lr

0800598c <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800598c:	b480      	push	{r7}
 800598e:	b083      	sub	sp, #12
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	460b      	mov	r3, r1
 8005996:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005998:	78fb      	ldrb	r3, [r7, #3]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d103      	bne.n	80059a6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2280      	movs	r2, #128	; 0x80
 80059a2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80059a6:	2300      	movs	r3, #0
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	370c      	adds	r7, #12
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bc80      	pop	{r7}
 80059b0:	4770      	bx	lr

080059b2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80059b2:	b480      	push	{r7}
 80059b4:	b083      	sub	sp, #12
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80059ba:	2300      	movs	r3, #0
}
 80059bc:	4618      	mov	r0, r3
 80059be:	370c      	adds	r7, #12
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bc80      	pop	{r7}
 80059c4:	4770      	bx	lr

080059c6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80059c6:	b480      	push	{r7}
 80059c8:	b083      	sub	sp, #12
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80059ce:	2300      	movs	r3, #0
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	370c      	adds	r7, #12
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bc80      	pop	{r7}
 80059d8:	4770      	bx	lr

080059da <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80059da:	b480      	push	{r7}
 80059dc:	b085      	sub	sp, #20
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80059ec:	68fb      	ldr	r3, [r7, #12]
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3714      	adds	r7, #20
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bc80      	pop	{r7}
 80059f6:	4770      	bx	lr

080059f8 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b083      	sub	sp, #12
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005a02:	2300      	movs	r3, #0
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	370c      	adds	r7, #12
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bc80      	pop	{r7}
 8005a0c:	4770      	bx	lr

08005a0e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005a0e:	b480      	push	{r7}
 8005a10:	b08d      	sub	sp, #52	; 0x34
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	60f8      	str	r0, [r7, #12]
 8005a16:	60b9      	str	r1, [r7, #8]
 8005a18:	4611      	mov	r1, r2
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	460b      	mov	r3, r1
 8005a1e:	80fb      	strh	r3, [r7, #6]
 8005a20:	4613      	mov	r3, r2
 8005a22:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005a24:	88bb      	ldrh	r3, [r7, #4]
 8005a26:	3301      	adds	r3, #1
 8005a28:	085b      	lsrs	r3, r3, #1
 8005a2a:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005a34:	88fb      	ldrh	r3, [r7, #6]
 8005a36:	005a      	lsls	r2, r3, #1
 8005a38:	69fb      	ldr	r3, [r7, #28]
 8005a3a:	4413      	add	r3, r2
 8005a3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a40:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8005a42:	6a3b      	ldr	r3, [r7, #32]
 8005a44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a46:	e01e      	b.n	8005a86 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8005a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8005a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a50:	3301      	adds	r3, #1
 8005a52:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8005a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a56:	781b      	ldrb	r3, [r3, #0]
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	021b      	lsls	r3, r3, #8
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	461a      	mov	r2, r3
 8005a60:	69bb      	ldr	r3, [r7, #24]
 8005a62:	4313      	orrs	r3, r2
 8005a64:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	b29a      	uxth	r2, r3
 8005a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a6c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a70:	3302      	adds	r3, #2
 8005a72:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8005a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a76:	3302      	adds	r3, #2
 8005a78:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8005a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7c:	3301      	adds	r3, #1
 8005a7e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8005a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a82:	3b01      	subs	r3, #1
 8005a84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d1dd      	bne.n	8005a48 <USB_WritePMA+0x3a>
  }
}
 8005a8c:	bf00      	nop
 8005a8e:	3734      	adds	r7, #52	; 0x34
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bc80      	pop	{r7}
 8005a94:	4770      	bx	lr

08005a96 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005a96:	b480      	push	{r7}
 8005a98:	b08b      	sub	sp, #44	; 0x2c
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	60f8      	str	r0, [r7, #12]
 8005a9e:	60b9      	str	r1, [r7, #8]
 8005aa0:	4611      	mov	r1, r2
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	460b      	mov	r3, r1
 8005aa6:	80fb      	strh	r3, [r7, #6]
 8005aa8:	4613      	mov	r3, r2
 8005aaa:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005aac:	88bb      	ldrh	r3, [r7, #4]
 8005aae:	085b      	lsrs	r3, r3, #1
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005abc:	88fb      	ldrh	r3, [r7, #6]
 8005abe:	005a      	lsls	r2, r3, #1
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	4413      	add	r3, r2
 8005ac4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ac8:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8005aca:	69bb      	ldr	r3, [r7, #24]
 8005acc:	627b      	str	r3, [r7, #36]	; 0x24
 8005ace:	e01b      	b.n	8005b08 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8005ad0:	6a3b      	ldr	r3, [r7, #32]
 8005ad2:	881b      	ldrh	r3, [r3, #0]
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005ad8:	6a3b      	ldr	r3, [r7, #32]
 8005ada:	3302      	adds	r3, #2
 8005adc:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	b2da      	uxtb	r2, r3
 8005ae2:	69fb      	ldr	r3, [r7, #28]
 8005ae4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005ae6:	69fb      	ldr	r3, [r7, #28]
 8005ae8:	3301      	adds	r3, #1
 8005aea:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	0a1b      	lsrs	r3, r3, #8
 8005af0:	b2da      	uxtb	r2, r3
 8005af2:	69fb      	ldr	r3, [r7, #28]
 8005af4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005af6:	69fb      	ldr	r3, [r7, #28]
 8005af8:	3301      	adds	r3, #1
 8005afa:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8005afc:	6a3b      	ldr	r3, [r7, #32]
 8005afe:	3302      	adds	r3, #2
 8005b00:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8005b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b04:	3b01      	subs	r3, #1
 8005b06:	627b      	str	r3, [r7, #36]	; 0x24
 8005b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d1e0      	bne.n	8005ad0 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8005b0e:	88bb      	ldrh	r3, [r7, #4]
 8005b10:	f003 0301 	and.w	r3, r3, #1
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d007      	beq.n	8005b2a <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8005b1a:	6a3b      	ldr	r3, [r7, #32]
 8005b1c:	881b      	ldrh	r3, [r3, #0]
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	b2da      	uxtb	r2, r3
 8005b26:	69fb      	ldr	r3, [r7, #28]
 8005b28:	701a      	strb	r2, [r3, #0]
  }
}
 8005b2a:	bf00      	nop
 8005b2c:	372c      	adds	r7, #44	; 0x2c
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bc80      	pop	{r7}
 8005b32:	4770      	bx	lr

08005b34 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005b38:	4904      	ldr	r1, [pc, #16]	; (8005b4c <MX_FATFS_Init+0x18>)
 8005b3a:	4805      	ldr	r0, [pc, #20]	; (8005b50 <MX_FATFS_Init+0x1c>)
 8005b3c:	f002 fdc2 	bl	80086c4 <FATFS_LinkDriver>
 8005b40:	4603      	mov	r3, r0
 8005b42:	461a      	mov	r2, r3
 8005b44:	4b03      	ldr	r3, [pc, #12]	; (8005b54 <MX_FATFS_Init+0x20>)
 8005b46:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005b48:	bf00      	nop
 8005b4a:	bd80      	pop	{r7, pc}
 8005b4c:	200008a8 	.word	0x200008a8
 8005b50:	2000000c 	.word	0x2000000c
 8005b54:	200008ac 	.word	0x200008ac

08005b58 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b082      	sub	sp, #8
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	4603      	mov	r3, r0
 8005b60:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	if(W25qxx_Init())
 8005b62:	f7fb fa9f 	bl	80010a4 <W25qxx_Init>
 8005b66:	4603      	mov	r3, r0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d003      	beq.n	8005b74 <USER_initialize+0x1c>
		Stat = RES_OK;
 8005b6c:	4b06      	ldr	r3, [pc, #24]	; (8005b88 <USER_initialize+0x30>)
 8005b6e:	2200      	movs	r2, #0
 8005b70:	701a      	strb	r2, [r3, #0]
 8005b72:	e002      	b.n	8005b7a <USER_initialize+0x22>
	else
		Stat = STA_NOINIT;
 8005b74:	4b04      	ldr	r3, [pc, #16]	; (8005b88 <USER_initialize+0x30>)
 8005b76:	2201      	movs	r2, #1
 8005b78:	701a      	strb	r2, [r3, #0]
    return Stat;
 8005b7a:	4b03      	ldr	r3, [pc, #12]	; (8005b88 <USER_initialize+0x30>)
 8005b7c:	781b      	ldrb	r3, [r3, #0]
 8005b7e:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3708      	adds	r7, #8
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}
 8005b88:	20000009 	.word	0x20000009

08005b8c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b083      	sub	sp, #12
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	4603      	mov	r3, r0
 8005b94:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = RES_OK;
 8005b96:	4b05      	ldr	r3, [pc, #20]	; (8005bac <USER_status+0x20>)
 8005b98:	2200      	movs	r2, #0
 8005b9a:	701a      	strb	r2, [r3, #0]
    return Stat;
 8005b9c:	4b03      	ldr	r3, [pc, #12]	; (8005bac <USER_status+0x20>)
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	370c      	adds	r7, #12
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bc80      	pop	{r7}
 8005baa:	4770      	bx	lr
 8005bac:	20000009 	.word	0x20000009

08005bb0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b084      	sub	sp, #16
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	60b9      	str	r1, [r7, #8]
 8005bb8:	607a      	str	r2, [r7, #4]
 8005bba:	603b      	str	r3, [r7, #0]
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	if(!count)
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d114      	bne.n	8005bf0 <USER_read+0x40>
	  {
		return RES_PARERR;
 8005bc6:	2304      	movs	r3, #4
 8005bc8:	e016      	b.n	8005bf8 <USER_read+0x48>
	  }

	  for(; count > 0; count--)
	  {
		  W25qxx_ReadBytes(sector * FLASH_SECTOR_SIZE, buff, FLASH_SECTOR_SIZE);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	025b      	lsls	r3, r3, #9
 8005bce:	4618      	mov	r0, r3
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bd6:	4619      	mov	r1, r3
 8005bd8:	f7fb fb7e 	bl	80012d8 <W25qxx_ReadBytes>
	    sector++;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	3301      	adds	r3, #1
 8005be0:	607b      	str	r3, [r7, #4]
	    buff += FLASH_SECTOR_SIZE;
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005be8:	60bb      	str	r3, [r7, #8]
	  for(; count > 0; count--)
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	3b01      	subs	r3, #1
 8005bee:	603b      	str	r3, [r7, #0]
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d1e9      	bne.n	8005bca <USER_read+0x1a>
	  }

	  return RES_OK;
 8005bf6:	2300      	movs	r3, #0

  /* USER CODE END READ */
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3710      	adds	r7, #16
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}

08005c00 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b084      	sub	sp, #16
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	60b9      	str	r1, [r7, #8]
 8005c08:	607a      	str	r2, [r7, #4]
 8005c0a:	603b      	str	r3, [r7, #0]
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	if(!count)
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d110      	bne.n	8005c38 <USER_write+0x38>
	  {
	    return RES_PARERR;
 8005c16:	2304      	movs	r3, #4
 8005c18:	e011      	b.n	8005c3e <USER_write+0x3e>
	  }

	  for(; count > 0; count--)
	  {
		  W25qxx_WriteByte(sector * FLASH_SECTOR_SIZE, (uint8_t *)buff);
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	4619      	mov	r1, r3
 8005c1e:	2000      	movs	r0, #0
 8005c20:	f7fb fb08 	bl	8001234 <W25qxx_WriteByte>
	    sector++;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	3301      	adds	r3, #1
 8005c28:	607b      	str	r3, [r7, #4]
	    buff += FLASH_SECTOR_SIZE;
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005c30:	60bb      	str	r3, [r7, #8]
	  for(; count > 0; count--)
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	3b01      	subs	r3, #1
 8005c36:	603b      	str	r3, [r7, #0]
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d1ed      	bne.n	8005c1a <USER_write+0x1a>
	  }

  /* USER CODE END WRITE */
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3710      	adds	r7, #16
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
	...

08005c48 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b085      	sub	sp, #20
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	4603      	mov	r3, r0
 8005c50:	603a      	str	r2, [r7, #0]
 8005c52:	71fb      	strb	r3, [r7, #7]
 8005c54:	460b      	mov	r3, r1
 8005c56:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	DRESULT res;

	  switch(cmd)
 8005c58:	79bb      	ldrb	r3, [r7, #6]
 8005c5a:	2b03      	cmp	r3, #3
 8005c5c:	d821      	bhi.n	8005ca2 <USER_ioctl+0x5a>
 8005c5e:	a201      	add	r2, pc, #4	; (adr r2, 8005c64 <USER_ioctl+0x1c>)
 8005c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c64:	08005c75 	.word	0x08005c75
 8005c68:	08005c95 	.word	0x08005c95
 8005c6c:	08005c7b 	.word	0x08005c7b
 8005c70:	08005c89 	.word	0x08005c89
	  {
	  case CTRL_SYNC:
	    res = RES_OK;
 8005c74:	2300      	movs	r3, #0
 8005c76:	73fb      	strb	r3, [r7, #15]
	    break;
 8005c78:	e016      	b.n	8005ca8 <USER_ioctl+0x60>

	  case GET_SECTOR_SIZE:
	    *(WORD*)buff = FLASH_SECTOR_SIZE;
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c80:	801a      	strh	r2, [r3, #0]
	    res = RES_OK;
 8005c82:	2300      	movs	r3, #0
 8005c84:	73fb      	strb	r3, [r7, #15]
	    break;
 8005c86:	e00f      	b.n	8005ca8 <USER_ioctl+0x60>

	  case GET_BLOCK_SIZE:
	    *(WORD*)buff = FLASH_BLOCK_SIZE;
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	2208      	movs	r2, #8
 8005c8c:	801a      	strh	r2, [r3, #0]
	    res = RES_OK;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	73fb      	strb	r3, [r7, #15]
	    break;
 8005c92:	e009      	b.n	8005ca8 <USER_ioctl+0x60>

	  case GET_SECTOR_COUNT:
	    *(DWORD*)buff = FLASH_SECTOR_COUNT;
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	f44f 32c8 	mov.w	r2, #102400	; 0x19000
 8005c9a:	601a      	str	r2, [r3, #0]
	    res = RES_OK;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	73fb      	strb	r3, [r7, #15]
	    break;
 8005ca0:	e002      	b.n	8005ca8 <USER_ioctl+0x60>

	  default:
	    res = RES_PARERR;
 8005ca2:	2304      	movs	r3, #4
 8005ca4:	73fb      	strb	r3, [r7, #15]
	    break;
 8005ca6:	bf00      	nop
	  }

	  return res;
 8005ca8:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3714      	adds	r7, #20
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bc80      	pop	{r7}
 8005cb2:	4770      	bx	lr

08005cb4 <__NVIC_SystemReset>:
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005cb8:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8005cbc:	4b05      	ldr	r3, [pc, #20]	; (8005cd4 <__NVIC_SystemReset+0x20>)
 8005cbe:	68db      	ldr	r3, [r3, #12]
 8005cc0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8005cc4:	4903      	ldr	r1, [pc, #12]	; (8005cd4 <__NVIC_SystemReset+0x20>)
 8005cc6:	4b04      	ldr	r3, [pc, #16]	; (8005cd8 <__NVIC_SystemReset+0x24>)
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	60cb      	str	r3, [r1, #12]
 8005ccc:	f3bf 8f4f 	dsb	sy
    __NOP();
 8005cd0:	bf00      	nop
 8005cd2:	e7fd      	b.n	8005cd0 <__NVIC_SystemReset+0x1c>
 8005cd4:	e000ed00 	.word	0xe000ed00
 8005cd8:	05fa0004 	.word	0x05fa0004

08005cdc <USBD_DFU_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_DFU_Init(USBD_HandleTypeDef *pdev,
                              uint8_t cfgidx)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b084      	sub	sp, #16
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	460b      	mov	r3, r1
 8005ce6:	70fb      	strb	r3, [r7, #3]
  USBD_DFU_HandleTypeDef   *hdfu;

  /* Allocate Audio structure */
  pdev->pClassData = USBD_malloc(sizeof(USBD_DFU_HandleTypeDef));
 8005ce8:	f240 401c 	movw	r0, #1052	; 0x41c
 8005cec:	f003 f8be 	bl	8008e6c <USBD_static_malloc>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d101      	bne.n	8005d06 <USBD_DFU_Init+0x2a>
  {
    return USBD_FAIL;
 8005d02:	2302      	movs	r3, #2
 8005d04:	e03f      	b.n	8005d86 <USBD_DFU_Init+0xaa>
  }
  else
  {
    hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d0c:	60fb      	str	r3, [r7, #12]

    hdfu->alt_setting = 0U;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2200      	movs	r2, #0
 8005d12:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005d1c:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    hdfu->wblock_num = 0U;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2200      	movs	r2, #0
 8005d24:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

    hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2200      	movs	r2, #0
 8005d34:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
    hdfu->dev_state = DFU_STATE_IDLE;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2202      	movs	r2, #2
 8005d3c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2200      	movs	r2, #0
 8005d44:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2200      	movs	r2, #0
 8005d54:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = DFU_STATE_IDLE;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2202      	movs	r2, #2
 8005d64:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415

    /* Initialize Hardware layer */
    if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Init() != USBD_OK)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	4798      	blx	r3
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d001      	beq.n	8005d84 <USBD_DFU_Init+0xa8>
    {
      return USBD_FAIL;
 8005d80:	2302      	movs	r3, #2
 8005d82:	e000      	b.n	8005d86 <USBD_DFU_Init+0xaa>
    }
  }
  return USBD_OK;
 8005d84:	2300      	movs	r3, #0
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3710      	adds	r7, #16
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}

08005d8e <USBD_DFU_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_DFU_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 8005d8e:	b580      	push	{r7, lr}
 8005d90:	b084      	sub	sp, #16
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
 8005d96:	460b      	mov	r3, r1
 8005d98:	70fb      	strb	r3, [r7, #3]
  USBD_DFU_HandleTypeDef   *hdfu;
  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005da0:	60fb      	str	r3, [r7, #12]

  hdfu->wblock_num = 0U;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2200      	movs	r2, #0
 8005da6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdfu->wlength = 0U;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2200      	movs	r2, #0
 8005dae:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

  hdfu->dev_state = DFU_STATE_IDLE;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2202      	movs	r2, #2
 8005db6:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2202      	movs	r2, #2
 8005dc6:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d00e      	beq.n	8005df2 <USBD_DFU_DeInit+0x64>
  {
    /* De-Initialize Hardware layer */
    ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->DeInit();
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005de4:	4618      	mov	r0, r3
 8005de6:	f003 f84d 	bl	8008e84 <USBD_static_free>
    pdev->pClassData = NULL;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2200      	movs	r2, #0
 8005dee:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 8005df2:	2300      	movs	r3, #0
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3710      	adds	r7, #16
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}

08005dfc <USBD_DFU_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_DFU_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b086      	sub	sp, #24
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef   *hdfu;
  uint8_t *pbuf = 0U;
 8005e06:	2300      	movs	r3, #0
 8005e08:	617b      	str	r3, [r7, #20]
  uint16_t len = 0U;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	827b      	strh	r3, [r7, #18]
  uint16_t status_info = 0U;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	817b      	strh	r3, [r7, #10]
  uint8_t ret = USBD_OK;
 8005e12:	2300      	movs	r3, #0
 8005e14:	747b      	strb	r3, [r7, #17]

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e1c:	60fb      	str	r3, [r7, #12]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	781b      	ldrb	r3, [r3, #0]
 8005e22:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d03f      	beq.n	8005eaa <USBD_DFU_Setup+0xae>
 8005e2a:	2b20      	cmp	r3, #32
 8005e2c:	f040 80c2 	bne.w	8005fb4 <USBD_DFU_Setup+0x1b8>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	785b      	ldrb	r3, [r3, #1]
 8005e34:	2b06      	cmp	r3, #6
 8005e36:	d830      	bhi.n	8005e9a <USBD_DFU_Setup+0x9e>
 8005e38:	a201      	add	r2, pc, #4	; (adr r2, 8005e40 <USBD_DFU_Setup+0x44>)
 8005e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e3e:	bf00      	nop
 8005e40:	08005e91 	.word	0x08005e91
 8005e44:	08005e5d 	.word	0x08005e5d
 8005e48:	08005e67 	.word	0x08005e67
 8005e4c:	08005e71 	.word	0x08005e71
 8005e50:	08005e79 	.word	0x08005e79
 8005e54:	08005e81 	.word	0x08005e81
 8005e58:	08005e89 	.word	0x08005e89
      {
        case DFU_DNLOAD:
          DFU_Download(pdev, req);
 8005e5c:	6839      	ldr	r1, [r7, #0]
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f000 fa90 	bl	8006384 <DFU_Download>
          break;
 8005e64:	e020      	b.n	8005ea8 <USBD_DFU_Setup+0xac>

        case DFU_UPLOAD:
          DFU_Upload(pdev, req);
 8005e66:	6839      	ldr	r1, [r7, #0]
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f000 faf5 	bl	8006458 <DFU_Upload>
          break;
 8005e6e:	e01b      	b.n	8005ea8 <USBD_DFU_Setup+0xac>

        case DFU_GETSTATUS:
          DFU_GetStatus(pdev);
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f000 fbcd 	bl	8006610 <DFU_GetStatus>
          break;
 8005e76:	e017      	b.n	8005ea8 <USBD_DFU_Setup+0xac>

        case DFU_CLRSTATUS:
          DFU_ClearStatus(pdev);
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f000 fc7b 	bl	8006774 <DFU_ClearStatus>
          break;
 8005e7e:	e013      	b.n	8005ea8 <USBD_DFU_Setup+0xac>

        case DFU_GETSTATE:
          DFU_GetState(pdev);
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f000 fcc6 	bl	8006812 <DFU_GetState>
          break;
 8005e86:	e00f      	b.n	8005ea8 <USBD_DFU_Setup+0xac>

        case DFU_ABORT:
          DFU_Abort(pdev);
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f000 fcd6 	bl	800683a <DFU_Abort>
          break;
 8005e8e:	e00b      	b.n	8005ea8 <USBD_DFU_Setup+0xac>

        case DFU_DETACH:
          DFU_Detach(pdev, req);
 8005e90:	6839      	ldr	r1, [r7, #0]
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 fa16 	bl	80062c4 <DFU_Detach>
          break;
 8005e98:	e006      	b.n	8005ea8 <USBD_DFU_Setup+0xac>

        default:
          USBD_CtlError(pdev, req);
 8005e9a:	6839      	ldr	r1, [r7, #0]
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f001 fd2d 	bl	80078fc <USBD_CtlError>
          ret = USBD_FAIL;
 8005ea2:	2302      	movs	r3, #2
 8005ea4:	747b      	strb	r3, [r7, #17]
          break;
 8005ea6:	bf00      	nop
      }
      break;
 8005ea8:	e08b      	b.n	8005fc2 <USBD_DFU_Setup+0x1c6>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	785b      	ldrb	r3, [r3, #1]
 8005eae:	2b0b      	cmp	r3, #11
 8005eb0:	d878      	bhi.n	8005fa4 <USBD_DFU_Setup+0x1a8>
 8005eb2:	a201      	add	r2, pc, #4	; (adr r2, 8005eb8 <USBD_DFU_Setup+0xbc>)
 8005eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eb8:	08005ee9 	.word	0x08005ee9
 8005ebc:	08005fa5 	.word	0x08005fa5
 8005ec0:	08005fa5 	.word	0x08005fa5
 8005ec4:	08005fa5 	.word	0x08005fa5
 8005ec8:	08005fa5 	.word	0x08005fa5
 8005ecc:	08005fa5 	.word	0x08005fa5
 8005ed0:	08005f11 	.word	0x08005f11
 8005ed4:	08005fa5 	.word	0x08005fa5
 8005ed8:	08005fa5 	.word	0x08005fa5
 8005edc:	08005fa5 	.word	0x08005fa5
 8005ee0:	08005f3b 	.word	0x08005f3b
 8005ee4:	08005f65 	.word	0x08005f65
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005eee:	2b03      	cmp	r3, #3
 8005ef0:	d107      	bne.n	8005f02 <USBD_DFU_Setup+0x106>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8005ef2:	f107 030a 	add.w	r3, r7, #10
 8005ef6:	2202      	movs	r2, #2
 8005ef8:	4619      	mov	r1, r3
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f001 fd68 	bl	80079d0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005f00:	e057      	b.n	8005fb2 <USBD_DFU_Setup+0x1b6>
            USBD_CtlError(pdev, req);
 8005f02:	6839      	ldr	r1, [r7, #0]
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f001 fcf9 	bl	80078fc <USBD_CtlError>
            ret = USBD_FAIL;
 8005f0a:	2302      	movs	r3, #2
 8005f0c:	747b      	strb	r3, [r7, #17]
          break;
 8005f0e:	e050      	b.n	8005fb2 <USBD_DFU_Setup+0x1b6>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == DFU_DESCRIPTOR_TYPE)
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	885b      	ldrh	r3, [r3, #2]
 8005f14:	0a1b      	lsrs	r3, r3, #8
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	2b21      	cmp	r3, #33	; 0x21
 8005f1a:	d107      	bne.n	8005f2c <USBD_DFU_Setup+0x130>
          {
            pbuf = USBD_DFU_CfgDesc + (9U * (USBD_DFU_MAX_ITF_NUM + 1U));
 8005f1c:	4b2b      	ldr	r3, [pc, #172]	; (8005fcc <USBD_DFU_Setup+0x1d0>)
 8005f1e:	617b      	str	r3, [r7, #20]
            len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	88db      	ldrh	r3, [r3, #6]
 8005f24:	2b09      	cmp	r3, #9
 8005f26:	bf28      	it	cs
 8005f28:	2309      	movcs	r3, #9
 8005f2a:	827b      	strh	r3, [r7, #18]
          }

          USBD_CtlSendData(pdev, pbuf, len);
 8005f2c:	8a7b      	ldrh	r3, [r7, #18]
 8005f2e:	461a      	mov	r2, r3
 8005f30:	6979      	ldr	r1, [r7, #20]
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f001 fd4c 	bl	80079d0 <USBD_CtlSendData>
          break;
 8005f38:	e03b      	b.n	8005fb2 <USBD_DFU_Setup+0x1b6>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f40:	2b03      	cmp	r3, #3
 8005f42:	d108      	bne.n	8005f56 <USBD_DFU_Setup+0x15a>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hdfu->alt_setting, 1U);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	4619      	mov	r1, r3
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f001 fd3e 	bl	80079d0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005f54:	e02d      	b.n	8005fb2 <USBD_DFU_Setup+0x1b6>
            USBD_CtlError(pdev, req);
 8005f56:	6839      	ldr	r1, [r7, #0]
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f001 fccf 	bl	80078fc <USBD_CtlError>
            ret = USBD_FAIL;
 8005f5e:	2302      	movs	r3, #2
 8005f60:	747b      	strb	r3, [r7, #17]
          break;
 8005f62:	e026      	b.n	8005fb2 <USBD_DFU_Setup+0x1b6>

        case USB_REQ_SET_INTERFACE:
          if ((uint8_t)(req->wValue) < USBD_DFU_MAX_ITF_NUM)
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	885b      	ldrh	r3, [r3, #2]
 8005f68:	b2db      	uxtb	r3, r3
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d113      	bne.n	8005f96 <USBD_DFU_Setup+0x19a>
          {
            if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f74:	2b03      	cmp	r3, #3
 8005f76:	d107      	bne.n	8005f88 <USBD_DFU_Setup+0x18c>
            {
              hdfu->alt_setting = (uint8_t)(req->wValue);
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	885b      	ldrh	r3, [r3, #2]
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	461a      	mov	r2, r3
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
          {
            /* Call the error management function (command will be nacked */
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005f86:	e014      	b.n	8005fb2 <USBD_DFU_Setup+0x1b6>
              USBD_CtlError(pdev, req);
 8005f88:	6839      	ldr	r1, [r7, #0]
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f001 fcb6 	bl	80078fc <USBD_CtlError>
              ret = USBD_FAIL;
 8005f90:	2302      	movs	r3, #2
 8005f92:	747b      	strb	r3, [r7, #17]
          break;
 8005f94:	e00d      	b.n	8005fb2 <USBD_DFU_Setup+0x1b6>
            USBD_CtlError(pdev, req);
 8005f96:	6839      	ldr	r1, [r7, #0]
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f001 fcaf 	bl	80078fc <USBD_CtlError>
            ret = USBD_FAIL;
 8005f9e:	2302      	movs	r3, #2
 8005fa0:	747b      	strb	r3, [r7, #17]
          break;
 8005fa2:	e006      	b.n	8005fb2 <USBD_DFU_Setup+0x1b6>

        default:
          USBD_CtlError(pdev, req);
 8005fa4:	6839      	ldr	r1, [r7, #0]
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f001 fca8 	bl	80078fc <USBD_CtlError>
          ret = USBD_FAIL;
 8005fac:	2302      	movs	r3, #2
 8005fae:	747b      	strb	r3, [r7, #17]
          break;
 8005fb0:	bf00      	nop
      }
      break;
 8005fb2:	e006      	b.n	8005fc2 <USBD_DFU_Setup+0x1c6>

    default:
      USBD_CtlError(pdev, req);
 8005fb4:	6839      	ldr	r1, [r7, #0]
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f001 fca0 	bl	80078fc <USBD_CtlError>
      ret = USBD_FAIL;
 8005fbc:	2302      	movs	r3, #2
 8005fbe:	747b      	strb	r3, [r7, #17]
      break;
 8005fc0:	bf00      	nop
  }

  return ret;
 8005fc2:	7c7b      	ldrb	r3, [r7, #17]
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3718      	adds	r7, #24
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}
 8005fcc:	2000006e 	.word	0x2000006e

08005fd0 <USBD_DFU_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_DFU_GetCfgDesc(uint16_t *length)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b083      	sub	sp, #12
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_DFU_CfgDesc);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	221b      	movs	r2, #27
 8005fdc:	801a      	strh	r2, [r3, #0]
  return USBD_DFU_CfgDesc;
 8005fde:	4b03      	ldr	r3, [pc, #12]	; (8005fec <USBD_DFU_GetCfgDesc+0x1c>)
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	370c      	adds	r7, #12
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bc80      	pop	{r7}
 8005fe8:	4770      	bx	lr
 8005fea:	bf00      	nop
 8005fec:	2000005c 	.word	0x2000005c

08005ff0 <USBD_DFU_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_DFU_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b083      	sub	sp, #12
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	460b      	mov	r3, r1
 8005ffa:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 8005ffc:	2300      	movs	r3, #0
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	370c      	adds	r7, #12
 8006002:	46bd      	mov	sp, r7
 8006004:	bc80      	pop	{r7}
 8006006:	4770      	bx	lr

08006008 <USBD_DFU_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006008:	b480      	push	{r7}
 800600a:	b083      	sub	sp, #12
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]

  return USBD_OK;
 8006010:	2300      	movs	r3, #0
}
 8006012:	4618      	mov	r0, r3
 8006014:	370c      	adds	r7, #12
 8006016:	46bd      	mov	sp, r7
 8006018:	bc80      	pop	{r7}
 800601a:	4770      	bx	lr

0800601c <USBD_DFU_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b086      	sub	sp, #24
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  uint32_t addr;
  USBD_SetupReqTypedef     req;
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800602a:	617b      	str	r3, [r7, #20]

  if (hdfu->dev_state == DFU_STATE_DNLOAD_BUSY)
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8006032:	2b04      	cmp	r3, #4
 8006034:	f040 80cb 	bne.w	80061ce <USBD_DFU_EP0_TxReady+0x1b2>
  {
    /* Decode the Special Command*/
    if (hdfu->wblock_num == 0U)
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800603e:	2b00      	cmp	r3, #0
 8006040:	f040 8086 	bne.w	8006150 <USBD_DFU_EP0_TxReady+0x134>
    {
      if ((hdfu->buffer.d8[0] == DFU_CMD_GETCOMMANDS) && (hdfu->wlength == 1U))
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d105      	bne.n	8006058 <USBD_DFU_EP0_TxReady+0x3c>
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006052:	2b01      	cmp	r3, #1
 8006054:	f000 809b 	beq.w	800618e <USBD_DFU_EP0_TxReady+0x172>
      {

      }
      else if ((hdfu->buffer.d8[0] == DFU_CMD_SETADDRESSPOINTER) && (hdfu->wlength == 5U))
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	781b      	ldrb	r3, [r3, #0]
 800605c:	2b21      	cmp	r3, #33	; 0x21
 800605e:	d129      	bne.n	80060b4 <USBD_DFU_EP0_TxReady+0x98>
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006066:	2b05      	cmp	r3, #5
 8006068:	d124      	bne.n	80060b4 <USBD_DFU_EP0_TxReady+0x98>
      {
        hdfu->data_ptr = hdfu->buffer.d8[1];
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	785b      	ldrb	r3, [r3, #1]
 800606e:	461a      	mov	r2, r3
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	789b      	ldrb	r3, [r3, #2]
 8006080:	021b      	lsls	r3, r3, #8
 8006082:	441a      	add	r2, r3
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	78db      	ldrb	r3, [r3, #3]
 8006094:	041b      	lsls	r3, r3, #16
 8006096:	441a      	add	r2, r3
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	791b      	ldrb	r3, [r3, #4]
 80060a8:	061b      	lsls	r3, r3, #24
 80060aa:	441a      	add	r2, r3
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 80060b2:	e06c      	b.n	800618e <USBD_DFU_EP0_TxReady+0x172>
      }
      else if ((hdfu->buffer.d8[0] == DFU_CMD_ERASE) && (hdfu->wlength == 5U))
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	781b      	ldrb	r3, [r3, #0]
 80060b8:	2b41      	cmp	r3, #65	; 0x41
 80060ba:	d136      	bne.n	800612a <USBD_DFU_EP0_TxReady+0x10e>
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80060c2:	2b05      	cmp	r3, #5
 80060c4:	d131      	bne.n	800612a <USBD_DFU_EP0_TxReady+0x10e>
      {
        hdfu->data_ptr = hdfu->buffer.d8[1];
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	785b      	ldrb	r3, [r3, #1]
 80060ca:	461a      	mov	r2, r3
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	789b      	ldrb	r3, [r3, #2]
 80060dc:	021b      	lsls	r3, r3, #8
 80060de:	441a      	add	r2, r3
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	78db      	ldrb	r3, [r3, #3]
 80060f0:	041b      	lsls	r3, r3, #16
 80060f2:	441a      	add	r2, r3
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	791b      	ldrb	r3, [r3, #4]
 8006104:	061b      	lsls	r3, r3, #24
 8006106:	441a      	add	r2, r3
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

        if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Erase(hdfu->data_ptr) != USBD_OK)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006114:	68db      	ldr	r3, [r3, #12]
 8006116:	697a      	ldr	r2, [r7, #20]
 8006118:	f8d2 2408 	ldr.w	r2, [r2, #1032]	; 0x408
 800611c:	4610      	mov	r0, r2
 800611e:	4798      	blx	r3
 8006120:	4603      	mov	r3, r0
 8006122:	2b00      	cmp	r3, #0
 8006124:	d033      	beq.n	800618e <USBD_DFU_EP0_TxReady+0x172>
        {
          return USBD_FAIL;
 8006126:	2302      	movs	r3, #2
 8006128:	e05a      	b.n	80061e0 <USBD_DFU_EP0_TxReady+0x1c4>
        }
      }
      else
      {
        /* Reset the global length and block number */
        hdfu->wlength = 0U;
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	2200      	movs	r2, #0
 800612e:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
        hdfu->wblock_num = 0U;
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	2200      	movs	r2, #0
 8006136:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
        /* Call the error management function (command will be nacked) */
        req.bmRequest = 0U;
 800613a:	2300      	movs	r3, #0
 800613c:	723b      	strb	r3, [r7, #8]
        req.wLength = 1U;
 800613e:	2301      	movs	r3, #1
 8006140:	81fb      	strh	r3, [r7, #14]
        USBD_CtlError(pdev, &req);
 8006142:	f107 0308 	add.w	r3, r7, #8
 8006146:	4619      	mov	r1, r3
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f001 fbd7 	bl	80078fc <USBD_CtlError>
 800614e:	e01e      	b.n	800618e <USBD_DFU_EP0_TxReady+0x172>
      }
    }
    /* Regular Download Command */
    else
    {
      if (hdfu->wblock_num > 1U)
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8006156:	2b01      	cmp	r3, #1
 8006158:	d919      	bls.n	800618e <USBD_DFU_EP0_TxReady+0x172>
      {
        /* Decode the required address */
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8006160:	4b21      	ldr	r3, [pc, #132]	; (80061e8 <USBD_DFU_EP0_TxReady+0x1cc>)
 8006162:	4413      	add	r3, r2
 8006164:	029a      	lsls	r2, r3, #10
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800616c:	4413      	add	r3, r2
 800616e:	613b      	str	r3, [r7, #16]

        /* Preform the write operation */
        if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Write(hdfu->buffer.d8,
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006176:	691b      	ldr	r3, [r3, #16]
 8006178:	6978      	ldr	r0, [r7, #20]
 800617a:	6939      	ldr	r1, [r7, #16]
 800617c:	697a      	ldr	r2, [r7, #20]
 800617e:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 8006182:	4798      	blx	r3
 8006184:	4603      	mov	r3, r0
 8006186:	2b00      	cmp	r3, #0
 8006188:	d001      	beq.n	800618e <USBD_DFU_EP0_TxReady+0x172>
                                                              (uint8_t *)addr, hdfu->wlength) != USBD_OK)
        {
          return USBD_FAIL;
 800618a:	2302      	movs	r3, #2
 800618c:	e028      	b.n	80061e0 <USBD_DFU_EP0_TxReady+0x1c4>
        }
      }
    }

    /* Reset the global length and block number */
    hdfu->wlength = 0U;
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	2200      	movs	r2, #0
 8006192:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    hdfu->wblock_num = 0U;
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	2200      	movs	r2, #0
 800619a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

    /* Update the state machine */
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	2203      	movs	r2, #3
 80061a2:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	2200      	movs	r2, #0
 80061aa:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	2200      	movs	r2, #0
 80061b2:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	2200      	movs	r2, #0
 80061ba:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    return USBD_OK;
 80061ca:	2300      	movs	r3, #0
 80061cc:	e008      	b.n	80061e0 <USBD_DFU_EP0_TxReady+0x1c4>
  }
  else
  {
    if (hdfu->dev_state == DFU_STATE_MANIFEST)/* Manifestation in progress */
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80061d4:	2b07      	cmp	r3, #7
 80061d6:	d102      	bne.n	80061de <USBD_DFU_EP0_TxReady+0x1c2>
    {
      /* Start leaving DFU mode */
      DFU_Leave(pdev);
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f000 fb7b 	bl	80068d4 <DFU_Leave>
    }
  }

  return USBD_OK;
 80061de:	2300      	movs	r3, #0
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3718      	adds	r7, #24
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}
 80061e8:	003ffffe 	.word	0x003ffffe

080061ec <USBD_DFU_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_SOF(USBD_HandleTypeDef *pdev)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b083      	sub	sp, #12
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]

  return USBD_OK;
 80061f4:	2300      	movs	r3, #0
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	370c      	adds	r7, #12
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bc80      	pop	{r7}
 80061fe:	4770      	bx	lr

08006200 <USBD_DFU_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_DFU_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006200:	b480      	push	{r7}
 8006202:	b083      	sub	sp, #12
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	460b      	mov	r3, r1
 800620a:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 800620c:	2300      	movs	r3, #0
}
 800620e:	4618      	mov	r0, r3
 8006210:	370c      	adds	r7, #12
 8006212:	46bd      	mov	sp, r7
 8006214:	bc80      	pop	{r7}
 8006216:	4770      	bx	lr

08006218 <USBD_DFU_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_DFU_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006218:	b480      	push	{r7}
 800621a:	b083      	sub	sp, #12
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	460b      	mov	r3, r1
 8006222:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 8006224:	2300      	movs	r3, #0
}
 8006226:	4618      	mov	r0, r3
 8006228:	370c      	adds	r7, #12
 800622a:	46bd      	mov	sp, r7
 800622c:	bc80      	pop	{r7}
 800622e:	4770      	bx	lr

08006230 <USBD_DFU_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_DFU_DataOut(USBD_HandleTypeDef *pdev,
                                 uint8_t epnum)
{
 8006230:	b480      	push	{r7}
 8006232:	b083      	sub	sp, #12
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	460b      	mov	r3, r1
 800623a:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 800623c:	2300      	movs	r3, #0
}
 800623e:	4618      	mov	r0, r3
 8006240:	370c      	adds	r7, #12
 8006242:	46bd      	mov	sp, r7
 8006244:	bc80      	pop	{r7}
 8006246:	4770      	bx	lr

08006248 <USBD_DFU_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_DFU_GetDeviceQualifierDesc(uint16_t *length)
{
 8006248:	b480      	push	{r7}
 800624a:	b083      	sub	sp, #12
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_DFU_DeviceQualifierDesc);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	220a      	movs	r2, #10
 8006254:	801a      	strh	r2, [r3, #0]
  return USBD_DFU_DeviceQualifierDesc;
 8006256:	4b03      	ldr	r3, [pc, #12]	; (8006264 <USBD_DFU_GetDeviceQualifierDesc+0x1c>)
}
 8006258:	4618      	mov	r0, r3
 800625a:	370c      	adds	r7, #12
 800625c:	46bd      	mov	sp, r7
 800625e:	bc80      	pop	{r7}
 8006260:	4770      	bx	lr
 8006262:	bf00      	nop
 8006264:	20000078 	.word	0x20000078

08006268 <USBD_DFU_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_DFU_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b084      	sub	sp, #16
 800626c:	af00      	add	r7, sp, #0
 800626e:	60f8      	str	r0, [r7, #12]
 8006270:	460b      	mov	r3, r1
 8006272:	607a      	str	r2, [r7, #4]
 8006274:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[255];
  /* Check if the requested string interface is supported */
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 8006276:	7afb      	ldrb	r3, [r7, #11]
 8006278:	2b06      	cmp	r3, #6
 800627a:	d80a      	bhi.n	8006292 <USBD_DFU_GetUsrStringDesc+0x2a>
  {
    USBD_GetString((uint8_t *)((USBD_DFU_MediaTypeDef *)pdev->pUserData)->pStrDesc, USBD_StrDesc, length);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	687a      	ldr	r2, [r7, #4]
 8006286:	4905      	ldr	r1, [pc, #20]	; (800629c <USBD_DFU_GetUsrStringDesc+0x34>)
 8006288:	4618      	mov	r0, r3
 800628a:	f001 fb48 	bl	800791e <USBD_GetString>
    return USBD_StrDesc;
 800628e:	4b03      	ldr	r3, [pc, #12]	; (800629c <USBD_DFU_GetUsrStringDesc+0x34>)
 8006290:	e000      	b.n	8006294 <USBD_DFU_GetUsrStringDesc+0x2c>
  }
  /* Not supported Interface Descriptor index */
  else
  {
    return NULL;
 8006292:	2300      	movs	r3, #0
  }
}
 8006294:	4618      	mov	r0, r3
 8006296:	3710      	adds	r7, #16
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}
 800629c:	2000010c 	.word	0x2000010c

080062a0 <USBD_DFU_RegisterMedia>:
* @param  fops: storage callback
* @retval status
*/
uint8_t  USBD_DFU_RegisterMedia(USBD_HandleTypeDef   *pdev,
                                USBD_DFU_MediaTypeDef *fops)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b083      	sub	sp, #12
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	6039      	str	r1, [r7, #0]
  if (fops != NULL)
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d003      	beq.n	80062b8 <USBD_DFU_RegisterMedia+0x18>
  {
    pdev->pUserData = fops;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	683a      	ldr	r2, [r7, #0]
 80062b4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }
  return 0U;
 80062b8:	2300      	movs	r3, #0
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	370c      	adds	r7, #12
 80062be:	46bd      	mov	sp, r7
 80062c0:	bc80      	pop	{r7}
 80062c2:	4770      	bx	lr

080062c4 <DFU_Detach>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure.
  * @retval None.
  */
static void DFU_Detach(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b084      	sub	sp, #16
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062d4:	60fb      	str	r3, [r7, #12]

  if (hdfu->dev_state == DFU_STATE_IDLE || hdfu->dev_state == DFU_STATE_DNLOAD_SYNC
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80062dc:	2b02      	cmp	r3, #2
 80062de:	d013      	beq.n	8006308 <DFU_Detach+0x44>
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80062e6:	2b03      	cmp	r3, #3
 80062e8:	d00e      	beq.n	8006308 <DFU_Detach+0x44>
      || hdfu->dev_state == DFU_STATE_DNLOAD_IDLE || hdfu->dev_state == DFU_STATE_MANIFEST_SYNC
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80062f0:	2b05      	cmp	r3, #5
 80062f2:	d009      	beq.n	8006308 <DFU_Detach+0x44>
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80062fa:	2b06      	cmp	r3, #6
 80062fc:	d004      	beq.n	8006308 <DFU_Detach+0x44>
      || hdfu->dev_state == DFU_STATE_UPLOAD_IDLE)
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8006304:	2b09      	cmp	r3, #9
 8006306:	d125      	bne.n	8006354 <DFU_Detach+0x90>
  {
    /* Update the state machine */
    hdfu->dev_state = DFU_STATE_IDLE;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2202      	movs	r2, #2
 800630c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2200      	movs	r2, #0
 8006314:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2200      	movs	r2, #0
 800631c:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2200      	movs	r2, #0
 8006324:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2200      	movs	r2, #0
 800632c:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2200      	movs	r2, #0
 8006340:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->wblock_num = 0U;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2200      	movs	r2, #0
 8006348:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2200      	movs	r2, #0
 8006350:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  }

  /* Check the detach capability in the DFU functional descriptor */
  if ((USBD_DFU_CfgDesc[12U + (9U * USBD_DFU_MAX_ITF_NUM)]) & DFU_DETACH_MASK)
 8006354:	4b0a      	ldr	r3, [pc, #40]	; (8006380 <DFU_Detach+0xbc>)
 8006356:	7d5b      	ldrb	r3, [r3, #21]
 8006358:	f003 0310 	and.w	r3, r3, #16
 800635c:	2b00      	cmp	r3, #0
 800635e:	d006      	beq.n	800636e <DFU_Detach+0xaa>
  {
    /* Perform an Attach-Detach operation on USB bus */
    USBD_Stop(pdev);
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f000 fb55 	bl	8006a10 <USBD_Stop>
    USBD_Start(pdev);
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f000 fb46 	bl	80069f8 <USBD_Start>
  else
  {
    /* Wait for the period of time specified in Detach request */
    USBD_Delay((uint32_t)req->wValue);
  }
}
 800636c:	e004      	b.n	8006378 <DFU_Detach+0xb4>
    USBD_Delay((uint32_t)req->wValue);
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	885b      	ldrh	r3, [r3, #2]
 8006372:	4618      	mov	r0, r3
 8006374:	f7fb f890 	bl	8001498 <HAL_Delay>
}
 8006378:	bf00      	nop
 800637a:	3710      	adds	r7, #16
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}
 8006380:	2000005c 	.word	0x2000005c

08006384 <DFU_Download>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure
  * @retval None
  */
static void DFU_Download(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b084      	sub	sp, #16
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006394:	60fb      	str	r3, [r7, #12]

  /* Data setup request */
  if (req->wLength > 0U)
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	88db      	ldrh	r3, [r3, #6]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d02e      	beq.n	80063fc <DFU_Download+0x78>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80063a4:	2b02      	cmp	r3, #2
 80063a6:	d004      	beq.n	80063b2 <DFU_Download+0x2e>
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80063ae:	2b05      	cmp	r3, #5
 80063b0:	d11f      	bne.n	80063f2 <DFU_Download+0x6e>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	885b      	ldrh	r3, [r3, #2]
 80063b6:	461a      	mov	r2, r3
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      hdfu->wlength = req->wLength;
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	88db      	ldrh	r3, [r3, #6]
 80063c2:	461a      	mov	r2, r3
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

      /* Update the state machine */
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2203      	movs	r2, #3
 80063ce:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[4] = hdfu->dev_state;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

      /* Prepare the reception of the buffer over EP0 */
      USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8,
 80063de:	68f9      	ldr	r1, [r7, #12]
                        (uint16_t)hdfu->wlength);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
      USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8,
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	461a      	mov	r2, r3
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f001 fb1e 	bl	8007a2c <USBD_CtlPrepareRx>
 80063f0:	e02e      	b.n	8006450 <DFU_Download+0xcc>
    }
    /* Unsupported state */
    else
    {
      /* Call the error management function (command will be nacked */
      USBD_CtlError(pdev, req);
 80063f2:	6839      	ldr	r1, [r7, #0]
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f001 fa81 	bl	80078fc <USBD_CtlError>
    {
      /* Call the error management function (command will be nacked */
      USBD_CtlError(pdev, req);
    }
  }
}
 80063fa:	e029      	b.n	8006450 <DFU_Download+0xcc>
    if (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE || hdfu->dev_state == DFU_STATE_IDLE)
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8006402:	2b05      	cmp	r3, #5
 8006404:	d004      	beq.n	8006410 <DFU_Download+0x8c>
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800640c:	2b02      	cmp	r3, #2
 800640e:	d11a      	bne.n	8006446 <DFU_Download+0xc2>
      hdfu->manif_state = DFU_MANIFEST_IN_PROGRESS;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2201      	movs	r2, #1
 8006414:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
      hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2206      	movs	r2, #6
 800641c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[1] = 0U;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2200      	movs	r2, #0
 8006424:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
      hdfu->dev_status[2] = 0U;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2200      	movs	r2, #0
 800642c:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
      hdfu->dev_status[3] = 0U;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2200      	movs	r2, #0
 8006434:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 8006444:	e004      	b.n	8006450 <DFU_Download+0xcc>
      USBD_CtlError(pdev, req);
 8006446:	6839      	ldr	r1, [r7, #0]
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f001 fa57 	bl	80078fc <USBD_CtlError>
}
 800644e:	e7ff      	b.n	8006450 <DFU_Download+0xcc>
 8006450:	bf00      	nop
 8006452:	3710      	adds	r7, #16
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}

08006458 <DFU_Upload>:
  * @param  pdev: instance
  * @param  req: pointer to the request structure
  * @retval status
  */
static void DFU_Upload(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b086      	sub	sp, #24
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006468:	617b      	str	r3, [r7, #20]

  uint8_t *phaddr = NULL;
 800646a:	2300      	movs	r3, #0
 800646c:	613b      	str	r3, [r7, #16]
  uint32_t addr = 0U;
 800646e:	2300      	movs	r3, #0
 8006470:	60fb      	str	r3, [r7, #12]

  /* Data setup request */
  if (req->wLength > 0U)
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	88db      	ldrh	r3, [r3, #6]
 8006476:	2b00      	cmp	r3, #0
 8006478:	f000 80ac 	beq.w	80065d4 <DFU_Upload+0x17c>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8006482:	2b02      	cmp	r3, #2
 8006484:	d005      	beq.n	8006492 <DFU_Upload+0x3a>
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800648c:	2b09      	cmp	r3, #9
 800648e:	f040 8094 	bne.w	80065ba <DFU_Upload+0x162>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	885b      	ldrh	r3, [r3, #2]
 8006496:	461a      	mov	r2, r3
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      hdfu->wlength = req->wLength;
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	88db      	ldrh	r3, [r3, #6]
 80064a2:	461a      	mov	r2, r3
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

      /* DFU Get Command */
      if (hdfu->wblock_num == 0U)
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d12c      	bne.n	800650e <DFU_Upload+0xb6>
      {
        /* Update the state machine */
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80064ba:	2b03      	cmp	r3, #3
 80064bc:	d901      	bls.n	80064c2 <DFU_Upload+0x6a>
 80064be:	2202      	movs	r2, #2
 80064c0:	e000      	b.n	80064c4 <DFU_Upload+0x6c>
 80064c2:	2209      	movs	r2, #9
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	2200      	movs	r2, #0
 80064ce:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	2200      	movs	r2, #0
 80064d6:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	2200      	movs	r2, #0
 80064de:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        /* Store the values of all supported commands */
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	2200      	movs	r2, #0
 80064f2:	701a      	strb	r2, [r3, #0]
        hdfu->buffer.d8[1] = DFU_CMD_SETADDRESSPOINTER;
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	2221      	movs	r2, #33	; 0x21
 80064f8:	705a      	strb	r2, [r3, #1]
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	2241      	movs	r2, #65	; 0x41
 80064fe:	709a      	strb	r2, [r3, #2]

        /* Send the status data over EP0 */
        USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->buffer.d8[0])), 3U);
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	2203      	movs	r2, #3
 8006504:	4619      	mov	r1, r3
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f001 fa62 	bl	80079d0 <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 800650c:	e079      	b.n	8006602 <DFU_Upload+0x1aa>
      }
      else if (hdfu->wblock_num > 1U)
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8006514:	2b01      	cmp	r3, #1
 8006516:	d935      	bls.n	8006584 <DFU_Upload+0x12c>
      {
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	2209      	movs	r2, #9
 800651c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	2200      	movs	r2, #0
 8006524:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	2200      	movs	r2, #0
 800652c:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	2200      	movs	r2, #0
 8006534:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;  /* Change is Accelerated*/
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800654a:	4b30      	ldr	r3, [pc, #192]	; (800660c <DFU_Upload+0x1b4>)
 800654c:	4413      	add	r3, r2
 800654e:	029a      	lsls	r2, r3, #10
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8006556:	4413      	add	r3, r2
 8006558:	60fb      	str	r3, [r7, #12]

        /* Return the physical address where data are stored */
        phaddr = ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006560:	695b      	ldr	r3, [r3, #20]
 8006562:	68f8      	ldr	r0, [r7, #12]
 8006564:	6979      	ldr	r1, [r7, #20]
 8006566:	697a      	ldr	r2, [r7, #20]
 8006568:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 800656c:	4798      	blx	r3
 800656e:	6138      	str	r0, [r7, #16]

        /* Send the status data over EP0 */
        USBD_CtlSendData(pdev, phaddr, (uint16_t)hdfu->wlength);
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006576:	b29b      	uxth	r3, r3
 8006578:	461a      	mov	r2, r3
 800657a:	6939      	ldr	r1, [r7, #16]
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f001 fa27 	bl	80079d0 <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 8006582:	e03e      	b.n	8006602 <DFU_Upload+0x1aa>
      }
      else  /* unsupported hdfu->wblock_num */
      {
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	220f      	movs	r2, #15
 8006588:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	2200      	movs	r2, #0
 8006590:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	2200      	movs	r2, #0
 8006598:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	2200      	movs	r2, #0
 80065a0:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        /* Call the error management function (command will be nacked */
        USBD_CtlError(pdev, req);
 80065b0:	6839      	ldr	r1, [r7, #0]
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f001 f9a2 	bl	80078fc <USBD_CtlError>
      if (hdfu->wblock_num == 0U)
 80065b8:	e023      	b.n	8006602 <DFU_Upload+0x1aa>
      }
    }
    /* Unsupported state */
    else
    {
      hdfu->wlength = 0U;
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	2200      	movs	r2, #0
 80065be:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      hdfu->wblock_num = 0U;
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	2200      	movs	r2, #0
 80065c6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      /* Call the error management function (command will be nacked */
      USBD_CtlError(pdev, req);
 80065ca:	6839      	ldr	r1, [r7, #0]
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f001 f995 	bl	80078fc <USBD_CtlError>
    hdfu->dev_status[1] = 0U;
    hdfu->dev_status[2] = 0U;
    hdfu->dev_status[3] = 0U;
    hdfu->dev_status[4] = hdfu->dev_state;
  }
}
 80065d2:	e016      	b.n	8006602 <DFU_Upload+0x1aa>
    hdfu->dev_state = DFU_STATE_IDLE;
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	2202      	movs	r2, #2
 80065d8:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[1] = 0U;
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	2200      	movs	r2, #0
 80065e0:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	2200      	movs	r2, #0
 80065e8:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	2200      	movs	r2, #0
 80065f0:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
}
 8006600:	e7ff      	b.n	8006602 <DFU_Upload+0x1aa>
 8006602:	bf00      	nop
 8006604:	3718      	adds	r7, #24
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}
 800660a:	bf00      	nop
 800660c:	003ffffe 	.word	0x003ffffe

08006610 <DFU_GetStatus>:
  *         Handles the DFU GETSTATUS request.
  * @param  pdev: instance
  * @retval status
  */
static void DFU_GetStatus(USBD_HandleTypeDef *pdev)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b084      	sub	sp, #16
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800661e:	60fb      	str	r3, [r7, #12]

  switch (hdfu->dev_state)
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8006626:	2b03      	cmp	r3, #3
 8006628:	d002      	beq.n	8006630 <DFU_GetStatus+0x20>
 800662a:	2b06      	cmp	r3, #6
 800662c:	d055      	beq.n	80066da <DFU_GetStatus+0xca>
        }
      }
      break;

    default :
      break;
 800662e:	e092      	b.n	8006756 <DFU_GetStatus+0x146>
      if (hdfu->wlength != 0U)
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006636:	2b00      	cmp	r3, #0
 8006638:	d038      	beq.n	80066ac <DFU_GetStatus+0x9c>
        hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2204      	movs	r2, #4
 800663e:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 0U;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2200      	movs	r2, #0
 8006646:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2200      	movs	r2, #0
 800664e:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2200      	movs	r2, #0
 8006656:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800666c:	2b00      	cmp	r3, #0
 800666e:	d110      	bne.n	8006692 <DFU_GetStatus+0x82>
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	781b      	ldrb	r3, [r3, #0]
 8006674:	2b41      	cmp	r3, #65	; 0x41
 8006676:	d10c      	bne.n	8006692 <DFU_GetStatus+0x82>
          ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800667e:	699b      	ldr	r3, [r3, #24]
 8006680:	68fa      	ldr	r2, [r7, #12]
 8006682:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
 8006686:	68fa      	ldr	r2, [r7, #12]
 8006688:	f502 6282 	add.w	r2, r2, #1040	; 0x410
 800668c:	2100      	movs	r1, #0
 800668e:	4798      	blx	r3
      break;
 8006690:	e061      	b.n	8006756 <DFU_GetStatus+0x146>
          ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->GetStatus(hdfu->data_ptr, DFU_MEDIA_PROGRAM, hdfu->dev_status);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006698:	699b      	ldr	r3, [r3, #24]
 800669a:	68fa      	ldr	r2, [r7, #12]
 800669c:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
 80066a0:	68fa      	ldr	r2, [r7, #12]
 80066a2:	f502 6282 	add.w	r2, r2, #1040	; 0x410
 80066a6:	2101      	movs	r1, #1
 80066a8:	4798      	blx	r3
      break;
 80066aa:	e054      	b.n	8006756 <DFU_GetStatus+0x146>
        hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2205      	movs	r2, #5
 80066b0:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 0U;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2200      	movs	r2, #0
 80066b8:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2200      	movs	r2, #0
 80066c0:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2200      	movs	r2, #0
 80066c8:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      break;
 80066d8:	e03d      	b.n	8006756 <DFU_GetStatus+0x146>
      if (hdfu->manif_state == DFU_MANIFEST_IN_PROGRESS)
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	d116      	bne.n	8006712 <DFU_GetStatus+0x102>
        hdfu->dev_state = DFU_STATE_MANIFEST;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2207      	movs	r2, #7
 80066e8:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 1U;             /*bwPollTimeout = 1ms*/
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2201      	movs	r2, #1
 80066f0:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	2200      	movs	r2, #0
 80066f8:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	2200      	movs	r2, #0
 8006700:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      break;
 8006710:	e020      	b.n	8006754 <DFU_GetStatus+0x144>
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 8006718:	2b00      	cmp	r3, #0
 800671a:	d11b      	bne.n	8006754 <DFU_GetStatus+0x144>
            ((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U))
 800671c:	4b14      	ldr	r3, [pc, #80]	; (8006770 <DFU_GetStatus+0x160>)
 800671e:	7d1b      	ldrb	r3, [r3, #20]
 8006720:	f003 0304 	and.w	r3, r3, #4
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 8006724:	2b00      	cmp	r3, #0
 8006726:	d015      	beq.n	8006754 <DFU_GetStatus+0x144>
          hdfu->dev_state = DFU_STATE_IDLE;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	2202      	movs	r2, #2
 800672c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
          hdfu->dev_status[1] = 0U;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2200      	movs	r2, #0
 8006734:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
          hdfu->dev_status[2] = 0U;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2200      	movs	r2, #0
 800673c:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
          hdfu->dev_status[3] = 0U;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2200      	movs	r2, #0
 8006744:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
          hdfu->dev_status[4] = hdfu->dev_state;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      break;
 8006754:	bf00      	nop
  }

  /* Send the status data over EP0 */
  USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 800675c:	2206      	movs	r2, #6
 800675e:	4619      	mov	r1, r3
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f001 f935 	bl	80079d0 <USBD_CtlSendData>
}
 8006766:	bf00      	nop
 8006768:	3710      	adds	r7, #16
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
 800676e:	bf00      	nop
 8006770:	2000005c 	.word	0x2000005c

08006774 <DFU_ClearStatus>:
  *         Handles the DFU CLRSTATUS request.
  * @param  pdev: device instance
  * @retval status
  */
static void DFU_ClearStatus(USBD_HandleTypeDef *pdev)
{
 8006774:	b480      	push	{r7}
 8006776:	b085      	sub	sp, #20
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006782:	60fb      	str	r3, [r7, #12]

  if (hdfu->dev_state == DFU_STATE_ERROR)
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800678a:	2b0a      	cmp	r3, #10
 800678c:	d11e      	bne.n	80067cc <DFU_ClearStatus+0x58>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2202      	movs	r2, #2
 8006792:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;/*bStatus*/
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2200      	movs	r2, #0
 800679a:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2200      	movs	r2, #0
 80067a2:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2200      	movs	r2, #0
 80067aa:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2200      	movs	r2, #0
 80067b2:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;/*bState*/
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U;/*iString*/
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2200      	movs	r2, #0
 80067c6:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->dev_status[2] = 0U;
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
    hdfu->dev_status[4] = hdfu->dev_state;/*bState*/
    hdfu->dev_status[5] = 0U;/*iString*/
  }
}
 80067ca:	e01d      	b.n	8006808 <DFU_ClearStatus+0x94>
    hdfu->dev_state = DFU_STATE_ERROR;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	220a      	movs	r2, #10
 80067d0:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN;/*bStatus*/
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	220e      	movs	r2, #14
 80067d8:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2200      	movs	r2, #0
 80067e0:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	2200      	movs	r2, #0
 80067e8:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2200      	movs	r2, #0
 80067f0:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;/*bState*/
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U;/*iString*/
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2200      	movs	r2, #0
 8006804:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
}
 8006808:	bf00      	nop
 800680a:	3714      	adds	r7, #20
 800680c:	46bd      	mov	sp, r7
 800680e:	bc80      	pop	{r7}
 8006810:	4770      	bx	lr

08006812 <DFU_GetState>:
  *         Handles the DFU GETSTATE request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_GetState(USBD_HandleTypeDef *pdev)
{
 8006812:	b580      	push	{r7, lr}
 8006814:	b084      	sub	sp, #16
 8006816:	af00      	add	r7, sp, #0
 8006818:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006820:	60fb      	str	r3, [r7, #12]

  /* Return the current state of the DFU interface */
  USBD_CtlSendData(pdev, &hdfu->dev_state, 1U);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8006828:	2201      	movs	r2, #1
 800682a:	4619      	mov	r1, r3
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f001 f8cf 	bl	80079d0 <USBD_CtlSendData>
}
 8006832:	bf00      	nop
 8006834:	3710      	adds	r7, #16
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}

0800683a <DFU_Abort>:
  *         Handles the DFU ABORT request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Abort(USBD_HandleTypeDef *pdev)
{
 800683a:	b480      	push	{r7}
 800683c:	b085      	sub	sp, #20
 800683e:	af00      	add	r7, sp, #0
 8006840:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006848:	60fb      	str	r3, [r7, #12]

  if (hdfu->dev_state == DFU_STATE_IDLE || hdfu->dev_state == DFU_STATE_DNLOAD_SYNC
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8006850:	2b02      	cmp	r3, #2
 8006852:	d013      	beq.n	800687c <DFU_Abort+0x42>
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800685a:	2b03      	cmp	r3, #3
 800685c:	d00e      	beq.n	800687c <DFU_Abort+0x42>
      || hdfu->dev_state == DFU_STATE_DNLOAD_IDLE || hdfu->dev_state == DFU_STATE_MANIFEST_SYNC
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8006864:	2b05      	cmp	r3, #5
 8006866:	d009      	beq.n	800687c <DFU_Abort+0x42>
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800686e:	2b06      	cmp	r3, #6
 8006870:	d004      	beq.n	800687c <DFU_Abort+0x42>
      || hdfu->dev_state == DFU_STATE_UPLOAD_IDLE)
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8006878:	2b09      	cmp	r3, #9
 800687a:	d125      	bne.n	80068c8 <DFU_Abort+0x8e>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2202      	movs	r2, #2
 8006880:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2200      	movs	r2, #0
 8006888:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2200      	movs	r2, #0
 8006890:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2200      	movs	r2, #0
 8006898:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2200      	movs	r2, #0
 80068a0:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2200      	movs	r2, #0
 80068b4:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->wblock_num = 0U;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2200      	movs	r2, #0
 80068bc:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	2200      	movs	r2, #0
 80068c4:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  }
}
 80068c8:	bf00      	nop
 80068ca:	3714      	adds	r7, #20
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bc80      	pop	{r7}
 80068d0:	4770      	bx	lr
	...

080068d4 <DFU_Leave>:
  *         and resets device to jump to user loaded code).
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Leave(USBD_HandleTypeDef *pdev)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b084      	sub	sp, #16
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068e2:	60fb      	str	r3, [r7, #12]

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2200      	movs	r2, #0
 80068e8:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419

  if ((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U)
 80068ec:	4b1f      	ldr	r3, [pc, #124]	; (800696c <DFU_Leave+0x98>)
 80068ee:	7d1b      	ldrb	r3, [r3, #20]
 80068f0:	f003 0304 	and.w	r3, r3, #4
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d016      	beq.n	8006926 <DFU_Leave+0x52>
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2206      	movs	r2, #6
 80068fc:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2200      	movs	r2, #0
 8006904:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2200      	movs	r2, #0
 800690c:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2200      	movs	r2, #0
 8006914:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    return;
 8006924:	e01f      	b.n	8006966 <DFU_Leave+0x92>
  }
  else
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2208      	movs	r2, #8
 800692a:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2200      	movs	r2, #0
 8006932:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2200      	movs	r2, #0
 800693a:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2200      	movs	r2, #0
 8006942:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

    /* Disconnect the USB device */
    USBD_Stop(pdev);
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f000 f85c 	bl	8006a10 <USBD_Stop>

    /* DeInitilialize the MAL(Media Access Layer) */
    ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->DeInit();
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	4798      	blx	r3

    /* Generate system reset to allow jumping to the user code */
    NVIC_SystemReset();
 8006962:	f7ff f9a7 	bl	8005cb4 <__NVIC_SystemReset>

    /* The next instructions will not be reached (system reset) */
  }
}
 8006966:	3710      	adds	r7, #16
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}
 800696c:	2000005c 	.word	0x2000005c

08006970 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b084      	sub	sp, #16
 8006974:	af00      	add	r7, sp, #0
 8006976:	60f8      	str	r0, [r7, #12]
 8006978:	60b9      	str	r1, [r7, #8]
 800697a:	4613      	mov	r3, r2
 800697c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d101      	bne.n	8006988 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006984:	2302      	movs	r3, #2
 8006986:	e01a      	b.n	80069be <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800698e:	2b00      	cmp	r3, #0
 8006990:	d003      	beq.n	800699a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2200      	movs	r2, #0
 8006996:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d003      	beq.n	80069a8 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	68ba      	ldr	r2, [r7, #8]
 80069a4:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2201      	movs	r2, #1
 80069ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	79fa      	ldrb	r2, [r7, #7]
 80069b4:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80069b6:	68f8      	ldr	r0, [r7, #12]
 80069b8:	f002 f8f4 	bl	8008ba4 <USBD_LL_Init>

  return USBD_OK;
 80069bc:	2300      	movs	r3, #0
}
 80069be:	4618      	mov	r0, r3
 80069c0:	3710      	adds	r7, #16
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}

080069c6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80069c6:	b480      	push	{r7}
 80069c8:	b085      	sub	sp, #20
 80069ca:	af00      	add	r7, sp, #0
 80069cc:	6078      	str	r0, [r7, #4]
 80069ce:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80069d0:	2300      	movs	r3, #0
 80069d2:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d006      	beq.n	80069e8 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	683a      	ldr	r2, [r7, #0]
 80069de:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80069e2:	2300      	movs	r3, #0
 80069e4:	73fb      	strb	r3, [r7, #15]
 80069e6:	e001      	b.n	80069ec <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80069e8:	2302      	movs	r3, #2
 80069ea:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80069ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3714      	adds	r7, #20
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bc80      	pop	{r7}
 80069f6:	4770      	bx	lr

080069f8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b082      	sub	sp, #8
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f002 f90f 	bl	8008c24 <USBD_LL_Start>

  return USBD_OK;
 8006a06:	2300      	movs	r3, #0
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	3708      	adds	r7, #8
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}

08006a10 <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Stop(USBD_HandleTypeDef *pdev)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b082      	sub	sp, #8
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	687a      	ldr	r2, [r7, #4]
 8006a22:	6852      	ldr	r2, [r2, #4]
 8006a24:	b2d2      	uxtb	r2, r2
 8006a26:	4611      	mov	r1, r2
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	4798      	blx	r3

  /* Stop the low level driver */
  USBD_LL_Stop(pdev);
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f002 f914 	bl	8008c5a <USBD_LL_Stop>

  return USBD_OK;
 8006a32:	2300      	movs	r3, #0
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3708      	adds	r7, #8
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}

08006a3c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b083      	sub	sp, #12
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006a44:	2300      	movs	r3, #0
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	370c      	adds	r7, #12
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bc80      	pop	{r7}
 8006a4e:	4770      	bx	lr

08006a50 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b084      	sub	sp, #16
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	460b      	mov	r3, r1
 8006a5a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006a5c:	2302      	movs	r3, #2
 8006a5e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d00c      	beq.n	8006a84 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	78fa      	ldrb	r2, [r7, #3]
 8006a74:	4611      	mov	r1, r2
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	4798      	blx	r3
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d101      	bne.n	8006a84 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006a80:	2300      	movs	r3, #0
 8006a82:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3710      	adds	r7, #16
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}

08006a8e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006a8e:	b580      	push	{r7, lr}
 8006a90:	b082      	sub	sp, #8
 8006a92:	af00      	add	r7, sp, #0
 8006a94:	6078      	str	r0, [r7, #4]
 8006a96:	460b      	mov	r3, r1
 8006a98:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	78fa      	ldrb	r2, [r7, #3]
 8006aa4:	4611      	mov	r1, r2
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	4798      	blx	r3

  return USBD_OK;
 8006aaa:	2300      	movs	r3, #0
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3708      	adds	r7, #8
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}

08006ab4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b082      	sub	sp, #8
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006ac4:	6839      	ldr	r1, [r7, #0]
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f000 fedc 	bl	8007884 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006ada:	461a      	mov	r2, r3
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006ae8:	f003 031f 	and.w	r3, r3, #31
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d00c      	beq.n	8006b0a <USBD_LL_SetupStage+0x56>
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d302      	bcc.n	8006afa <USBD_LL_SetupStage+0x46>
 8006af4:	2b02      	cmp	r3, #2
 8006af6:	d010      	beq.n	8006b1a <USBD_LL_SetupStage+0x66>
 8006af8:	e017      	b.n	8006b2a <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006b00:	4619      	mov	r1, r3
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f000 f9ca 	bl	8006e9c <USBD_StdDevReq>
      break;
 8006b08:	e01a      	b.n	8006b40 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006b10:	4619      	mov	r1, r3
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f000 fa2c 	bl	8006f70 <USBD_StdItfReq>
      break;
 8006b18:	e012      	b.n	8006b40 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006b20:	4619      	mov	r1, r3
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f000 fa6a 	bl	8006ffc <USBD_StdEPReq>
      break;
 8006b28:	e00a      	b.n	8006b40 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006b30:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006b34:	b2db      	uxtb	r3, r3
 8006b36:	4619      	mov	r1, r3
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f002 f8cf 	bl	8008cdc <USBD_LL_StallEP>
      break;
 8006b3e:	bf00      	nop
  }

  return USBD_OK;
 8006b40:	2300      	movs	r3, #0
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3708      	adds	r7, #8
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}

08006b4a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006b4a:	b580      	push	{r7, lr}
 8006b4c:	b086      	sub	sp, #24
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	60f8      	str	r0, [r7, #12]
 8006b52:	460b      	mov	r3, r1
 8006b54:	607a      	str	r2, [r7, #4]
 8006b56:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006b58:	7afb      	ldrb	r3, [r7, #11]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d14b      	bne.n	8006bf6 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006b64:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006b6c:	2b03      	cmp	r3, #3
 8006b6e:	d134      	bne.n	8006bda <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	68da      	ldr	r2, [r3, #12]
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	691b      	ldr	r3, [r3, #16]
 8006b78:	429a      	cmp	r2, r3
 8006b7a:	d919      	bls.n	8006bb0 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	68da      	ldr	r2, [r3, #12]
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	691b      	ldr	r3, [r3, #16]
 8006b84:	1ad2      	subs	r2, r2, r3
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	68da      	ldr	r2, [r3, #12]
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006b92:	429a      	cmp	r2, r3
 8006b94:	d203      	bcs.n	8006b9e <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	e002      	b.n	8006ba4 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006ba2:	b29b      	uxth	r3, r3
 8006ba4:	461a      	mov	r2, r3
 8006ba6:	6879      	ldr	r1, [r7, #4]
 8006ba8:	68f8      	ldr	r0, [r7, #12]
 8006baa:	f000 ff5d 	bl	8007a68 <USBD_CtlContinueRx>
 8006bae:	e038      	b.n	8006c22 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bb6:	691b      	ldr	r3, [r3, #16]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d00a      	beq.n	8006bd2 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006bc2:	2b03      	cmp	r3, #3
 8006bc4:	d105      	bne.n	8006bd2 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bcc:	691b      	ldr	r3, [r3, #16]
 8006bce:	68f8      	ldr	r0, [r7, #12]
 8006bd0:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006bd2:	68f8      	ldr	r0, [r7, #12]
 8006bd4:	f000 ff5a 	bl	8007a8c <USBD_CtlSendStatus>
 8006bd8:	e023      	b.n	8006c22 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006be0:	2b05      	cmp	r3, #5
 8006be2:	d11e      	bne.n	8006c22 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	2200      	movs	r2, #0
 8006be8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006bec:	2100      	movs	r1, #0
 8006bee:	68f8      	ldr	r0, [r7, #12]
 8006bf0:	f002 f874 	bl	8008cdc <USBD_LL_StallEP>
 8006bf4:	e015      	b.n	8006c22 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bfc:	699b      	ldr	r3, [r3, #24]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d00d      	beq.n	8006c1e <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006c08:	2b03      	cmp	r3, #3
 8006c0a:	d108      	bne.n	8006c1e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c12:	699b      	ldr	r3, [r3, #24]
 8006c14:	7afa      	ldrb	r2, [r7, #11]
 8006c16:	4611      	mov	r1, r2
 8006c18:	68f8      	ldr	r0, [r7, #12]
 8006c1a:	4798      	blx	r3
 8006c1c:	e001      	b.n	8006c22 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006c1e:	2302      	movs	r3, #2
 8006c20:	e000      	b.n	8006c24 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006c22:	2300      	movs	r3, #0
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	3718      	adds	r7, #24
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}

08006c2c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b086      	sub	sp, #24
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	60f8      	str	r0, [r7, #12]
 8006c34:	460b      	mov	r3, r1
 8006c36:	607a      	str	r2, [r7, #4]
 8006c38:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006c3a:	7afb      	ldrb	r3, [r7, #11]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d17f      	bne.n	8006d40 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	3314      	adds	r3, #20
 8006c44:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006c4c:	2b02      	cmp	r3, #2
 8006c4e:	d15c      	bne.n	8006d0a <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	68da      	ldr	r2, [r3, #12]
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	691b      	ldr	r3, [r3, #16]
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	d915      	bls.n	8006c88 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	68da      	ldr	r2, [r3, #12]
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	691b      	ldr	r3, [r3, #16]
 8006c64:	1ad2      	subs	r2, r2, r3
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	68db      	ldr	r3, [r3, #12]
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	461a      	mov	r2, r3
 8006c72:	6879      	ldr	r1, [r7, #4]
 8006c74:	68f8      	ldr	r0, [r7, #12]
 8006c76:	f000 fec7 	bl	8007a08 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	2100      	movs	r1, #0
 8006c80:	68f8      	ldr	r0, [r7, #12]
 8006c82:	f002 f8d0 	bl	8008e26 <USBD_LL_PrepareReceive>
 8006c86:	e04e      	b.n	8006d26 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	697a      	ldr	r2, [r7, #20]
 8006c8e:	6912      	ldr	r2, [r2, #16]
 8006c90:	fbb3 f1f2 	udiv	r1, r3, r2
 8006c94:	fb02 f201 	mul.w	r2, r2, r1
 8006c98:	1a9b      	subs	r3, r3, r2
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d11c      	bne.n	8006cd8 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	689a      	ldr	r2, [r3, #8]
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	d316      	bcc.n	8006cd8 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	689a      	ldr	r2, [r3, #8]
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	d20f      	bcs.n	8006cd8 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006cb8:	2200      	movs	r2, #0
 8006cba:	2100      	movs	r1, #0
 8006cbc:	68f8      	ldr	r0, [r7, #12]
 8006cbe:	f000 fea3 	bl	8007a08 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006cca:	2300      	movs	r3, #0
 8006ccc:	2200      	movs	r2, #0
 8006cce:	2100      	movs	r1, #0
 8006cd0:	68f8      	ldr	r0, [r7, #12]
 8006cd2:	f002 f8a8 	bl	8008e26 <USBD_LL_PrepareReceive>
 8006cd6:	e026      	b.n	8006d26 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cde:	68db      	ldr	r3, [r3, #12]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d00a      	beq.n	8006cfa <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006cea:	2b03      	cmp	r3, #3
 8006cec:	d105      	bne.n	8006cfa <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cf4:	68db      	ldr	r3, [r3, #12]
 8006cf6:	68f8      	ldr	r0, [r7, #12]
 8006cf8:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006cfa:	2180      	movs	r1, #128	; 0x80
 8006cfc:	68f8      	ldr	r0, [r7, #12]
 8006cfe:	f001 ffed 	bl	8008cdc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006d02:	68f8      	ldr	r0, [r7, #12]
 8006d04:	f000 fed5 	bl	8007ab2 <USBD_CtlReceiveStatus>
 8006d08:	e00d      	b.n	8006d26 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006d10:	2b04      	cmp	r3, #4
 8006d12:	d004      	beq.n	8006d1e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d103      	bne.n	8006d26 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006d1e:	2180      	movs	r1, #128	; 0x80
 8006d20:	68f8      	ldr	r0, [r7, #12]
 8006d22:	f001 ffdb 	bl	8008cdc <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	d11d      	bne.n	8006d6c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006d30:	68f8      	ldr	r0, [r7, #12]
 8006d32:	f7ff fe83 	bl	8006a3c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006d3e:	e015      	b.n	8006d6c <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d46:	695b      	ldr	r3, [r3, #20]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d00d      	beq.n	8006d68 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006d52:	2b03      	cmp	r3, #3
 8006d54:	d108      	bne.n	8006d68 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d5c:	695b      	ldr	r3, [r3, #20]
 8006d5e:	7afa      	ldrb	r2, [r7, #11]
 8006d60:	4611      	mov	r1, r2
 8006d62:	68f8      	ldr	r0, [r7, #12]
 8006d64:	4798      	blx	r3
 8006d66:	e001      	b.n	8006d6c <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006d68:	2302      	movs	r3, #2
 8006d6a:	e000      	b.n	8006d6e <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006d6c:	2300      	movs	r3, #0
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3718      	adds	r7, #24
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}

08006d76 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006d76:	b580      	push	{r7, lr}
 8006d78:	b082      	sub	sp, #8
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006d7e:	2340      	movs	r3, #64	; 0x40
 8006d80:	2200      	movs	r2, #0
 8006d82:	2100      	movs	r1, #0
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f001 ff83 	bl	8008c90 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2201      	movs	r2, #1
 8006d8e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2240      	movs	r2, #64	; 0x40
 8006d96:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006d9a:	2340      	movs	r3, #64	; 0x40
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	2180      	movs	r1, #128	; 0x80
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f001 ff75 	bl	8008c90 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2201      	movs	r2, #1
 8006daa:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2240      	movs	r2, #64	; 0x40
 8006db0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2201      	movs	r2, #1
 8006db6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d009      	beq.n	8006dee <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	6852      	ldr	r2, [r2, #4]
 8006de6:	b2d2      	uxtb	r2, r2
 8006de8:	4611      	mov	r1, r2
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	4798      	blx	r3
  }

  return USBD_OK;
 8006dee:	2300      	movs	r3, #0
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3708      	adds	r7, #8
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}

08006df8 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b083      	sub	sp, #12
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	460b      	mov	r3, r1
 8006e02:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	78fa      	ldrb	r2, [r7, #3]
 8006e08:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006e0a:	2300      	movs	r3, #0
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	370c      	adds	r7, #12
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bc80      	pop	{r7}
 8006e14:	4770      	bx	lr

08006e16 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006e16:	b480      	push	{r7}
 8006e18:	b083      	sub	sp, #12
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2204      	movs	r2, #4
 8006e2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006e32:	2300      	movs	r3, #0
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	370c      	adds	r7, #12
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bc80      	pop	{r7}
 8006e3c:	4770      	bx	lr

08006e3e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006e3e:	b480      	push	{r7}
 8006e40:	b083      	sub	sp, #12
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e4c:	2b04      	cmp	r3, #4
 8006e4e:	d105      	bne.n	8006e5c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006e5c:	2300      	movs	r3, #0
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	370c      	adds	r7, #12
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bc80      	pop	{r7}
 8006e66:	4770      	bx	lr

08006e68 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b082      	sub	sp, #8
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e76:	2b03      	cmp	r3, #3
 8006e78:	d10b      	bne.n	8006e92 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e80:	69db      	ldr	r3, [r3, #28]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d005      	beq.n	8006e92 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e8c:	69db      	ldr	r3, [r3, #28]
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006e92:	2300      	movs	r3, #0
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3708      	adds	r7, #8
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}

08006e9c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b084      	sub	sp, #16
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
 8006ea4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	781b      	ldrb	r3, [r3, #0]
 8006eae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006eb2:	2b20      	cmp	r3, #32
 8006eb4:	d004      	beq.n	8006ec0 <USBD_StdDevReq+0x24>
 8006eb6:	2b40      	cmp	r3, #64	; 0x40
 8006eb8:	d002      	beq.n	8006ec0 <USBD_StdDevReq+0x24>
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d008      	beq.n	8006ed0 <USBD_StdDevReq+0x34>
 8006ebe:	e04c      	b.n	8006f5a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ec6:	689b      	ldr	r3, [r3, #8]
 8006ec8:	6839      	ldr	r1, [r7, #0]
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	4798      	blx	r3
      break;
 8006ece:	e049      	b.n	8006f64 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	785b      	ldrb	r3, [r3, #1]
 8006ed4:	2b09      	cmp	r3, #9
 8006ed6:	d83a      	bhi.n	8006f4e <USBD_StdDevReq+0xb2>
 8006ed8:	a201      	add	r2, pc, #4	; (adr r2, 8006ee0 <USBD_StdDevReq+0x44>)
 8006eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ede:	bf00      	nop
 8006ee0:	08006f31 	.word	0x08006f31
 8006ee4:	08006f45 	.word	0x08006f45
 8006ee8:	08006f4f 	.word	0x08006f4f
 8006eec:	08006f3b 	.word	0x08006f3b
 8006ef0:	08006f4f 	.word	0x08006f4f
 8006ef4:	08006f13 	.word	0x08006f13
 8006ef8:	08006f09 	.word	0x08006f09
 8006efc:	08006f4f 	.word	0x08006f4f
 8006f00:	08006f27 	.word	0x08006f27
 8006f04:	08006f1d 	.word	0x08006f1d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006f08:	6839      	ldr	r1, [r7, #0]
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f000 f9d4 	bl	80072b8 <USBD_GetDescriptor>
          break;
 8006f10:	e022      	b.n	8006f58 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006f12:	6839      	ldr	r1, [r7, #0]
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f000 fb49 	bl	80075ac <USBD_SetAddress>
          break;
 8006f1a:	e01d      	b.n	8006f58 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006f1c:	6839      	ldr	r1, [r7, #0]
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f000 fb86 	bl	8007630 <USBD_SetConfig>
          break;
 8006f24:	e018      	b.n	8006f58 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006f26:	6839      	ldr	r1, [r7, #0]
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f000 fc0f 	bl	800774c <USBD_GetConfig>
          break;
 8006f2e:	e013      	b.n	8006f58 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006f30:	6839      	ldr	r1, [r7, #0]
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f000 fc3e 	bl	80077b4 <USBD_GetStatus>
          break;
 8006f38:	e00e      	b.n	8006f58 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006f3a:	6839      	ldr	r1, [r7, #0]
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f000 fc6c 	bl	800781a <USBD_SetFeature>
          break;
 8006f42:	e009      	b.n	8006f58 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006f44:	6839      	ldr	r1, [r7, #0]
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f000 fc7b 	bl	8007842 <USBD_ClrFeature>
          break;
 8006f4c:	e004      	b.n	8006f58 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006f4e:	6839      	ldr	r1, [r7, #0]
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f000 fcd3 	bl	80078fc <USBD_CtlError>
          break;
 8006f56:	bf00      	nop
      }
      break;
 8006f58:	e004      	b.n	8006f64 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006f5a:	6839      	ldr	r1, [r7, #0]
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f000 fccd 	bl	80078fc <USBD_CtlError>
      break;
 8006f62:	bf00      	nop
  }

  return ret;
 8006f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3710      	adds	r7, #16
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
 8006f6e:	bf00      	nop

08006f70 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b084      	sub	sp, #16
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	781b      	ldrb	r3, [r3, #0]
 8006f82:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f86:	2b20      	cmp	r3, #32
 8006f88:	d003      	beq.n	8006f92 <USBD_StdItfReq+0x22>
 8006f8a:	2b40      	cmp	r3, #64	; 0x40
 8006f8c:	d001      	beq.n	8006f92 <USBD_StdItfReq+0x22>
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d12a      	bne.n	8006fe8 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f98:	3b01      	subs	r3, #1
 8006f9a:	2b02      	cmp	r3, #2
 8006f9c:	d81d      	bhi.n	8006fda <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	889b      	ldrh	r3, [r3, #4]
 8006fa2:	b2db      	uxtb	r3, r3
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	d813      	bhi.n	8006fd0 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fae:	689b      	ldr	r3, [r3, #8]
 8006fb0:	6839      	ldr	r1, [r7, #0]
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	4798      	blx	r3
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	88db      	ldrh	r3, [r3, #6]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d110      	bne.n	8006fe4 <USBD_StdItfReq+0x74>
 8006fc2:	7bfb      	ldrb	r3, [r7, #15]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d10d      	bne.n	8006fe4 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f000 fd5f 	bl	8007a8c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006fce:	e009      	b.n	8006fe4 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8006fd0:	6839      	ldr	r1, [r7, #0]
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f000 fc92 	bl	80078fc <USBD_CtlError>
          break;
 8006fd8:	e004      	b.n	8006fe4 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8006fda:	6839      	ldr	r1, [r7, #0]
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f000 fc8d 	bl	80078fc <USBD_CtlError>
          break;
 8006fe2:	e000      	b.n	8006fe6 <USBD_StdItfReq+0x76>
          break;
 8006fe4:	bf00      	nop
      }
      break;
 8006fe6:	e004      	b.n	8006ff2 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8006fe8:	6839      	ldr	r1, [r7, #0]
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f000 fc86 	bl	80078fc <USBD_CtlError>
      break;
 8006ff0:	bf00      	nop
  }

  return USBD_OK;
 8006ff2:	2300      	movs	r3, #0
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3710      	adds	r7, #16
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}

08006ffc <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b084      	sub	sp, #16
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007006:	2300      	movs	r3, #0
 8007008:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	889b      	ldrh	r3, [r3, #4]
 800700e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	781b      	ldrb	r3, [r3, #0]
 8007014:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007018:	2b20      	cmp	r3, #32
 800701a:	d004      	beq.n	8007026 <USBD_StdEPReq+0x2a>
 800701c:	2b40      	cmp	r3, #64	; 0x40
 800701e:	d002      	beq.n	8007026 <USBD_StdEPReq+0x2a>
 8007020:	2b00      	cmp	r3, #0
 8007022:	d008      	beq.n	8007036 <USBD_StdEPReq+0x3a>
 8007024:	e13d      	b.n	80072a2 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800702c:	689b      	ldr	r3, [r3, #8]
 800702e:	6839      	ldr	r1, [r7, #0]
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	4798      	blx	r3
      break;
 8007034:	e13a      	b.n	80072ac <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	781b      	ldrb	r3, [r3, #0]
 800703a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800703e:	2b20      	cmp	r3, #32
 8007040:	d10a      	bne.n	8007058 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	6839      	ldr	r1, [r7, #0]
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	4798      	blx	r3
 8007050:	4603      	mov	r3, r0
 8007052:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007054:	7bfb      	ldrb	r3, [r7, #15]
 8007056:	e12a      	b.n	80072ae <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	785b      	ldrb	r3, [r3, #1]
 800705c:	2b01      	cmp	r3, #1
 800705e:	d03e      	beq.n	80070de <USBD_StdEPReq+0xe2>
 8007060:	2b03      	cmp	r3, #3
 8007062:	d002      	beq.n	800706a <USBD_StdEPReq+0x6e>
 8007064:	2b00      	cmp	r3, #0
 8007066:	d070      	beq.n	800714a <USBD_StdEPReq+0x14e>
 8007068:	e115      	b.n	8007296 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007070:	2b02      	cmp	r3, #2
 8007072:	d002      	beq.n	800707a <USBD_StdEPReq+0x7e>
 8007074:	2b03      	cmp	r3, #3
 8007076:	d015      	beq.n	80070a4 <USBD_StdEPReq+0xa8>
 8007078:	e02b      	b.n	80070d2 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800707a:	7bbb      	ldrb	r3, [r7, #14]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d00c      	beq.n	800709a <USBD_StdEPReq+0x9e>
 8007080:	7bbb      	ldrb	r3, [r7, #14]
 8007082:	2b80      	cmp	r3, #128	; 0x80
 8007084:	d009      	beq.n	800709a <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007086:	7bbb      	ldrb	r3, [r7, #14]
 8007088:	4619      	mov	r1, r3
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f001 fe26 	bl	8008cdc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007090:	2180      	movs	r1, #128	; 0x80
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f001 fe22 	bl	8008cdc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007098:	e020      	b.n	80070dc <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 800709a:	6839      	ldr	r1, [r7, #0]
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f000 fc2d 	bl	80078fc <USBD_CtlError>
              break;
 80070a2:	e01b      	b.n	80070dc <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	885b      	ldrh	r3, [r3, #2]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d10e      	bne.n	80070ca <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 80070ac:	7bbb      	ldrb	r3, [r7, #14]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d00b      	beq.n	80070ca <USBD_StdEPReq+0xce>
 80070b2:	7bbb      	ldrb	r3, [r7, #14]
 80070b4:	2b80      	cmp	r3, #128	; 0x80
 80070b6:	d008      	beq.n	80070ca <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	88db      	ldrh	r3, [r3, #6]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d104      	bne.n	80070ca <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80070c0:	7bbb      	ldrb	r3, [r7, #14]
 80070c2:	4619      	mov	r1, r3
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f001 fe09 	bl	8008cdc <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f000 fcde 	bl	8007a8c <USBD_CtlSendStatus>

              break;
 80070d0:	e004      	b.n	80070dc <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 80070d2:	6839      	ldr	r1, [r7, #0]
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f000 fc11 	bl	80078fc <USBD_CtlError>
              break;
 80070da:	bf00      	nop
          }
          break;
 80070dc:	e0e0      	b.n	80072a0 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070e4:	2b02      	cmp	r3, #2
 80070e6:	d002      	beq.n	80070ee <USBD_StdEPReq+0xf2>
 80070e8:	2b03      	cmp	r3, #3
 80070ea:	d015      	beq.n	8007118 <USBD_StdEPReq+0x11c>
 80070ec:	e026      	b.n	800713c <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80070ee:	7bbb      	ldrb	r3, [r7, #14]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d00c      	beq.n	800710e <USBD_StdEPReq+0x112>
 80070f4:	7bbb      	ldrb	r3, [r7, #14]
 80070f6:	2b80      	cmp	r3, #128	; 0x80
 80070f8:	d009      	beq.n	800710e <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80070fa:	7bbb      	ldrb	r3, [r7, #14]
 80070fc:	4619      	mov	r1, r3
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f001 fdec 	bl	8008cdc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007104:	2180      	movs	r1, #128	; 0x80
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f001 fde8 	bl	8008cdc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800710c:	e01c      	b.n	8007148 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 800710e:	6839      	ldr	r1, [r7, #0]
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f000 fbf3 	bl	80078fc <USBD_CtlError>
              break;
 8007116:	e017      	b.n	8007148 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	885b      	ldrh	r3, [r3, #2]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d112      	bne.n	8007146 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007120:	7bbb      	ldrb	r3, [r7, #14]
 8007122:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007126:	2b00      	cmp	r3, #0
 8007128:	d004      	beq.n	8007134 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800712a:	7bbb      	ldrb	r3, [r7, #14]
 800712c:	4619      	mov	r1, r3
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f001 fdf3 	bl	8008d1a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f000 fca9 	bl	8007a8c <USBD_CtlSendStatus>
              }
              break;
 800713a:	e004      	b.n	8007146 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 800713c:	6839      	ldr	r1, [r7, #0]
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f000 fbdc 	bl	80078fc <USBD_CtlError>
              break;
 8007144:	e000      	b.n	8007148 <USBD_StdEPReq+0x14c>
              break;
 8007146:	bf00      	nop
          }
          break;
 8007148:	e0aa      	b.n	80072a0 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007150:	2b02      	cmp	r3, #2
 8007152:	d002      	beq.n	800715a <USBD_StdEPReq+0x15e>
 8007154:	2b03      	cmp	r3, #3
 8007156:	d032      	beq.n	80071be <USBD_StdEPReq+0x1c2>
 8007158:	e097      	b.n	800728a <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800715a:	7bbb      	ldrb	r3, [r7, #14]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d007      	beq.n	8007170 <USBD_StdEPReq+0x174>
 8007160:	7bbb      	ldrb	r3, [r7, #14]
 8007162:	2b80      	cmp	r3, #128	; 0x80
 8007164:	d004      	beq.n	8007170 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8007166:	6839      	ldr	r1, [r7, #0]
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f000 fbc7 	bl	80078fc <USBD_CtlError>
                break;
 800716e:	e091      	b.n	8007294 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007170:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007174:	2b00      	cmp	r3, #0
 8007176:	da0b      	bge.n	8007190 <USBD_StdEPReq+0x194>
 8007178:	7bbb      	ldrb	r3, [r7, #14]
 800717a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800717e:	4613      	mov	r3, r2
 8007180:	009b      	lsls	r3, r3, #2
 8007182:	4413      	add	r3, r2
 8007184:	009b      	lsls	r3, r3, #2
 8007186:	3310      	adds	r3, #16
 8007188:	687a      	ldr	r2, [r7, #4]
 800718a:	4413      	add	r3, r2
 800718c:	3304      	adds	r3, #4
 800718e:	e00b      	b.n	80071a8 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007190:	7bbb      	ldrb	r3, [r7, #14]
 8007192:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007196:	4613      	mov	r3, r2
 8007198:	009b      	lsls	r3, r3, #2
 800719a:	4413      	add	r3, r2
 800719c:	009b      	lsls	r3, r3, #2
 800719e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80071a2:	687a      	ldr	r2, [r7, #4]
 80071a4:	4413      	add	r3, r2
 80071a6:	3304      	adds	r3, #4
 80071a8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	2200      	movs	r2, #0
 80071ae:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	2202      	movs	r2, #2
 80071b4:	4619      	mov	r1, r3
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f000 fc0a 	bl	80079d0 <USBD_CtlSendData>
              break;
 80071bc:	e06a      	b.n	8007294 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80071be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	da11      	bge.n	80071ea <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80071c6:	7bbb      	ldrb	r3, [r7, #14]
 80071c8:	f003 020f 	and.w	r2, r3, #15
 80071cc:	6879      	ldr	r1, [r7, #4]
 80071ce:	4613      	mov	r3, r2
 80071d0:	009b      	lsls	r3, r3, #2
 80071d2:	4413      	add	r3, r2
 80071d4:	009b      	lsls	r3, r3, #2
 80071d6:	440b      	add	r3, r1
 80071d8:	3318      	adds	r3, #24
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d117      	bne.n	8007210 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80071e0:	6839      	ldr	r1, [r7, #0]
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f000 fb8a 	bl	80078fc <USBD_CtlError>
                  break;
 80071e8:	e054      	b.n	8007294 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80071ea:	7bbb      	ldrb	r3, [r7, #14]
 80071ec:	f003 020f 	and.w	r2, r3, #15
 80071f0:	6879      	ldr	r1, [r7, #4]
 80071f2:	4613      	mov	r3, r2
 80071f4:	009b      	lsls	r3, r3, #2
 80071f6:	4413      	add	r3, r2
 80071f8:	009b      	lsls	r3, r3, #2
 80071fa:	440b      	add	r3, r1
 80071fc:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d104      	bne.n	8007210 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8007206:	6839      	ldr	r1, [r7, #0]
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f000 fb77 	bl	80078fc <USBD_CtlError>
                  break;
 800720e:	e041      	b.n	8007294 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007210:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007214:	2b00      	cmp	r3, #0
 8007216:	da0b      	bge.n	8007230 <USBD_StdEPReq+0x234>
 8007218:	7bbb      	ldrb	r3, [r7, #14]
 800721a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800721e:	4613      	mov	r3, r2
 8007220:	009b      	lsls	r3, r3, #2
 8007222:	4413      	add	r3, r2
 8007224:	009b      	lsls	r3, r3, #2
 8007226:	3310      	adds	r3, #16
 8007228:	687a      	ldr	r2, [r7, #4]
 800722a:	4413      	add	r3, r2
 800722c:	3304      	adds	r3, #4
 800722e:	e00b      	b.n	8007248 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007230:	7bbb      	ldrb	r3, [r7, #14]
 8007232:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007236:	4613      	mov	r3, r2
 8007238:	009b      	lsls	r3, r3, #2
 800723a:	4413      	add	r3, r2
 800723c:	009b      	lsls	r3, r3, #2
 800723e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	4413      	add	r3, r2
 8007246:	3304      	adds	r3, #4
 8007248:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800724a:	7bbb      	ldrb	r3, [r7, #14]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d002      	beq.n	8007256 <USBD_StdEPReq+0x25a>
 8007250:	7bbb      	ldrb	r3, [r7, #14]
 8007252:	2b80      	cmp	r3, #128	; 0x80
 8007254:	d103      	bne.n	800725e <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	2200      	movs	r2, #0
 800725a:	601a      	str	r2, [r3, #0]
 800725c:	e00e      	b.n	800727c <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800725e:	7bbb      	ldrb	r3, [r7, #14]
 8007260:	4619      	mov	r1, r3
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f001 fd78 	bl	8008d58 <USBD_LL_IsStallEP>
 8007268:	4603      	mov	r3, r0
 800726a:	2b00      	cmp	r3, #0
 800726c:	d003      	beq.n	8007276 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	2201      	movs	r2, #1
 8007272:	601a      	str	r2, [r3, #0]
 8007274:	e002      	b.n	800727c <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	2200      	movs	r2, #0
 800727a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	2202      	movs	r2, #2
 8007280:	4619      	mov	r1, r3
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f000 fba4 	bl	80079d0 <USBD_CtlSendData>
              break;
 8007288:	e004      	b.n	8007294 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 800728a:	6839      	ldr	r1, [r7, #0]
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f000 fb35 	bl	80078fc <USBD_CtlError>
              break;
 8007292:	bf00      	nop
          }
          break;
 8007294:	e004      	b.n	80072a0 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8007296:	6839      	ldr	r1, [r7, #0]
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f000 fb2f 	bl	80078fc <USBD_CtlError>
          break;
 800729e:	bf00      	nop
      }
      break;
 80072a0:	e004      	b.n	80072ac <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 80072a2:	6839      	ldr	r1, [r7, #0]
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f000 fb29 	bl	80078fc <USBD_CtlError>
      break;
 80072aa:	bf00      	nop
  }

  return ret;
 80072ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3710      	adds	r7, #16
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}
	...

080072b8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b084      	sub	sp, #16
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
 80072c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80072c2:	2300      	movs	r3, #0
 80072c4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80072c6:	2300      	movs	r3, #0
 80072c8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80072ca:	2300      	movs	r3, #0
 80072cc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	885b      	ldrh	r3, [r3, #2]
 80072d2:	0a1b      	lsrs	r3, r3, #8
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	3b01      	subs	r3, #1
 80072d8:	2b06      	cmp	r3, #6
 80072da:	f200 813b 	bhi.w	8007554 <USBD_GetDescriptor+0x29c>
 80072de:	a201      	add	r2, pc, #4	; (adr r2, 80072e4 <USBD_GetDescriptor+0x2c>)
 80072e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072e4:	08007301 	.word	0x08007301
 80072e8:	08007319 	.word	0x08007319
 80072ec:	08007359 	.word	0x08007359
 80072f0:	08007555 	.word	0x08007555
 80072f4:	08007555 	.word	0x08007555
 80072f8:	080074f5 	.word	0x080074f5
 80072fc:	08007521 	.word	0x08007521
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	687a      	ldr	r2, [r7, #4]
 800730a:	7c12      	ldrb	r2, [r2, #16]
 800730c:	f107 0108 	add.w	r1, r7, #8
 8007310:	4610      	mov	r0, r2
 8007312:	4798      	blx	r3
 8007314:	60f8      	str	r0, [r7, #12]
      break;
 8007316:	e125      	b.n	8007564 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	7c1b      	ldrb	r3, [r3, #16]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d10d      	bne.n	800733c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007328:	f107 0208 	add.w	r2, r7, #8
 800732c:	4610      	mov	r0, r2
 800732e:	4798      	blx	r3
 8007330:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	3301      	adds	r3, #1
 8007336:	2202      	movs	r2, #2
 8007338:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800733a:	e113      	b.n	8007564 <USBD_GetDescriptor+0x2ac>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007344:	f107 0208 	add.w	r2, r7, #8
 8007348:	4610      	mov	r0, r2
 800734a:	4798      	blx	r3
 800734c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	3301      	adds	r3, #1
 8007352:	2202      	movs	r2, #2
 8007354:	701a      	strb	r2, [r3, #0]
      break;
 8007356:	e105      	b.n	8007564 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	885b      	ldrh	r3, [r3, #2]
 800735c:	b2db      	uxtb	r3, r3
 800735e:	2b05      	cmp	r3, #5
 8007360:	f200 80ac 	bhi.w	80074bc <USBD_GetDescriptor+0x204>
 8007364:	a201      	add	r2, pc, #4	; (adr r2, 800736c <USBD_GetDescriptor+0xb4>)
 8007366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800736a:	bf00      	nop
 800736c:	08007385 	.word	0x08007385
 8007370:	080073b9 	.word	0x080073b9
 8007374:	080073ed 	.word	0x080073ed
 8007378:	08007421 	.word	0x08007421
 800737c:	08007455 	.word	0x08007455
 8007380:	08007489 	.word	0x08007489
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d00b      	beq.n	80073a8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	687a      	ldr	r2, [r7, #4]
 800739a:	7c12      	ldrb	r2, [r2, #16]
 800739c:	f107 0108 	add.w	r1, r7, #8
 80073a0:	4610      	mov	r0, r2
 80073a2:	4798      	blx	r3
 80073a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80073a6:	e0a4      	b.n	80074f2 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 80073a8:	6839      	ldr	r1, [r7, #0]
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f000 faa6 	bl	80078fc <USBD_CtlError>
            err++;
 80073b0:	7afb      	ldrb	r3, [r7, #11]
 80073b2:	3301      	adds	r3, #1
 80073b4:	72fb      	strb	r3, [r7, #11]
          break;
 80073b6:	e09c      	b.n	80074f2 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80073be:	689b      	ldr	r3, [r3, #8]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d00b      	beq.n	80073dc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80073ca:	689b      	ldr	r3, [r3, #8]
 80073cc:	687a      	ldr	r2, [r7, #4]
 80073ce:	7c12      	ldrb	r2, [r2, #16]
 80073d0:	f107 0108 	add.w	r1, r7, #8
 80073d4:	4610      	mov	r0, r2
 80073d6:	4798      	blx	r3
 80073d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80073da:	e08a      	b.n	80074f2 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 80073dc:	6839      	ldr	r1, [r7, #0]
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f000 fa8c 	bl	80078fc <USBD_CtlError>
            err++;
 80073e4:	7afb      	ldrb	r3, [r7, #11]
 80073e6:	3301      	adds	r3, #1
 80073e8:	72fb      	strb	r3, [r7, #11]
          break;
 80073ea:	e082      	b.n	80074f2 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80073f2:	68db      	ldr	r3, [r3, #12]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d00b      	beq.n	8007410 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80073fe:	68db      	ldr	r3, [r3, #12]
 8007400:	687a      	ldr	r2, [r7, #4]
 8007402:	7c12      	ldrb	r2, [r2, #16]
 8007404:	f107 0108 	add.w	r1, r7, #8
 8007408:	4610      	mov	r0, r2
 800740a:	4798      	blx	r3
 800740c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800740e:	e070      	b.n	80074f2 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8007410:	6839      	ldr	r1, [r7, #0]
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f000 fa72 	bl	80078fc <USBD_CtlError>
            err++;
 8007418:	7afb      	ldrb	r3, [r7, #11]
 800741a:	3301      	adds	r3, #1
 800741c:	72fb      	strb	r3, [r7, #11]
          break;
 800741e:	e068      	b.n	80074f2 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007426:	691b      	ldr	r3, [r3, #16]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d00b      	beq.n	8007444 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007432:	691b      	ldr	r3, [r3, #16]
 8007434:	687a      	ldr	r2, [r7, #4]
 8007436:	7c12      	ldrb	r2, [r2, #16]
 8007438:	f107 0108 	add.w	r1, r7, #8
 800743c:	4610      	mov	r0, r2
 800743e:	4798      	blx	r3
 8007440:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007442:	e056      	b.n	80074f2 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8007444:	6839      	ldr	r1, [r7, #0]
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f000 fa58 	bl	80078fc <USBD_CtlError>
            err++;
 800744c:	7afb      	ldrb	r3, [r7, #11]
 800744e:	3301      	adds	r3, #1
 8007450:	72fb      	strb	r3, [r7, #11]
          break;
 8007452:	e04e      	b.n	80074f2 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800745a:	695b      	ldr	r3, [r3, #20]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d00b      	beq.n	8007478 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007466:	695b      	ldr	r3, [r3, #20]
 8007468:	687a      	ldr	r2, [r7, #4]
 800746a:	7c12      	ldrb	r2, [r2, #16]
 800746c:	f107 0108 	add.w	r1, r7, #8
 8007470:	4610      	mov	r0, r2
 8007472:	4798      	blx	r3
 8007474:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007476:	e03c      	b.n	80074f2 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8007478:	6839      	ldr	r1, [r7, #0]
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f000 fa3e 	bl	80078fc <USBD_CtlError>
            err++;
 8007480:	7afb      	ldrb	r3, [r7, #11]
 8007482:	3301      	adds	r3, #1
 8007484:	72fb      	strb	r3, [r7, #11]
          break;
 8007486:	e034      	b.n	80074f2 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800748e:	699b      	ldr	r3, [r3, #24]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d00b      	beq.n	80074ac <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800749a:	699b      	ldr	r3, [r3, #24]
 800749c:	687a      	ldr	r2, [r7, #4]
 800749e:	7c12      	ldrb	r2, [r2, #16]
 80074a0:	f107 0108 	add.w	r1, r7, #8
 80074a4:	4610      	mov	r0, r2
 80074a6:	4798      	blx	r3
 80074a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80074aa:	e022      	b.n	80074f2 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 80074ac:	6839      	ldr	r1, [r7, #0]
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f000 fa24 	bl	80078fc <USBD_CtlError>
            err++;
 80074b4:	7afb      	ldrb	r3, [r7, #11]
 80074b6:	3301      	adds	r3, #1
 80074b8:	72fb      	strb	r3, [r7, #11]
          break;
 80074ba:	e01a      	b.n	80074f2 <USBD_GetDescriptor+0x23a>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d00c      	beq.n	80074e2 <USBD_GetDescriptor+0x22a>
          {
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074d0:	683a      	ldr	r2, [r7, #0]
 80074d2:	8852      	ldrh	r2, [r2, #2]
 80074d4:	b2d1      	uxtb	r1, r2
 80074d6:	f107 0208 	add.w	r2, r7, #8
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	4798      	blx	r3
 80074de:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80074e0:	e006      	b.n	80074f0 <USBD_GetDescriptor+0x238>
            USBD_CtlError(pdev, req);
 80074e2:	6839      	ldr	r1, [r7, #0]
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f000 fa09 	bl	80078fc <USBD_CtlError>
            err++;
 80074ea:	7afb      	ldrb	r3, [r7, #11]
 80074ec:	3301      	adds	r3, #1
 80074ee:	72fb      	strb	r3, [r7, #11]
          break;
 80074f0:	bf00      	nop
#else
          USBD_CtlError(pdev, req);
          err++;
#endif
      }
      break;
 80074f2:	e037      	b.n	8007564 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	7c1b      	ldrb	r3, [r3, #16]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d109      	bne.n	8007510 <USBD_GetDescriptor+0x258>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007504:	f107 0208 	add.w	r2, r7, #8
 8007508:	4610      	mov	r0, r2
 800750a:	4798      	blx	r3
 800750c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800750e:	e029      	b.n	8007564 <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 8007510:	6839      	ldr	r1, [r7, #0]
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f000 f9f2 	bl	80078fc <USBD_CtlError>
        err++;
 8007518:	7afb      	ldrb	r3, [r7, #11]
 800751a:	3301      	adds	r3, #1
 800751c:	72fb      	strb	r3, [r7, #11]
      break;
 800751e:	e021      	b.n	8007564 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	7c1b      	ldrb	r3, [r3, #16]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d10d      	bne.n	8007544 <USBD_GetDescriptor+0x28c>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800752e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007530:	f107 0208 	add.w	r2, r7, #8
 8007534:	4610      	mov	r0, r2
 8007536:	4798      	blx	r3
 8007538:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	3301      	adds	r3, #1
 800753e:	2207      	movs	r2, #7
 8007540:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007542:	e00f      	b.n	8007564 <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 8007544:	6839      	ldr	r1, [r7, #0]
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f000 f9d8 	bl	80078fc <USBD_CtlError>
        err++;
 800754c:	7afb      	ldrb	r3, [r7, #11]
 800754e:	3301      	adds	r3, #1
 8007550:	72fb      	strb	r3, [r7, #11]
      break;
 8007552:	e007      	b.n	8007564 <USBD_GetDescriptor+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 8007554:	6839      	ldr	r1, [r7, #0]
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f000 f9d0 	bl	80078fc <USBD_CtlError>
      err++;
 800755c:	7afb      	ldrb	r3, [r7, #11]
 800755e:	3301      	adds	r3, #1
 8007560:	72fb      	strb	r3, [r7, #11]
      break;
 8007562:	bf00      	nop
  }

  if (err != 0U)
 8007564:	7afb      	ldrb	r3, [r7, #11]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d11c      	bne.n	80075a4 <USBD_GetDescriptor+0x2ec>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800756a:	893b      	ldrh	r3, [r7, #8]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d011      	beq.n	8007594 <USBD_GetDescriptor+0x2dc>
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	88db      	ldrh	r3, [r3, #6]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d00d      	beq.n	8007594 <USBD_GetDescriptor+0x2dc>
    {
      len = MIN(len, req->wLength);
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	88da      	ldrh	r2, [r3, #6]
 800757c:	893b      	ldrh	r3, [r7, #8]
 800757e:	4293      	cmp	r3, r2
 8007580:	bf28      	it	cs
 8007582:	4613      	movcs	r3, r2
 8007584:	b29b      	uxth	r3, r3
 8007586:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007588:	893b      	ldrh	r3, [r7, #8]
 800758a:	461a      	mov	r2, r3
 800758c:	68f9      	ldr	r1, [r7, #12]
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f000 fa1e 	bl	80079d0 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	88db      	ldrh	r3, [r3, #6]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d104      	bne.n	80075a6 <USBD_GetDescriptor+0x2ee>
    {
      (void)USBD_CtlSendStatus(pdev);
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f000 fa75 	bl	8007a8c <USBD_CtlSendStatus>
 80075a2:	e000      	b.n	80075a6 <USBD_GetDescriptor+0x2ee>
    return;
 80075a4:	bf00      	nop
    }
  }
}
 80075a6:	3710      	adds	r7, #16
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}

080075ac <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b084      	sub	sp, #16
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
 80075b4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	889b      	ldrh	r3, [r3, #4]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d130      	bne.n	8007620 <USBD_SetAddress+0x74>
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	88db      	ldrh	r3, [r3, #6]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d12c      	bne.n	8007620 <USBD_SetAddress+0x74>
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	885b      	ldrh	r3, [r3, #2]
 80075ca:	2b7f      	cmp	r3, #127	; 0x7f
 80075cc:	d828      	bhi.n	8007620 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	885b      	ldrh	r3, [r3, #2]
 80075d2:	b2db      	uxtb	r3, r3
 80075d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075d8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075e0:	2b03      	cmp	r3, #3
 80075e2:	d104      	bne.n	80075ee <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80075e4:	6839      	ldr	r1, [r7, #0]
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f000 f988 	bl	80078fc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075ec:	e01c      	b.n	8007628 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	7bfa      	ldrb	r2, [r7, #15]
 80075f2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80075f6:	7bfb      	ldrb	r3, [r7, #15]
 80075f8:	4619      	mov	r1, r3
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f001 fbd1 	bl	8008da2 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f000 fa43 	bl	8007a8c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007606:	7bfb      	ldrb	r3, [r7, #15]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d004      	beq.n	8007616 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2202      	movs	r2, #2
 8007610:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007614:	e008      	b.n	8007628 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2201      	movs	r2, #1
 800761a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800761e:	e003      	b.n	8007628 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007620:	6839      	ldr	r1, [r7, #0]
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f000 f96a 	bl	80078fc <USBD_CtlError>
  }
}
 8007628:	bf00      	nop
 800762a:	3710      	adds	r7, #16
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}

08007630 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b082      	sub	sp, #8
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
 8007638:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	885b      	ldrh	r3, [r3, #2]
 800763e:	b2da      	uxtb	r2, r3
 8007640:	4b41      	ldr	r3, [pc, #260]	; (8007748 <USBD_SetConfig+0x118>)
 8007642:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007644:	4b40      	ldr	r3, [pc, #256]	; (8007748 <USBD_SetConfig+0x118>)
 8007646:	781b      	ldrb	r3, [r3, #0]
 8007648:	2b01      	cmp	r3, #1
 800764a:	d904      	bls.n	8007656 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800764c:	6839      	ldr	r1, [r7, #0]
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f000 f954 	bl	80078fc <USBD_CtlError>
 8007654:	e075      	b.n	8007742 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800765c:	2b02      	cmp	r3, #2
 800765e:	d002      	beq.n	8007666 <USBD_SetConfig+0x36>
 8007660:	2b03      	cmp	r3, #3
 8007662:	d023      	beq.n	80076ac <USBD_SetConfig+0x7c>
 8007664:	e062      	b.n	800772c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007666:	4b38      	ldr	r3, [pc, #224]	; (8007748 <USBD_SetConfig+0x118>)
 8007668:	781b      	ldrb	r3, [r3, #0]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d01a      	beq.n	80076a4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800766e:	4b36      	ldr	r3, [pc, #216]	; (8007748 <USBD_SetConfig+0x118>)
 8007670:	781b      	ldrb	r3, [r3, #0]
 8007672:	461a      	mov	r2, r3
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2203      	movs	r2, #3
 800767c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007680:	4b31      	ldr	r3, [pc, #196]	; (8007748 <USBD_SetConfig+0x118>)
 8007682:	781b      	ldrb	r3, [r3, #0]
 8007684:	4619      	mov	r1, r3
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f7ff f9e2 	bl	8006a50 <USBD_SetClassConfig>
 800768c:	4603      	mov	r3, r0
 800768e:	2b02      	cmp	r3, #2
 8007690:	d104      	bne.n	800769c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007692:	6839      	ldr	r1, [r7, #0]
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f000 f931 	bl	80078fc <USBD_CtlError>
            return;
 800769a:	e052      	b.n	8007742 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f000 f9f5 	bl	8007a8c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80076a2:	e04e      	b.n	8007742 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f000 f9f1 	bl	8007a8c <USBD_CtlSendStatus>
        break;
 80076aa:	e04a      	b.n	8007742 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80076ac:	4b26      	ldr	r3, [pc, #152]	; (8007748 <USBD_SetConfig+0x118>)
 80076ae:	781b      	ldrb	r3, [r3, #0]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d112      	bne.n	80076da <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2202      	movs	r2, #2
 80076b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80076bc:	4b22      	ldr	r3, [pc, #136]	; (8007748 <USBD_SetConfig+0x118>)
 80076be:	781b      	ldrb	r3, [r3, #0]
 80076c0:	461a      	mov	r2, r3
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80076c6:	4b20      	ldr	r3, [pc, #128]	; (8007748 <USBD_SetConfig+0x118>)
 80076c8:	781b      	ldrb	r3, [r3, #0]
 80076ca:	4619      	mov	r1, r3
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f7ff f9de 	bl	8006a8e <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f000 f9da 	bl	8007a8c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80076d8:	e033      	b.n	8007742 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80076da:	4b1b      	ldr	r3, [pc, #108]	; (8007748 <USBD_SetConfig+0x118>)
 80076dc:	781b      	ldrb	r3, [r3, #0]
 80076de:	461a      	mov	r2, r3
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	429a      	cmp	r2, r3
 80076e6:	d01d      	beq.n	8007724 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	b2db      	uxtb	r3, r3
 80076ee:	4619      	mov	r1, r3
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f7ff f9cc 	bl	8006a8e <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80076f6:	4b14      	ldr	r3, [pc, #80]	; (8007748 <USBD_SetConfig+0x118>)
 80076f8:	781b      	ldrb	r3, [r3, #0]
 80076fa:	461a      	mov	r2, r3
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007700:	4b11      	ldr	r3, [pc, #68]	; (8007748 <USBD_SetConfig+0x118>)
 8007702:	781b      	ldrb	r3, [r3, #0]
 8007704:	4619      	mov	r1, r3
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f7ff f9a2 	bl	8006a50 <USBD_SetClassConfig>
 800770c:	4603      	mov	r3, r0
 800770e:	2b02      	cmp	r3, #2
 8007710:	d104      	bne.n	800771c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007712:	6839      	ldr	r1, [r7, #0]
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f000 f8f1 	bl	80078fc <USBD_CtlError>
            return;
 800771a:	e012      	b.n	8007742 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f000 f9b5 	bl	8007a8c <USBD_CtlSendStatus>
        break;
 8007722:	e00e      	b.n	8007742 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f000 f9b1 	bl	8007a8c <USBD_CtlSendStatus>
        break;
 800772a:	e00a      	b.n	8007742 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800772c:	6839      	ldr	r1, [r7, #0]
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f000 f8e4 	bl	80078fc <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007734:	4b04      	ldr	r3, [pc, #16]	; (8007748 <USBD_SetConfig+0x118>)
 8007736:	781b      	ldrb	r3, [r3, #0]
 8007738:	4619      	mov	r1, r3
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f7ff f9a7 	bl	8006a8e <USBD_ClrClassConfig>
        break;
 8007740:	bf00      	nop
    }
  }
}
 8007742:	3708      	adds	r7, #8
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}
 8007748:	2000020b 	.word	0x2000020b

0800774c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b082      	sub	sp, #8
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
 8007754:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	88db      	ldrh	r3, [r3, #6]
 800775a:	2b01      	cmp	r3, #1
 800775c:	d004      	beq.n	8007768 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800775e:	6839      	ldr	r1, [r7, #0]
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f000 f8cb 	bl	80078fc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007766:	e021      	b.n	80077ac <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800776e:	2b01      	cmp	r3, #1
 8007770:	db17      	blt.n	80077a2 <USBD_GetConfig+0x56>
 8007772:	2b02      	cmp	r3, #2
 8007774:	dd02      	ble.n	800777c <USBD_GetConfig+0x30>
 8007776:	2b03      	cmp	r3, #3
 8007778:	d00b      	beq.n	8007792 <USBD_GetConfig+0x46>
 800777a:	e012      	b.n	80077a2 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2200      	movs	r2, #0
 8007780:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	3308      	adds	r3, #8
 8007786:	2201      	movs	r2, #1
 8007788:	4619      	mov	r1, r3
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f000 f920 	bl	80079d0 <USBD_CtlSendData>
        break;
 8007790:	e00c      	b.n	80077ac <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	3304      	adds	r3, #4
 8007796:	2201      	movs	r2, #1
 8007798:	4619      	mov	r1, r3
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f000 f918 	bl	80079d0 <USBD_CtlSendData>
        break;
 80077a0:	e004      	b.n	80077ac <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 80077a2:	6839      	ldr	r1, [r7, #0]
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f000 f8a9 	bl	80078fc <USBD_CtlError>
        break;
 80077aa:	bf00      	nop
}
 80077ac:	bf00      	nop
 80077ae:	3708      	adds	r7, #8
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}

080077b4 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b082      	sub	sp, #8
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
 80077bc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077c4:	3b01      	subs	r3, #1
 80077c6:	2b02      	cmp	r3, #2
 80077c8:	d81e      	bhi.n	8007808 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	88db      	ldrh	r3, [r3, #6]
 80077ce:	2b02      	cmp	r3, #2
 80077d0:	d004      	beq.n	80077dc <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80077d2:	6839      	ldr	r1, [r7, #0]
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f000 f891 	bl	80078fc <USBD_CtlError>
        break;
 80077da:	e01a      	b.n	8007812 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2201      	movs	r2, #1
 80077e0:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d005      	beq.n	80077f8 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	68db      	ldr	r3, [r3, #12]
 80077f0:	f043 0202 	orr.w	r2, r3, #2
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	330c      	adds	r3, #12
 80077fc:	2202      	movs	r2, #2
 80077fe:	4619      	mov	r1, r3
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f000 f8e5 	bl	80079d0 <USBD_CtlSendData>
      break;
 8007806:	e004      	b.n	8007812 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007808:	6839      	ldr	r1, [r7, #0]
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f000 f876 	bl	80078fc <USBD_CtlError>
      break;
 8007810:	bf00      	nop
  }
}
 8007812:	bf00      	nop
 8007814:	3708      	adds	r7, #8
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}

0800781a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800781a:	b580      	push	{r7, lr}
 800781c:	b082      	sub	sp, #8
 800781e:	af00      	add	r7, sp, #0
 8007820:	6078      	str	r0, [r7, #4]
 8007822:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	885b      	ldrh	r3, [r3, #2]
 8007828:	2b01      	cmp	r3, #1
 800782a:	d106      	bne.n	800783a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2201      	movs	r2, #1
 8007830:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f000 f929 	bl	8007a8c <USBD_CtlSendStatus>
  }
}
 800783a:	bf00      	nop
 800783c:	3708      	adds	r7, #8
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}

08007842 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007842:	b580      	push	{r7, lr}
 8007844:	b082      	sub	sp, #8
 8007846:	af00      	add	r7, sp, #0
 8007848:	6078      	str	r0, [r7, #4]
 800784a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007852:	3b01      	subs	r3, #1
 8007854:	2b02      	cmp	r3, #2
 8007856:	d80b      	bhi.n	8007870 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	885b      	ldrh	r3, [r3, #2]
 800785c:	2b01      	cmp	r3, #1
 800785e:	d10c      	bne.n	800787a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2200      	movs	r2, #0
 8007864:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f000 f90f 	bl	8007a8c <USBD_CtlSendStatus>
      }
      break;
 800786e:	e004      	b.n	800787a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007870:	6839      	ldr	r1, [r7, #0]
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f000 f842 	bl	80078fc <USBD_CtlError>
      break;
 8007878:	e000      	b.n	800787c <USBD_ClrFeature+0x3a>
      break;
 800787a:	bf00      	nop
  }
}
 800787c:	bf00      	nop
 800787e:	3708      	adds	r7, #8
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}

08007884 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007884:	b480      	push	{r7}
 8007886:	b083      	sub	sp, #12
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
 800788c:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	781a      	ldrb	r2, [r3, #0]
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	785a      	ldrb	r2, [r3, #1]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	3302      	adds	r3, #2
 80078a2:	781b      	ldrb	r3, [r3, #0]
 80078a4:	b29a      	uxth	r2, r3
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	3303      	adds	r3, #3
 80078aa:	781b      	ldrb	r3, [r3, #0]
 80078ac:	b29b      	uxth	r3, r3
 80078ae:	021b      	lsls	r3, r3, #8
 80078b0:	b29b      	uxth	r3, r3
 80078b2:	4413      	add	r3, r2
 80078b4:	b29a      	uxth	r2, r3
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	3304      	adds	r3, #4
 80078be:	781b      	ldrb	r3, [r3, #0]
 80078c0:	b29a      	uxth	r2, r3
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	3305      	adds	r3, #5
 80078c6:	781b      	ldrb	r3, [r3, #0]
 80078c8:	b29b      	uxth	r3, r3
 80078ca:	021b      	lsls	r3, r3, #8
 80078cc:	b29b      	uxth	r3, r3
 80078ce:	4413      	add	r3, r2
 80078d0:	b29a      	uxth	r2, r3
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	3306      	adds	r3, #6
 80078da:	781b      	ldrb	r3, [r3, #0]
 80078dc:	b29a      	uxth	r2, r3
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	3307      	adds	r3, #7
 80078e2:	781b      	ldrb	r3, [r3, #0]
 80078e4:	b29b      	uxth	r3, r3
 80078e6:	021b      	lsls	r3, r3, #8
 80078e8:	b29b      	uxth	r3, r3
 80078ea:	4413      	add	r3, r2
 80078ec:	b29a      	uxth	r2, r3
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	80da      	strh	r2, [r3, #6]

}
 80078f2:	bf00      	nop
 80078f4:	370c      	adds	r7, #12
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bc80      	pop	{r7}
 80078fa:	4770      	bx	lr

080078fc <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b082      	sub	sp, #8
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
 8007904:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007906:	2180      	movs	r1, #128	; 0x80
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f001 f9e7 	bl	8008cdc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800790e:	2100      	movs	r1, #0
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f001 f9e3 	bl	8008cdc <USBD_LL_StallEP>
}
 8007916:	bf00      	nop
 8007918:	3708      	adds	r7, #8
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}

0800791e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800791e:	b580      	push	{r7, lr}
 8007920:	b086      	sub	sp, #24
 8007922:	af00      	add	r7, sp, #0
 8007924:	60f8      	str	r0, [r7, #12]
 8007926:	60b9      	str	r1, [r7, #8]
 8007928:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800792a:	2300      	movs	r3, #0
 800792c:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d032      	beq.n	800799a <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007934:	68f8      	ldr	r0, [r7, #12]
 8007936:	f000 f834 	bl	80079a2 <USBD_GetLen>
 800793a:	4603      	mov	r3, r0
 800793c:	3301      	adds	r3, #1
 800793e:	b29b      	uxth	r3, r3
 8007940:	005b      	lsls	r3, r3, #1
 8007942:	b29a      	uxth	r2, r3
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007948:	7dfb      	ldrb	r3, [r7, #23]
 800794a:	1c5a      	adds	r2, r3, #1
 800794c:	75fa      	strb	r2, [r7, #23]
 800794e:	461a      	mov	r2, r3
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	4413      	add	r3, r2
 8007954:	687a      	ldr	r2, [r7, #4]
 8007956:	7812      	ldrb	r2, [r2, #0]
 8007958:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800795a:	7dfb      	ldrb	r3, [r7, #23]
 800795c:	1c5a      	adds	r2, r3, #1
 800795e:	75fa      	strb	r2, [r7, #23]
 8007960:	461a      	mov	r2, r3
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	4413      	add	r3, r2
 8007966:	2203      	movs	r2, #3
 8007968:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800796a:	e012      	b.n	8007992 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	1c5a      	adds	r2, r3, #1
 8007970:	60fa      	str	r2, [r7, #12]
 8007972:	7dfa      	ldrb	r2, [r7, #23]
 8007974:	1c51      	adds	r1, r2, #1
 8007976:	75f9      	strb	r1, [r7, #23]
 8007978:	4611      	mov	r1, r2
 800797a:	68ba      	ldr	r2, [r7, #8]
 800797c:	440a      	add	r2, r1
 800797e:	781b      	ldrb	r3, [r3, #0]
 8007980:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007982:	7dfb      	ldrb	r3, [r7, #23]
 8007984:	1c5a      	adds	r2, r3, #1
 8007986:	75fa      	strb	r2, [r7, #23]
 8007988:	461a      	mov	r2, r3
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	4413      	add	r3, r2
 800798e:	2200      	movs	r2, #0
 8007990:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	781b      	ldrb	r3, [r3, #0]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d1e8      	bne.n	800796c <USBD_GetString+0x4e>
    }
  }
}
 800799a:	bf00      	nop
 800799c:	3718      	adds	r7, #24
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}

080079a2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80079a2:	b480      	push	{r7}
 80079a4:	b085      	sub	sp, #20
 80079a6:	af00      	add	r7, sp, #0
 80079a8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80079aa:	2300      	movs	r3, #0
 80079ac:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80079ae:	e005      	b.n	80079bc <USBD_GetLen+0x1a>
  {
    len++;
 80079b0:	7bfb      	ldrb	r3, [r7, #15]
 80079b2:	3301      	adds	r3, #1
 80079b4:	73fb      	strb	r3, [r7, #15]
    buf++;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	3301      	adds	r3, #1
 80079ba:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d1f5      	bne.n	80079b0 <USBD_GetLen+0xe>
  }

  return len;
 80079c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3714      	adds	r7, #20
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bc80      	pop	{r7}
 80079ce:	4770      	bx	lr

080079d0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b084      	sub	sp, #16
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	60f8      	str	r0, [r7, #12]
 80079d8:	60b9      	str	r1, [r7, #8]
 80079da:	4613      	mov	r3, r2
 80079dc:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	2202      	movs	r2, #2
 80079e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80079e6:	88fa      	ldrh	r2, [r7, #6]
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80079ec:	88fa      	ldrh	r2, [r7, #6]
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80079f2:	88fb      	ldrh	r3, [r7, #6]
 80079f4:	68ba      	ldr	r2, [r7, #8]
 80079f6:	2100      	movs	r1, #0
 80079f8:	68f8      	ldr	r0, [r7, #12]
 80079fa:	f001 f9f1 	bl	8008de0 <USBD_LL_Transmit>

  return USBD_OK;
 80079fe:	2300      	movs	r3, #0
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	3710      	adds	r7, #16
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}

08007a08 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b084      	sub	sp, #16
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	60f8      	str	r0, [r7, #12]
 8007a10:	60b9      	str	r1, [r7, #8]
 8007a12:	4613      	mov	r3, r2
 8007a14:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007a16:	88fb      	ldrh	r3, [r7, #6]
 8007a18:	68ba      	ldr	r2, [r7, #8]
 8007a1a:	2100      	movs	r1, #0
 8007a1c:	68f8      	ldr	r0, [r7, #12]
 8007a1e:	f001 f9df 	bl	8008de0 <USBD_LL_Transmit>

  return USBD_OK;
 8007a22:	2300      	movs	r3, #0
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	3710      	adds	r7, #16
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}

08007a2c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b084      	sub	sp, #16
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	60f8      	str	r0, [r7, #12]
 8007a34:	60b9      	str	r1, [r7, #8]
 8007a36:	4613      	mov	r3, r2
 8007a38:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	2203      	movs	r2, #3
 8007a3e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007a42:	88fa      	ldrh	r2, [r7, #6]
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007a4a:	88fa      	ldrh	r2, [r7, #6]
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007a52:	88fb      	ldrh	r3, [r7, #6]
 8007a54:	68ba      	ldr	r2, [r7, #8]
 8007a56:	2100      	movs	r1, #0
 8007a58:	68f8      	ldr	r0, [r7, #12]
 8007a5a:	f001 f9e4 	bl	8008e26 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007a5e:	2300      	movs	r3, #0
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	3710      	adds	r7, #16
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd80      	pop	{r7, pc}

08007a68 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b084      	sub	sp, #16
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	60f8      	str	r0, [r7, #12]
 8007a70:	60b9      	str	r1, [r7, #8]
 8007a72:	4613      	mov	r3, r2
 8007a74:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007a76:	88fb      	ldrh	r3, [r7, #6]
 8007a78:	68ba      	ldr	r2, [r7, #8]
 8007a7a:	2100      	movs	r1, #0
 8007a7c:	68f8      	ldr	r0, [r7, #12]
 8007a7e:	f001 f9d2 	bl	8008e26 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007a82:	2300      	movs	r3, #0
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3710      	adds	r7, #16
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}

08007a8c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b082      	sub	sp, #8
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2204      	movs	r2, #4
 8007a98:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	2100      	movs	r1, #0
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f001 f99c 	bl	8008de0 <USBD_LL_Transmit>

  return USBD_OK;
 8007aa8:	2300      	movs	r3, #0
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	3708      	adds	r7, #8
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}

08007ab2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007ab2:	b580      	push	{r7, lr}
 8007ab4:	b082      	sub	sp, #8
 8007ab6:	af00      	add	r7, sp, #0
 8007ab8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2205      	movs	r2, #5
 8007abe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	2100      	movs	r1, #0
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f001 f9ac 	bl	8008e26 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007ace:	2300      	movs	r3, #0
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	3708      	adds	r7, #8
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}

08007ad8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b084      	sub	sp, #16
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	4603      	mov	r3, r0
 8007ae0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007ae2:	79fb      	ldrb	r3, [r7, #7]
 8007ae4:	4a08      	ldr	r2, [pc, #32]	; (8007b08 <disk_status+0x30>)
 8007ae6:	009b      	lsls	r3, r3, #2
 8007ae8:	4413      	add	r3, r2
 8007aea:	685b      	ldr	r3, [r3, #4]
 8007aec:	685b      	ldr	r3, [r3, #4]
 8007aee:	79fa      	ldrb	r2, [r7, #7]
 8007af0:	4905      	ldr	r1, [pc, #20]	; (8007b08 <disk_status+0x30>)
 8007af2:	440a      	add	r2, r1
 8007af4:	7a12      	ldrb	r2, [r2, #8]
 8007af6:	4610      	mov	r0, r2
 8007af8:	4798      	blx	r3
 8007afa:	4603      	mov	r3, r0
 8007afc:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007afe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	3710      	adds	r7, #16
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}
 8007b08:	2000022c 	.word	0x2000022c

08007b0c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b084      	sub	sp, #16
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	4603      	mov	r3, r0
 8007b14:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8007b16:	2300      	movs	r3, #0
 8007b18:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8007b1a:	79fb      	ldrb	r3, [r7, #7]
 8007b1c:	4a0d      	ldr	r2, [pc, #52]	; (8007b54 <disk_initialize+0x48>)
 8007b1e:	5cd3      	ldrb	r3, [r2, r3]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d111      	bne.n	8007b48 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8007b24:	79fb      	ldrb	r3, [r7, #7]
 8007b26:	4a0b      	ldr	r2, [pc, #44]	; (8007b54 <disk_initialize+0x48>)
 8007b28:	2101      	movs	r1, #1
 8007b2a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007b2c:	79fb      	ldrb	r3, [r7, #7]
 8007b2e:	4a09      	ldr	r2, [pc, #36]	; (8007b54 <disk_initialize+0x48>)
 8007b30:	009b      	lsls	r3, r3, #2
 8007b32:	4413      	add	r3, r2
 8007b34:	685b      	ldr	r3, [r3, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	79fa      	ldrb	r2, [r7, #7]
 8007b3a:	4906      	ldr	r1, [pc, #24]	; (8007b54 <disk_initialize+0x48>)
 8007b3c:	440a      	add	r2, r1
 8007b3e:	7a12      	ldrb	r2, [r2, #8]
 8007b40:	4610      	mov	r0, r2
 8007b42:	4798      	blx	r3
 8007b44:	4603      	mov	r3, r0
 8007b46:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8007b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	3710      	adds	r7, #16
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}
 8007b52:	bf00      	nop
 8007b54:	2000022c 	.word	0x2000022c

08007b58 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007b58:	b590      	push	{r4, r7, lr}
 8007b5a:	b087      	sub	sp, #28
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	60b9      	str	r1, [r7, #8]
 8007b60:	607a      	str	r2, [r7, #4]
 8007b62:	603b      	str	r3, [r7, #0]
 8007b64:	4603      	mov	r3, r0
 8007b66:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007b68:	7bfb      	ldrb	r3, [r7, #15]
 8007b6a:	4a0a      	ldr	r2, [pc, #40]	; (8007b94 <disk_read+0x3c>)
 8007b6c:	009b      	lsls	r3, r3, #2
 8007b6e:	4413      	add	r3, r2
 8007b70:	685b      	ldr	r3, [r3, #4]
 8007b72:	689c      	ldr	r4, [r3, #8]
 8007b74:	7bfb      	ldrb	r3, [r7, #15]
 8007b76:	4a07      	ldr	r2, [pc, #28]	; (8007b94 <disk_read+0x3c>)
 8007b78:	4413      	add	r3, r2
 8007b7a:	7a18      	ldrb	r0, [r3, #8]
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	687a      	ldr	r2, [r7, #4]
 8007b80:	68b9      	ldr	r1, [r7, #8]
 8007b82:	47a0      	blx	r4
 8007b84:	4603      	mov	r3, r0
 8007b86:	75fb      	strb	r3, [r7, #23]
  return res;
 8007b88:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	371c      	adds	r7, #28
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd90      	pop	{r4, r7, pc}
 8007b92:	bf00      	nop
 8007b94:	2000022c 	.word	0x2000022c

08007b98 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007b98:	b590      	push	{r4, r7, lr}
 8007b9a:	b087      	sub	sp, #28
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	60b9      	str	r1, [r7, #8]
 8007ba0:	607a      	str	r2, [r7, #4]
 8007ba2:	603b      	str	r3, [r7, #0]
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007ba8:	7bfb      	ldrb	r3, [r7, #15]
 8007baa:	4a0a      	ldr	r2, [pc, #40]	; (8007bd4 <disk_write+0x3c>)
 8007bac:	009b      	lsls	r3, r3, #2
 8007bae:	4413      	add	r3, r2
 8007bb0:	685b      	ldr	r3, [r3, #4]
 8007bb2:	68dc      	ldr	r4, [r3, #12]
 8007bb4:	7bfb      	ldrb	r3, [r7, #15]
 8007bb6:	4a07      	ldr	r2, [pc, #28]	; (8007bd4 <disk_write+0x3c>)
 8007bb8:	4413      	add	r3, r2
 8007bba:	7a18      	ldrb	r0, [r3, #8]
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	687a      	ldr	r2, [r7, #4]
 8007bc0:	68b9      	ldr	r1, [r7, #8]
 8007bc2:	47a0      	blx	r4
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	75fb      	strb	r3, [r7, #23]
  return res;
 8007bc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	371c      	adds	r7, #28
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd90      	pop	{r4, r7, pc}
 8007bd2:	bf00      	nop
 8007bd4:	2000022c 	.word	0x2000022c

08007bd8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b084      	sub	sp, #16
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	4603      	mov	r3, r0
 8007be0:	603a      	str	r2, [r7, #0]
 8007be2:	71fb      	strb	r3, [r7, #7]
 8007be4:	460b      	mov	r3, r1
 8007be6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007be8:	79fb      	ldrb	r3, [r7, #7]
 8007bea:	4a09      	ldr	r2, [pc, #36]	; (8007c10 <disk_ioctl+0x38>)
 8007bec:	009b      	lsls	r3, r3, #2
 8007bee:	4413      	add	r3, r2
 8007bf0:	685b      	ldr	r3, [r3, #4]
 8007bf2:	691b      	ldr	r3, [r3, #16]
 8007bf4:	79fa      	ldrb	r2, [r7, #7]
 8007bf6:	4906      	ldr	r1, [pc, #24]	; (8007c10 <disk_ioctl+0x38>)
 8007bf8:	440a      	add	r2, r1
 8007bfa:	7a10      	ldrb	r0, [r2, #8]
 8007bfc:	79b9      	ldrb	r1, [r7, #6]
 8007bfe:	683a      	ldr	r2, [r7, #0]
 8007c00:	4798      	blx	r3
 8007c02:	4603      	mov	r3, r0
 8007c04:	73fb      	strb	r3, [r7, #15]
  return res;
 8007c06:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3710      	adds	r7, #16
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}
 8007c10:	2000022c 	.word	0x2000022c

08007c14 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b085      	sub	sp, #20
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	60fb      	str	r3, [r7, #12]
 8007c20:	e016      	b.n	8007c50 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007c22:	490f      	ldr	r1, [pc, #60]	; (8007c60 <clear_lock+0x4c>)
 8007c24:	68fa      	ldr	r2, [r7, #12]
 8007c26:	4613      	mov	r3, r2
 8007c28:	005b      	lsls	r3, r3, #1
 8007c2a:	4413      	add	r3, r2
 8007c2c:	009b      	lsls	r3, r3, #2
 8007c2e:	440b      	add	r3, r1
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	687a      	ldr	r2, [r7, #4]
 8007c34:	429a      	cmp	r2, r3
 8007c36:	d108      	bne.n	8007c4a <clear_lock+0x36>
 8007c38:	4909      	ldr	r1, [pc, #36]	; (8007c60 <clear_lock+0x4c>)
 8007c3a:	68fa      	ldr	r2, [r7, #12]
 8007c3c:	4613      	mov	r3, r2
 8007c3e:	005b      	lsls	r3, r3, #1
 8007c40:	4413      	add	r3, r2
 8007c42:	009b      	lsls	r3, r3, #2
 8007c44:	440b      	add	r3, r1
 8007c46:	2200      	movs	r2, #0
 8007c48:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	3301      	adds	r3, #1
 8007c4e:	60fb      	str	r3, [r7, #12]
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	2b01      	cmp	r3, #1
 8007c54:	d9e5      	bls.n	8007c22 <clear_lock+0xe>
	}
}
 8007c56:	bf00      	nop
 8007c58:	3714      	adds	r7, #20
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bc80      	pop	{r7}
 8007c5e:	4770      	bx	lr
 8007c60:	20000214 	.word	0x20000214

08007c64 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b086      	sub	sp, #24
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c76:	3304      	adds	r3, #4
 8007c78:	781b      	ldrb	r3, [r3, #0]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d047      	beq.n	8007d0e <sync_window+0xaa>
		wsect = fs->winsect;	/* Current sector number */
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007c84:	330c      	adds	r3, #12
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c90:	3301      	adds	r3, #1
 8007c92:	7818      	ldrb	r0, [r3, #0]
 8007c94:	6879      	ldr	r1, [r7, #4]
 8007c96:	2301      	movs	r3, #1
 8007c98:	697a      	ldr	r2, [r7, #20]
 8007c9a:	f7ff ff7d 	bl	8007b98 <disk_write>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d002      	beq.n	8007caa <sync_window+0x46>
			res = FR_DISK_ERR;
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	73fb      	strb	r3, [r7, #15]
 8007ca8:	e031      	b.n	8007d0e <sync_window+0xaa>
		} else {
			fs->wflag = 0;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cb0:	3304      	adds	r3, #4
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	701a      	strb	r2, [r3, #0]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	697a      	ldr	r2, [r7, #20]
 8007cc0:	1ad2      	subs	r2, r2, r3
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cc8:	3318      	adds	r3, #24
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	429a      	cmp	r2, r3
 8007cce:	d21e      	bcs.n	8007d0e <sync_window+0xaa>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cd6:	3303      	adds	r3, #3
 8007cd8:	781b      	ldrb	r3, [r3, #0]
 8007cda:	613b      	str	r3, [r7, #16]
 8007cdc:	e014      	b.n	8007d08 <sync_window+0xa4>
					wsect += fs->fsize;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ce4:	3318      	adds	r3, #24
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	697a      	ldr	r2, [r7, #20]
 8007cea:	4413      	add	r3, r2
 8007cec:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cf4:	3301      	adds	r3, #1
 8007cf6:	7818      	ldrb	r0, [r3, #0]
 8007cf8:	6879      	ldr	r1, [r7, #4]
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	697a      	ldr	r2, [r7, #20]
 8007cfe:	f7ff ff4b 	bl	8007b98 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	3b01      	subs	r3, #1
 8007d06:	613b      	str	r3, [r7, #16]
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	2b01      	cmp	r3, #1
 8007d0c:	d8e7      	bhi.n	8007cde <sync_window+0x7a>
				}
			}
		}
	}
	return res;
 8007d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	3718      	adds	r7, #24
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}

08007d18 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b084      	sub	sp, #16
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
 8007d20:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007d22:	2300      	movs	r3, #0
 8007d24:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007d2c:	330c      	adds	r3, #12
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	683a      	ldr	r2, [r7, #0]
 8007d32:	429a      	cmp	r2, r3
 8007d34:	d01f      	beq.n	8007d76 <move_window+0x5e>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f7ff ff94 	bl	8007c64 <sync_window>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007d40:	7bfb      	ldrb	r3, [r7, #15]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d117      	bne.n	8007d76 <move_window+0x5e>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d4c:	3301      	adds	r3, #1
 8007d4e:	7818      	ldrb	r0, [r3, #0]
 8007d50:	6879      	ldr	r1, [r7, #4]
 8007d52:	2301      	movs	r3, #1
 8007d54:	683a      	ldr	r2, [r7, #0]
 8007d56:	f7ff feff 	bl	8007b58 <disk_read>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d004      	beq.n	8007d6a <move_window+0x52>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007d60:	f04f 33ff 	mov.w	r3, #4294967295
 8007d64:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007d66:	2301      	movs	r3, #1
 8007d68:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007d70:	330c      	adds	r3, #12
 8007d72:	683a      	ldr	r2, [r7, #0]
 8007d74:	601a      	str	r2, [r3, #0]
		}
	}
	return res;
 8007d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	3710      	adds	r7, #16
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}

08007d80 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b087      	sub	sp, #28
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007d88:	f04f 33ff 	mov.w	r3, #4294967295
 8007d8c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d031      	beq.n	8007dfa <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	617b      	str	r3, [r7, #20]
 8007d9c:	e002      	b.n	8007da4 <get_ldnumber+0x24>
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	3301      	adds	r3, #1
 8007da2:	617b      	str	r3, [r7, #20]
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	781b      	ldrb	r3, [r3, #0]
 8007da8:	2b20      	cmp	r3, #32
 8007daa:	d903      	bls.n	8007db4 <get_ldnumber+0x34>
 8007dac:	697b      	ldr	r3, [r7, #20]
 8007dae:	781b      	ldrb	r3, [r3, #0]
 8007db0:	2b3a      	cmp	r3, #58	; 0x3a
 8007db2:	d1f4      	bne.n	8007d9e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	781b      	ldrb	r3, [r3, #0]
 8007db8:	2b3a      	cmp	r3, #58	; 0x3a
 8007dba:	d11c      	bne.n	8007df6 <get_ldnumber+0x76>
			tp = *path;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	1c5a      	adds	r2, r3, #1
 8007dc6:	60fa      	str	r2, [r7, #12]
 8007dc8:	781b      	ldrb	r3, [r3, #0]
 8007dca:	3b30      	subs	r3, #48	; 0x30
 8007dcc:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	2b09      	cmp	r3, #9
 8007dd2:	d80e      	bhi.n	8007df2 <get_ldnumber+0x72>
 8007dd4:	68fa      	ldr	r2, [r7, #12]
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	429a      	cmp	r2, r3
 8007dda:	d10a      	bne.n	8007df2 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d107      	bne.n	8007df2 <get_ldnumber+0x72>
					vol = (int)i;
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	3301      	adds	r3, #1
 8007dea:	617b      	str	r3, [r7, #20]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	697a      	ldr	r2, [r7, #20]
 8007df0:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	e002      	b.n	8007dfc <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007df6:	2300      	movs	r3, #0
 8007df8:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007dfa:	693b      	ldr	r3, [r7, #16]
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	371c      	adds	r7, #28
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bc80      	pop	{r7}
 8007e04:	4770      	bx	lr
	...

08007e08 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b082      	sub	sp, #8
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
 8007e10:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e18:	3304      	adds	r3, #4
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	701a      	strb	r2, [r3, #0]
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007e24:	330c      	adds	r3, #12
 8007e26:	f04f 32ff 	mov.w	r2, #4294967295
 8007e2a:	601a      	str	r2, [r3, #0]
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8007e2c:	6839      	ldr	r1, [r7, #0]
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f7ff ff72 	bl	8007d18 <move_window>
 8007e34:	4603      	mov	r3, r0
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d001      	beq.n	8007e3e <check_fs+0x36>
		return 3;
 8007e3a:	2303      	movs	r3, #3
 8007e3c:	e04a      	b.n	8007ed4 <check_fs+0xcc>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007e44:	3301      	adds	r3, #1
 8007e46:	781b      	ldrb	r3, [r3, #0]
 8007e48:	021b      	lsls	r3, r3, #8
 8007e4a:	b21a      	sxth	r2, r3
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8007e52:	b21b      	sxth	r3, r3
 8007e54:	4313      	orrs	r3, r2
 8007e56:	b21b      	sxth	r3, r3
 8007e58:	4a20      	ldr	r2, [pc, #128]	; (8007edc <check_fs+0xd4>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d001      	beq.n	8007e62 <check_fs+0x5a>
		return 2;
 8007e5e:	2302      	movs	r3, #2
 8007e60:	e038      	b.n	8007ed4 <check_fs+0xcc>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	3336      	adds	r3, #54	; 0x36
 8007e66:	3303      	adds	r3, #3
 8007e68:	781b      	ldrb	r3, [r3, #0]
 8007e6a:	061a      	lsls	r2, r3, #24
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	3336      	adds	r3, #54	; 0x36
 8007e70:	3302      	adds	r3, #2
 8007e72:	781b      	ldrb	r3, [r3, #0]
 8007e74:	041b      	lsls	r3, r3, #16
 8007e76:	4313      	orrs	r3, r2
 8007e78:	687a      	ldr	r2, [r7, #4]
 8007e7a:	3236      	adds	r2, #54	; 0x36
 8007e7c:	3201      	adds	r2, #1
 8007e7e:	7812      	ldrb	r2, [r2, #0]
 8007e80:	0212      	lsls	r2, r2, #8
 8007e82:	4313      	orrs	r3, r2
 8007e84:	687a      	ldr	r2, [r7, #4]
 8007e86:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8007e8a:	4313      	orrs	r3, r2
 8007e8c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007e90:	4a13      	ldr	r2, [pc, #76]	; (8007ee0 <check_fs+0xd8>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d101      	bne.n	8007e9a <check_fs+0x92>
		return 0;
 8007e96:	2300      	movs	r3, #0
 8007e98:	e01c      	b.n	8007ed4 <check_fs+0xcc>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	3352      	adds	r3, #82	; 0x52
 8007e9e:	3303      	adds	r3, #3
 8007ea0:	781b      	ldrb	r3, [r3, #0]
 8007ea2:	061a      	lsls	r2, r3, #24
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	3352      	adds	r3, #82	; 0x52
 8007ea8:	3302      	adds	r3, #2
 8007eaa:	781b      	ldrb	r3, [r3, #0]
 8007eac:	041b      	lsls	r3, r3, #16
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	687a      	ldr	r2, [r7, #4]
 8007eb2:	3252      	adds	r2, #82	; 0x52
 8007eb4:	3201      	adds	r2, #1
 8007eb6:	7812      	ldrb	r2, [r2, #0]
 8007eb8:	0212      	lsls	r2, r2, #8
 8007eba:	4313      	orrs	r3, r2
 8007ebc:	687a      	ldr	r2, [r7, #4]
 8007ebe:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8007ec2:	4313      	orrs	r3, r2
 8007ec4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007ec8:	4a05      	ldr	r2, [pc, #20]	; (8007ee0 <check_fs+0xd8>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d101      	bne.n	8007ed2 <check_fs+0xca>
		return 0;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	e000      	b.n	8007ed4 <check_fs+0xcc>

	return 1;
 8007ed2:	2301      	movs	r3, #1
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	3708      	adds	r7, #8
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}
 8007edc:	ffffaa55 	.word	0xffffaa55
 8007ee0:	00544146 	.word	0x00544146

08007ee4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b096      	sub	sp, #88	; 0x58
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	60f8      	str	r0, [r7, #12]
 8007eec:	60b9      	str	r1, [r7, #8]
 8007eee:	4613      	mov	r3, r2
 8007ef0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007ef8:	68b8      	ldr	r0, [r7, #8]
 8007efa:	f7ff ff41 	bl	8007d80 <get_ldnumber>
 8007efe:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007f00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	da01      	bge.n	8007f0a <find_volume+0x26>
 8007f06:	230b      	movs	r3, #11
 8007f08:	e33c      	b.n	8008584 <find_volume+0x6a0>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007f0a:	4ab3      	ldr	r2, [pc, #716]	; (80081d8 <find_volume+0x2f4>)
 8007f0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f12:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d101      	bne.n	8007f1e <find_volume+0x3a>
 8007f1a:	230c      	movs	r3, #12
 8007f1c:	e332      	b.n	8008584 <find_volume+0x6a0>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f22:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8007f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f2a:	781b      	ldrb	r3, [r3, #0]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d01d      	beq.n	8007f6c <find_volume+0x88>
		stat = disk_status(fs->drv);
 8007f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f36:	3301      	adds	r3, #1
 8007f38:	781b      	ldrb	r3, [r3, #0]
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	f7ff fdcc 	bl	8007ad8 <disk_status>
 8007f40:	4603      	mov	r3, r0
 8007f42:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007f46:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007f4a:	f003 0301 	and.w	r3, r3, #1
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d10c      	bne.n	8007f6c <find_volume+0x88>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8007f52:	79fb      	ldrb	r3, [r7, #7]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d007      	beq.n	8007f68 <find_volume+0x84>
 8007f58:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007f5c:	f003 0304 	and.w	r3, r3, #4
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d001      	beq.n	8007f68 <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 8007f64:	230a      	movs	r3, #10
 8007f66:	e30d      	b.n	8008584 <find_volume+0x6a0>
			return FR_OK;				/* The file system object is valid */
 8007f68:	2300      	movs	r3, #0
 8007f6a:	e30b      	b.n	8008584 <find_volume+0x6a0>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f72:	2200      	movs	r2, #0
 8007f74:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007f76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f78:	b2da      	uxtb	r2, r3
 8007f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f80:	3301      	adds	r3, #1
 8007f82:	701a      	strb	r2, [r3, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f8a:	3301      	adds	r3, #1
 8007f8c:	781b      	ldrb	r3, [r3, #0]
 8007f8e:	4618      	mov	r0, r3
 8007f90:	f7ff fdbc 	bl	8007b0c <disk_initialize>
 8007f94:	4603      	mov	r3, r0
 8007f96:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8007f9a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007f9e:	f003 0301 	and.w	r3, r3, #1
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d001      	beq.n	8007faa <find_volume+0xc6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007fa6:	2303      	movs	r3, #3
 8007fa8:	e2ec      	b.n	8008584 <find_volume+0x6a0>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8007faa:	79fb      	ldrb	r3, [r7, #7]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d007      	beq.n	8007fc0 <find_volume+0xdc>
 8007fb0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007fb4:	f003 0304 	and.w	r3, r3, #4
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d001      	beq.n	8007fc0 <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 8007fbc:	230a      	movs	r3, #10
 8007fbe:	e2e1      	b.n	8008584 <find_volume+0x6a0>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 8007fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fc6:	3301      	adds	r3, #1
 8007fc8:	7818      	ldrb	r0, [r3, #0]
 8007fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fd0:	330a      	adds	r3, #10
 8007fd2:	461a      	mov	r2, r3
 8007fd4:	2102      	movs	r1, #2
 8007fd6:	f7ff fdff 	bl	8007bd8 <disk_ioctl>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d10f      	bne.n	8008000 <find_volume+0x11c>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 8007fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fe2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fe6:	330a      	adds	r3, #10
 8007fe8:	881b      	ldrh	r3, [r3, #0]
 8007fea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007fee:	d307      	bcc.n	8008000 <find_volume+0x11c>
 8007ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ff2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ff6:	330a      	adds	r3, #10
 8007ff8:	881b      	ldrh	r3, [r3, #0]
 8007ffa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ffe:	d901      	bls.n	8008004 <find_volume+0x120>
 8008000:	2301      	movs	r3, #1
 8008002:	e2bf      	b.n	8008584 <find_volume+0x6a0>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8008004:	2300      	movs	r3, #0
 8008006:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8008008:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800800a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800800c:	f7ff fefc 	bl	8007e08 <check_fs>
 8008010:	4603      	mov	r3, r0
 8008012:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8008016:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800801a:	2b01      	cmp	r3, #1
 800801c:	d155      	bne.n	80080ca <find_volume+0x1e6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800801e:	2300      	movs	r3, #0
 8008020:	643b      	str	r3, [r7, #64]	; 0x40
 8008022:	e029      	b.n	8008078 <find_volume+0x194>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8008024:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008026:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008028:	011b      	lsls	r3, r3, #4
 800802a:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800802e:	4413      	add	r3, r2
 8008030:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8008032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008034:	3304      	adds	r3, #4
 8008036:	781b      	ldrb	r3, [r3, #0]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d012      	beq.n	8008062 <find_volume+0x17e>
 800803c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800803e:	330b      	adds	r3, #11
 8008040:	781b      	ldrb	r3, [r3, #0]
 8008042:	061a      	lsls	r2, r3, #24
 8008044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008046:	330a      	adds	r3, #10
 8008048:	781b      	ldrb	r3, [r3, #0]
 800804a:	041b      	lsls	r3, r3, #16
 800804c:	4313      	orrs	r3, r2
 800804e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008050:	3209      	adds	r2, #9
 8008052:	7812      	ldrb	r2, [r2, #0]
 8008054:	0212      	lsls	r2, r2, #8
 8008056:	4313      	orrs	r3, r2
 8008058:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800805a:	3208      	adds	r2, #8
 800805c:	7812      	ldrb	r2, [r2, #0]
 800805e:	431a      	orrs	r2, r3
 8008060:	e000      	b.n	8008064 <find_volume+0x180>
 8008062:	2200      	movs	r2, #0
 8008064:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008066:	009b      	lsls	r3, r3, #2
 8008068:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800806c:	440b      	add	r3, r1
 800806e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8008072:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008074:	3301      	adds	r3, #1
 8008076:	643b      	str	r3, [r7, #64]	; 0x40
 8008078:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800807a:	2b03      	cmp	r3, #3
 800807c:	d9d2      	bls.n	8008024 <find_volume+0x140>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 800807e:	2300      	movs	r3, #0
 8008080:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8008082:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008084:	2b00      	cmp	r3, #0
 8008086:	d002      	beq.n	800808e <find_volume+0x1aa>
 8008088:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800808a:	3b01      	subs	r3, #1
 800808c:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 800808e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008090:	009b      	lsls	r3, r3, #2
 8008092:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8008096:	4413      	add	r3, r2
 8008098:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800809c:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800809e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d005      	beq.n	80080b0 <find_volume+0x1cc>
 80080a4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80080a6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80080a8:	f7ff feae 	bl	8007e08 <check_fs>
 80080ac:	4603      	mov	r3, r0
 80080ae:	e000      	b.n	80080b2 <find_volume+0x1ce>
 80080b0:	2302      	movs	r3, #2
 80080b2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 80080b6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d005      	beq.n	80080ca <find_volume+0x1e6>
 80080be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080c0:	3301      	adds	r3, #1
 80080c2:	643b      	str	r3, [r7, #64]	; 0x40
 80080c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080c6:	2b03      	cmp	r3, #3
 80080c8:	d9e1      	bls.n	800808e <find_volume+0x1aa>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80080ca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80080ce:	2b03      	cmp	r3, #3
 80080d0:	d101      	bne.n	80080d6 <find_volume+0x1f2>
 80080d2:	2301      	movs	r3, #1
 80080d4:	e256      	b.n	8008584 <find_volume+0x6a0>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 80080d6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d001      	beq.n	80080e2 <find_volume+0x1fe>
 80080de:	230d      	movs	r3, #13
 80080e0:	e250      	b.n	8008584 <find_volume+0x6a0>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80080e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080e4:	7b1b      	ldrb	r3, [r3, #12]
 80080e6:	021b      	lsls	r3, r3, #8
 80080e8:	b21a      	sxth	r2, r3
 80080ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ec:	7adb      	ldrb	r3, [r3, #11]
 80080ee:	b21b      	sxth	r3, r3
 80080f0:	4313      	orrs	r3, r2
 80080f2:	b21b      	sxth	r3, r3
 80080f4:	b29a      	uxth	r2, r3
 80080f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080fc:	330a      	adds	r3, #10
 80080fe:	881b      	ldrh	r3, [r3, #0]
 8008100:	429a      	cmp	r2, r3
 8008102:	d001      	beq.n	8008108 <find_volume+0x224>
		return FR_NO_FILESYSTEM;
 8008104:	230d      	movs	r3, #13
 8008106:	e23d      	b.n	8008584 <find_volume+0x6a0>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8008108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800810a:	7ddb      	ldrb	r3, [r3, #23]
 800810c:	021b      	lsls	r3, r3, #8
 800810e:	b21a      	sxth	r2, r3
 8008110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008112:	7d9b      	ldrb	r3, [r3, #22]
 8008114:	b21b      	sxth	r3, r3
 8008116:	4313      	orrs	r3, r2
 8008118:	b21b      	sxth	r3, r3
 800811a:	b29b      	uxth	r3, r3
 800811c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800811e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008120:	2b00      	cmp	r3, #0
 8008122:	d112      	bne.n	800814a <find_volume+0x266>
 8008124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008126:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800812a:	061a      	lsls	r2, r3, #24
 800812c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800812e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8008132:	041b      	lsls	r3, r3, #16
 8008134:	4313      	orrs	r3, r2
 8008136:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008138:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800813c:	0212      	lsls	r2, r2, #8
 800813e:	4313      	orrs	r3, r2
 8008140:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008142:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8008146:	4313      	orrs	r3, r2
 8008148:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 800814a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800814c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008150:	3318      	adds	r3, #24
 8008152:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008154:	601a      	str	r2, [r3, #0]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8008156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008158:	7c1a      	ldrb	r2, [r3, #16]
 800815a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800815c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008160:	3303      	adds	r3, #3
 8008162:	701a      	strb	r2, [r3, #0]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8008164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008166:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800816a:	3303      	adds	r3, #3
 800816c:	781b      	ldrb	r3, [r3, #0]
 800816e:	2b01      	cmp	r3, #1
 8008170:	d008      	beq.n	8008184 <find_volume+0x2a0>
 8008172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008174:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008178:	3303      	adds	r3, #3
 800817a:	781b      	ldrb	r3, [r3, #0]
 800817c:	2b02      	cmp	r3, #2
 800817e:	d001      	beq.n	8008184 <find_volume+0x2a0>
		return FR_NO_FILESYSTEM;
 8008180:	230d      	movs	r3, #13
 8008182:	e1ff      	b.n	8008584 <find_volume+0x6a0>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8008184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008186:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800818a:	3303      	adds	r3, #3
 800818c:	781b      	ldrb	r3, [r3, #0]
 800818e:	461a      	mov	r2, r3
 8008190:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008192:	fb02 f303 	mul.w	r3, r2, r3
 8008196:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8008198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800819a:	7b5a      	ldrb	r2, [r3, #13]
 800819c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800819e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081a2:	3302      	adds	r3, #2
 80081a4:	701a      	strb	r2, [r3, #0]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 80081a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081ac:	3302      	adds	r3, #2
 80081ae:	781b      	ldrb	r3, [r3, #0]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d00e      	beq.n	80081d2 <find_volume+0x2ee>
 80081b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081ba:	3302      	adds	r3, #2
 80081bc:	781b      	ldrb	r3, [r3, #0]
 80081be:	461a      	mov	r2, r3
 80081c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081c6:	3302      	adds	r3, #2
 80081c8:	781b      	ldrb	r3, [r3, #0]
 80081ca:	3b01      	subs	r3, #1
 80081cc:	4013      	ands	r3, r2
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d004      	beq.n	80081dc <find_volume+0x2f8>
		return FR_NO_FILESYSTEM;
 80081d2:	230d      	movs	r3, #13
 80081d4:	e1d6      	b.n	8008584 <find_volume+0x6a0>
 80081d6:	bf00      	nop
 80081d8:	2000020c 	.word	0x2000020c

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 80081dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081de:	7c9b      	ldrb	r3, [r3, #18]
 80081e0:	021b      	lsls	r3, r3, #8
 80081e2:	b21a      	sxth	r2, r3
 80081e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081e6:	7c5b      	ldrb	r3, [r3, #17]
 80081e8:	b21b      	sxth	r3, r3
 80081ea:	4313      	orrs	r3, r2
 80081ec:	b21b      	sxth	r3, r3
 80081ee:	b29a      	uxth	r2, r3
 80081f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081f6:	3308      	adds	r3, #8
 80081f8:	801a      	strh	r2, [r3, #0]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 80081fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008200:	3308      	adds	r3, #8
 8008202:	881a      	ldrh	r2, [r3, #0]
 8008204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008206:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800820a:	330a      	adds	r3, #10
 800820c:	881b      	ldrh	r3, [r3, #0]
 800820e:	095b      	lsrs	r3, r3, #5
 8008210:	b29b      	uxth	r3, r3
 8008212:	fbb2 f1f3 	udiv	r1, r2, r3
 8008216:	fb03 f301 	mul.w	r3, r3, r1
 800821a:	1ad3      	subs	r3, r2, r3
 800821c:	b29b      	uxth	r3, r3
 800821e:	2b00      	cmp	r3, #0
 8008220:	d001      	beq.n	8008226 <find_volume+0x342>
		return FR_NO_FILESYSTEM;
 8008222:	230d      	movs	r3, #13
 8008224:	e1ae      	b.n	8008584 <find_volume+0x6a0>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8008226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008228:	7d1b      	ldrb	r3, [r3, #20]
 800822a:	021b      	lsls	r3, r3, #8
 800822c:	b21a      	sxth	r2, r3
 800822e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008230:	7cdb      	ldrb	r3, [r3, #19]
 8008232:	b21b      	sxth	r3, r3
 8008234:	4313      	orrs	r3, r2
 8008236:	b21b      	sxth	r3, r3
 8008238:	b29b      	uxth	r3, r3
 800823a:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800823c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800823e:	2b00      	cmp	r3, #0
 8008240:	d112      	bne.n	8008268 <find_volume+0x384>
 8008242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008244:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8008248:	061a      	lsls	r2, r3, #24
 800824a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800824c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8008250:	041b      	lsls	r3, r3, #16
 8008252:	4313      	orrs	r3, r2
 8008254:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008256:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800825a:	0212      	lsls	r2, r2, #8
 800825c:	4313      	orrs	r3, r2
 800825e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008260:	f892 2020 	ldrb.w	r2, [r2, #32]
 8008264:	4313      	orrs	r3, r2
 8008266:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8008268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800826a:	7bdb      	ldrb	r3, [r3, #15]
 800826c:	021b      	lsls	r3, r3, #8
 800826e:	b21a      	sxth	r2, r3
 8008270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008272:	7b9b      	ldrb	r3, [r3, #14]
 8008274:	b21b      	sxth	r3, r3
 8008276:	4313      	orrs	r3, r2
 8008278:	b21b      	sxth	r3, r3
 800827a:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800827c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800827e:	2b00      	cmp	r3, #0
 8008280:	d101      	bne.n	8008286 <find_volume+0x3a2>
 8008282:	230d      	movs	r3, #13
 8008284:	e17e      	b.n	8008584 <find_volume+0x6a0>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8008286:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008288:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800828a:	441a      	add	r2, r3
 800828c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800828e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008292:	3308      	adds	r3, #8
 8008294:	8819      	ldrh	r1, [r3, #0]
 8008296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008298:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800829c:	330a      	adds	r3, #10
 800829e:	881b      	ldrh	r3, [r3, #0]
 80082a0:	095b      	lsrs	r3, r3, #5
 80082a2:	b29b      	uxth	r3, r3
 80082a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80082a8:	b29b      	uxth	r3, r3
 80082aa:	4413      	add	r3, r2
 80082ac:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80082ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80082b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082b2:	429a      	cmp	r2, r3
 80082b4:	d201      	bcs.n	80082ba <find_volume+0x3d6>
 80082b6:	230d      	movs	r3, #13
 80082b8:	e164      	b.n	8008584 <find_volume+0x6a0>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 80082ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80082bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082be:	1ad2      	subs	r2, r2, r3
 80082c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082c6:	3302      	adds	r3, #2
 80082c8:	781b      	ldrb	r3, [r3, #0]
 80082ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80082ce:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 80082d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d101      	bne.n	80082da <find_volume+0x3f6>
 80082d6:	230d      	movs	r3, #13
 80082d8:	e154      	b.n	8008584 <find_volume+0x6a0>
	fmt = FS_FAT12;
 80082da:	2301      	movs	r3, #1
 80082dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 80082e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e2:	f640 72f5 	movw	r2, #4085	; 0xff5
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d902      	bls.n	80082f0 <find_volume+0x40c>
 80082ea:	2302      	movs	r3, #2
 80082ec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 80082f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f2:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d902      	bls.n	8008300 <find_volume+0x41c>
 80082fa:	2303      	movs	r3, #3
 80082fc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8008300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008302:	1c9a      	adds	r2, r3, #2
 8008304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008306:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800830a:	3314      	adds	r3, #20
 800830c:	601a      	str	r2, [r3, #0]
	fs->volbase = bsect;								/* Volume start sector */
 800830e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008310:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008314:	331c      	adds	r3, #28
 8008316:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008318:	601a      	str	r2, [r3, #0]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800831a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800831c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800831e:	441a      	add	r2, r3
 8008320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008322:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8008326:	601a      	str	r2, [r3, #0]
	fs->database = bsect + sysect;						/* Data start sector */
 8008328:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800832a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800832c:	441a      	add	r2, r3
 800832e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008330:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8008334:	3308      	adds	r3, #8
 8008336:	601a      	str	r2, [r3, #0]
	if (fmt == FS_FAT32) {
 8008338:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800833c:	2b03      	cmp	r3, #3
 800833e:	d127      	bne.n	8008390 <find_volume+0x4ac>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8008340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008342:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008346:	3308      	adds	r3, #8
 8008348:	881b      	ldrh	r3, [r3, #0]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d001      	beq.n	8008352 <find_volume+0x46e>
 800834e:	230d      	movs	r3, #13
 8008350:	e118      	b.n	8008584 <find_volume+0x6a0>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8008352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008354:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008358:	061a      	lsls	r2, r3, #24
 800835a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800835c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8008360:	041b      	lsls	r3, r3, #16
 8008362:	4313      	orrs	r3, r2
 8008364:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008366:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800836a:	0212      	lsls	r2, r2, #8
 800836c:	4313      	orrs	r3, r2
 800836e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008370:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8008374:	431a      	orrs	r2, r3
 8008376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008378:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800837c:	3304      	adds	r3, #4
 800837e:	601a      	str	r2, [r3, #0]
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8008380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008382:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008386:	3314      	adds	r3, #20
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	009b      	lsls	r3, r3, #2
 800838c:	647b      	str	r3, [r7, #68]	; 0x44
 800838e:	e030      	b.n	80083f2 <find_volume+0x50e>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8008390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008392:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008396:	3308      	adds	r3, #8
 8008398:	881b      	ldrh	r3, [r3, #0]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d101      	bne.n	80083a2 <find_volume+0x4be>
 800839e:	230d      	movs	r3, #13
 80083a0:	e0f0      	b.n	8008584 <find_volume+0x6a0>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 80083a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083a4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80083a8:	681a      	ldr	r2, [r3, #0]
 80083aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083ac:	441a      	add	r2, r3
 80083ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083b0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80083b4:	3304      	adds	r3, #4
 80083b6:	601a      	str	r2, [r3, #0]
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80083b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80083bc:	2b02      	cmp	r3, #2
 80083be:	d106      	bne.n	80083ce <find_volume+0x4ea>
 80083c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083c6:	3314      	adds	r3, #20
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	005b      	lsls	r3, r3, #1
 80083cc:	e010      	b.n	80083f0 <find_volume+0x50c>
 80083ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083d4:	3314      	adds	r3, #20
 80083d6:	681a      	ldr	r2, [r3, #0]
 80083d8:	4613      	mov	r3, r2
 80083da:	005b      	lsls	r3, r3, #1
 80083dc:	4413      	add	r3, r2
 80083de:	085a      	lsrs	r2, r3, #1
 80083e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083e6:	3314      	adds	r3, #20
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f003 0301 	and.w	r3, r3, #1
 80083ee:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 80083f0:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 80083f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083f8:	3318      	adds	r3, #24
 80083fa:	681a      	ldr	r2, [r3, #0]
 80083fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008402:	330a      	adds	r3, #10
 8008404:	881b      	ldrh	r3, [r3, #0]
 8008406:	4619      	mov	r1, r3
 8008408:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800840a:	440b      	add	r3, r1
 800840c:	1e59      	subs	r1, r3, #1
 800840e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008410:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008414:	330a      	adds	r3, #10
 8008416:	881b      	ldrh	r3, [r3, #0]
 8008418:	fbb1 f3f3 	udiv	r3, r1, r3
 800841c:	429a      	cmp	r2, r3
 800841e:	d201      	bcs.n	8008424 <find_volume+0x540>
		return FR_NO_FILESYSTEM;
 8008420:	230d      	movs	r3, #13
 8008422:	e0af      	b.n	8008584 <find_volume+0x6a0>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8008424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008426:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800842a:	3310      	adds	r3, #16
 800842c:	f04f 32ff 	mov.w	r2, #4294967295
 8008430:	601a      	str	r2, [r3, #0]
 8008432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008434:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008438:	3310      	adds	r3, #16
 800843a:	681a      	ldr	r2, [r3, #0]
 800843c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800843e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008442:	330c      	adds	r3, #12
 8008444:	601a      	str	r2, [r3, #0]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8008446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008448:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800844c:	3305      	adds	r3, #5
 800844e:	2280      	movs	r2, #128	; 0x80
 8008450:	701a      	strb	r2, [r3, #0]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8008452:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008456:	2b03      	cmp	r3, #3
 8008458:	d17d      	bne.n	8008556 <find_volume+0x672>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800845a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800845c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008460:	021b      	lsls	r3, r3, #8
 8008462:	b21a      	sxth	r2, r3
 8008464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008466:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800846a:	b21b      	sxth	r3, r3
 800846c:	4313      	orrs	r3, r2
 800846e:	b21b      	sxth	r3, r3
 8008470:	2b01      	cmp	r3, #1
 8008472:	d170      	bne.n	8008556 <find_volume+0x672>
		&& move_window(fs, bsect + 1) == FR_OK)
 8008474:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008476:	3301      	adds	r3, #1
 8008478:	4619      	mov	r1, r3
 800847a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800847c:	f7ff fc4c 	bl	8007d18 <move_window>
 8008480:	4603      	mov	r3, r0
 8008482:	2b00      	cmp	r3, #0
 8008484:	d167      	bne.n	8008556 <find_volume+0x672>
	{
		fs->fsi_flag = 0;
 8008486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008488:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800848c:	3305      	adds	r3, #5
 800848e:	2200      	movs	r2, #0
 8008490:	701a      	strb	r2, [r3, #0]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008494:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 8008498:	021b      	lsls	r3, r3, #8
 800849a:	b21a      	sxth	r2, r3
 800849c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800849e:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80084a2:	b21b      	sxth	r3, r3
 80084a4:	4313      	orrs	r3, r2
 80084a6:	b21b      	sxth	r3, r3
 80084a8:	4a38      	ldr	r2, [pc, #224]	; (800858c <find_volume+0x6a8>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d153      	bne.n	8008556 <find_volume+0x672>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 80084ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084b0:	78db      	ldrb	r3, [r3, #3]
 80084b2:	061a      	lsls	r2, r3, #24
 80084b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084b6:	789b      	ldrb	r3, [r3, #2]
 80084b8:	041b      	lsls	r3, r3, #16
 80084ba:	4313      	orrs	r3, r2
 80084bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80084be:	7852      	ldrb	r2, [r2, #1]
 80084c0:	0212      	lsls	r2, r2, #8
 80084c2:	4313      	orrs	r3, r2
 80084c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80084c6:	7812      	ldrb	r2, [r2, #0]
 80084c8:	4313      	orrs	r3, r2
 80084ca:	4a31      	ldr	r2, [pc, #196]	; (8008590 <find_volume+0x6ac>)
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d142      	bne.n	8008556 <find_volume+0x672>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 80084d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084d2:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 80084d6:	061a      	lsls	r2, r3, #24
 80084d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084da:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 80084de:	041b      	lsls	r3, r3, #16
 80084e0:	4313      	orrs	r3, r2
 80084e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80084e4:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 80084e8:	0212      	lsls	r2, r2, #8
 80084ea:	4313      	orrs	r3, r2
 80084ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80084ee:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 80084f2:	4313      	orrs	r3, r2
 80084f4:	4a27      	ldr	r2, [pc, #156]	; (8008594 <find_volume+0x6b0>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d12d      	bne.n	8008556 <find_volume+0x672>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 80084fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084fc:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 8008500:	061a      	lsls	r2, r3, #24
 8008502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008504:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 8008508:	041b      	lsls	r3, r3, #16
 800850a:	4313      	orrs	r3, r2
 800850c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800850e:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 8008512:	0212      	lsls	r2, r2, #8
 8008514:	4313      	orrs	r3, r2
 8008516:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008518:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 800851c:	431a      	orrs	r2, r3
 800851e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008520:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008524:	3310      	adds	r3, #16
 8008526:	601a      	str	r2, [r3, #0]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8008528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800852a:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 800852e:	061a      	lsls	r2, r3, #24
 8008530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008532:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 8008536:	041b      	lsls	r3, r3, #16
 8008538:	4313      	orrs	r3, r2
 800853a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800853c:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 8008540:	0212      	lsls	r2, r2, #8
 8008542:	4313      	orrs	r3, r2
 8008544:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008546:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 800854a:	431a      	orrs	r2, r3
 800854c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800854e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008552:	330c      	adds	r3, #12
 8008554:	601a      	str	r2, [r3, #0]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8008556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008558:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800855c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8008560:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 8008562:	4b0d      	ldr	r3, [pc, #52]	; (8008598 <find_volume+0x6b4>)
 8008564:	881b      	ldrh	r3, [r3, #0]
 8008566:	3301      	adds	r3, #1
 8008568:	b29a      	uxth	r2, r3
 800856a:	4b0b      	ldr	r3, [pc, #44]	; (8008598 <find_volume+0x6b4>)
 800856c:	801a      	strh	r2, [r3, #0]
 800856e:	4b0a      	ldr	r3, [pc, #40]	; (8008598 <find_volume+0x6b4>)
 8008570:	881a      	ldrh	r2, [r3, #0]
 8008572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008574:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008578:	3306      	adds	r3, #6
 800857a:	801a      	strh	r2, [r3, #0]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 800857c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800857e:	f7ff fb49 	bl	8007c14 <clear_lock>
#endif

	return FR_OK;
 8008582:	2300      	movs	r3, #0
}
 8008584:	4618      	mov	r0, r3
 8008586:	3758      	adds	r7, #88	; 0x58
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}
 800858c:	ffffaa55 	.word	0xffffaa55
 8008590:	41615252 	.word	0x41615252
 8008594:	61417272 	.word	0x61417272
 8008598:	20000210 	.word	0x20000210

0800859c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b088      	sub	sp, #32
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	60f8      	str	r0, [r7, #12]
 80085a4:	60b9      	str	r1, [r7, #8]
 80085a6:	4613      	mov	r3, r2
 80085a8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 80085ae:	f107 0310 	add.w	r3, r7, #16
 80085b2:	4618      	mov	r0, r3
 80085b4:	f7ff fbe4 	bl	8007d80 <get_ldnumber>
 80085b8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80085ba:	69fb      	ldr	r3, [r7, #28]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	da01      	bge.n	80085c4 <f_mount+0x28>
 80085c0:	230b      	movs	r3, #11
 80085c2:	e02f      	b.n	8008624 <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80085c4:	4a19      	ldr	r2, [pc, #100]	; (800862c <f_mount+0x90>)
 80085c6:	69fb      	ldr	r3, [r7, #28]
 80085c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085cc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80085ce:	69bb      	ldr	r3, [r7, #24]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d007      	beq.n	80085e4 <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 80085d4:	69b8      	ldr	r0, [r7, #24]
 80085d6:	f7ff fb1d 	bl	8007c14 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80085da:	69bb      	ldr	r3, [r7, #24]
 80085dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085e0:	2200      	movs	r2, #0
 80085e2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d004      	beq.n	80085f4 <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085f0:	2200      	movs	r2, #0
 80085f2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80085f4:	68fa      	ldr	r2, [r7, #12]
 80085f6:	490d      	ldr	r1, [pc, #52]	; (800862c <f_mount+0x90>)
 80085f8:	69fb      	ldr	r3, [r7, #28]
 80085fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d002      	beq.n	800860a <f_mount+0x6e>
 8008604:	79fb      	ldrb	r3, [r7, #7]
 8008606:	2b01      	cmp	r3, #1
 8008608:	d001      	beq.n	800860e <f_mount+0x72>
 800860a:	2300      	movs	r3, #0
 800860c:	e00a      	b.n	8008624 <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800860e:	f107 0108 	add.w	r1, r7, #8
 8008612:	f107 030c 	add.w	r3, r7, #12
 8008616:	2200      	movs	r2, #0
 8008618:	4618      	mov	r0, r3
 800861a:	f7ff fc63 	bl	8007ee4 <find_volume>
 800861e:	4603      	mov	r3, r0
 8008620:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008622:	7dfb      	ldrb	r3, [r7, #23]
}
 8008624:	4618      	mov	r0, r3
 8008626:	3720      	adds	r7, #32
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}
 800862c:	2000020c 	.word	0x2000020c

08008630 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008630:	b480      	push	{r7}
 8008632:	b087      	sub	sp, #28
 8008634:	af00      	add	r7, sp, #0
 8008636:	60f8      	str	r0, [r7, #12]
 8008638:	60b9      	str	r1, [r7, #8]
 800863a:	4613      	mov	r3, r2
 800863c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800863e:	2301      	movs	r3, #1
 8008640:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008642:	2300      	movs	r3, #0
 8008644:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8008646:	4b1e      	ldr	r3, [pc, #120]	; (80086c0 <FATFS_LinkDriverEx+0x90>)
 8008648:	7a5b      	ldrb	r3, [r3, #9]
 800864a:	b2db      	uxtb	r3, r3
 800864c:	2b01      	cmp	r3, #1
 800864e:	d831      	bhi.n	80086b4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008650:	4b1b      	ldr	r3, [pc, #108]	; (80086c0 <FATFS_LinkDriverEx+0x90>)
 8008652:	7a5b      	ldrb	r3, [r3, #9]
 8008654:	b2db      	uxtb	r3, r3
 8008656:	461a      	mov	r2, r3
 8008658:	4b19      	ldr	r3, [pc, #100]	; (80086c0 <FATFS_LinkDriverEx+0x90>)
 800865a:	2100      	movs	r1, #0
 800865c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800865e:	4b18      	ldr	r3, [pc, #96]	; (80086c0 <FATFS_LinkDriverEx+0x90>)
 8008660:	7a5b      	ldrb	r3, [r3, #9]
 8008662:	b2db      	uxtb	r3, r3
 8008664:	4a16      	ldr	r2, [pc, #88]	; (80086c0 <FATFS_LinkDriverEx+0x90>)
 8008666:	009b      	lsls	r3, r3, #2
 8008668:	4413      	add	r3, r2
 800866a:	68fa      	ldr	r2, [r7, #12]
 800866c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800866e:	4b14      	ldr	r3, [pc, #80]	; (80086c0 <FATFS_LinkDriverEx+0x90>)
 8008670:	7a5b      	ldrb	r3, [r3, #9]
 8008672:	b2db      	uxtb	r3, r3
 8008674:	461a      	mov	r2, r3
 8008676:	4b12      	ldr	r3, [pc, #72]	; (80086c0 <FATFS_LinkDriverEx+0x90>)
 8008678:	4413      	add	r3, r2
 800867a:	79fa      	ldrb	r2, [r7, #7]
 800867c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800867e:	4b10      	ldr	r3, [pc, #64]	; (80086c0 <FATFS_LinkDriverEx+0x90>)
 8008680:	7a5b      	ldrb	r3, [r3, #9]
 8008682:	b2db      	uxtb	r3, r3
 8008684:	1c5a      	adds	r2, r3, #1
 8008686:	b2d1      	uxtb	r1, r2
 8008688:	4a0d      	ldr	r2, [pc, #52]	; (80086c0 <FATFS_LinkDriverEx+0x90>)
 800868a:	7251      	strb	r1, [r2, #9]
 800868c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800868e:	7dbb      	ldrb	r3, [r7, #22]
 8008690:	3330      	adds	r3, #48	; 0x30
 8008692:	b2da      	uxtb	r2, r3
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	3301      	adds	r3, #1
 800869c:	223a      	movs	r2, #58	; 0x3a
 800869e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	3302      	adds	r3, #2
 80086a4:	222f      	movs	r2, #47	; 0x2f
 80086a6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	3303      	adds	r3, #3
 80086ac:	2200      	movs	r2, #0
 80086ae:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80086b0:	2300      	movs	r3, #0
 80086b2:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 80086b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	371c      	adds	r7, #28
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bc80      	pop	{r7}
 80086be:	4770      	bx	lr
 80086c0:	2000022c 	.word	0x2000022c

080086c4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b082      	sub	sp, #8
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
 80086cc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80086ce:	2200      	movs	r2, #0
 80086d0:	6839      	ldr	r1, [r7, #0]
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f7ff ffac 	bl	8008630 <FATFS_LinkDriverEx>
 80086d8:	4603      	mov	r3, r0
}
 80086da:	4618      	mov	r0, r3
 80086dc:	3708      	adds	r7, #8
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}
	...

080086e4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80086e8:	2200      	movs	r2, #0
 80086ea:	4912      	ldr	r1, [pc, #72]	; (8008734 <MX_USB_DEVICE_Init+0x50>)
 80086ec:	4812      	ldr	r0, [pc, #72]	; (8008738 <MX_USB_DEVICE_Init+0x54>)
 80086ee:	f7fe f93f 	bl	8006970 <USBD_Init>
 80086f2:	4603      	mov	r3, r0
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d001      	beq.n	80086fc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80086f8:	f7f8 f8c8 	bl	800088c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_DFU) != USBD_OK)
 80086fc:	490f      	ldr	r1, [pc, #60]	; (800873c <MX_USB_DEVICE_Init+0x58>)
 80086fe:	480e      	ldr	r0, [pc, #56]	; (8008738 <MX_USB_DEVICE_Init+0x54>)
 8008700:	f7fe f961 	bl	80069c6 <USBD_RegisterClass>
 8008704:	4603      	mov	r3, r0
 8008706:	2b00      	cmp	r3, #0
 8008708:	d001      	beq.n	800870e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800870a:	f7f8 f8bf 	bl	800088c <Error_Handler>
  }
  if (USBD_DFU_RegisterMedia(&hUsbDeviceFS, &USBD_DFU_fops_FS) != USBD_OK)
 800870e:	490c      	ldr	r1, [pc, #48]	; (8008740 <MX_USB_DEVICE_Init+0x5c>)
 8008710:	4809      	ldr	r0, [pc, #36]	; (8008738 <MX_USB_DEVICE_Init+0x54>)
 8008712:	f7fd fdc5 	bl	80062a0 <USBD_DFU_RegisterMedia>
 8008716:	4603      	mov	r3, r0
 8008718:	2b00      	cmp	r3, #0
 800871a:	d001      	beq.n	8008720 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800871c:	f7f8 f8b6 	bl	800088c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008720:	4805      	ldr	r0, [pc, #20]	; (8008738 <MX_USB_DEVICE_Init+0x54>)
 8008722:	f7fe f969 	bl	80069f8 <USBD_Start>
 8008726:	4603      	mov	r3, r0
 8008728:	2b00      	cmp	r3, #0
 800872a:	d001      	beq.n	8008730 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800872c:	f7f8 f8ae 	bl	800088c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008730:	bf00      	nop
 8008732:	bd80      	pop	{r7, pc}
 8008734:	20000084 	.word	0x20000084
 8008738:	2000190c 	.word	0x2000190c
 800873c:	20000020 	.word	0x20000020
 8008740:	200000d4 	.word	0x200000d4

08008744 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008744:	b480      	push	{r7}
 8008746:	b083      	sub	sp, #12
 8008748:	af00      	add	r7, sp, #0
 800874a:	4603      	mov	r3, r0
 800874c:	6039      	str	r1, [r7, #0]
 800874e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	2212      	movs	r2, #18
 8008754:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008756:	4b03      	ldr	r3, [pc, #12]	; (8008764 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008758:	4618      	mov	r0, r3
 800875a:	370c      	adds	r7, #12
 800875c:	46bd      	mov	sp, r7
 800875e:	bc80      	pop	{r7}
 8008760:	4770      	bx	lr
 8008762:	bf00      	nop
 8008764:	200000a0 	.word	0x200000a0

08008768 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008768:	b480      	push	{r7}
 800876a:	b083      	sub	sp, #12
 800876c:	af00      	add	r7, sp, #0
 800876e:	4603      	mov	r3, r0
 8008770:	6039      	str	r1, [r7, #0]
 8008772:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	2204      	movs	r2, #4
 8008778:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800877a:	4b03      	ldr	r3, [pc, #12]	; (8008788 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800877c:	4618      	mov	r0, r3
 800877e:	370c      	adds	r7, #12
 8008780:	46bd      	mov	sp, r7
 8008782:	bc80      	pop	{r7}
 8008784:	4770      	bx	lr
 8008786:	bf00      	nop
 8008788:	200000b4 	.word	0x200000b4

0800878c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b082      	sub	sp, #8
 8008790:	af00      	add	r7, sp, #0
 8008792:	4603      	mov	r3, r0
 8008794:	6039      	str	r1, [r7, #0]
 8008796:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008798:	79fb      	ldrb	r3, [r7, #7]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d105      	bne.n	80087aa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800879e:	683a      	ldr	r2, [r7, #0]
 80087a0:	4907      	ldr	r1, [pc, #28]	; (80087c0 <USBD_FS_ProductStrDescriptor+0x34>)
 80087a2:	4808      	ldr	r0, [pc, #32]	; (80087c4 <USBD_FS_ProductStrDescriptor+0x38>)
 80087a4:	f7ff f8bb 	bl	800791e <USBD_GetString>
 80087a8:	e004      	b.n	80087b4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80087aa:	683a      	ldr	r2, [r7, #0]
 80087ac:	4904      	ldr	r1, [pc, #16]	; (80087c0 <USBD_FS_ProductStrDescriptor+0x34>)
 80087ae:	4805      	ldr	r0, [pc, #20]	; (80087c4 <USBD_FS_ProductStrDescriptor+0x38>)
 80087b0:	f7ff f8b5 	bl	800791e <USBD_GetString>
  }
  return USBD_StrDesc;
 80087b4:	4b02      	ldr	r3, [pc, #8]	; (80087c0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	3708      	adds	r7, #8
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}
 80087be:	bf00      	nop
 80087c0:	20001bd0 	.word	0x20001bd0
 80087c4:	08008f8c 	.word	0x08008f8c

080087c8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b082      	sub	sp, #8
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	4603      	mov	r3, r0
 80087d0:	6039      	str	r1, [r7, #0]
 80087d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80087d4:	683a      	ldr	r2, [r7, #0]
 80087d6:	4904      	ldr	r1, [pc, #16]	; (80087e8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80087d8:	4804      	ldr	r0, [pc, #16]	; (80087ec <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80087da:	f7ff f8a0 	bl	800791e <USBD_GetString>
  return USBD_StrDesc;
 80087de:	4b02      	ldr	r3, [pc, #8]	; (80087e8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	3708      	adds	r7, #8
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}
 80087e8:	20001bd0 	.word	0x20001bd0
 80087ec:	08008fac 	.word	0x08008fac

080087f0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b082      	sub	sp, #8
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	4603      	mov	r3, r0
 80087f8:	6039      	str	r1, [r7, #0]
 80087fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	221a      	movs	r2, #26
 8008800:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008802:	f000 f843 	bl	800888c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008806:	4b02      	ldr	r3, [pc, #8]	; (8008810 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008808:	4618      	mov	r0, r3
 800880a:	3708      	adds	r7, #8
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}
 8008810:	200000b8 	.word	0x200000b8

08008814 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b082      	sub	sp, #8
 8008818:	af00      	add	r7, sp, #0
 800881a:	4603      	mov	r3, r0
 800881c:	6039      	str	r1, [r7, #0]
 800881e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008820:	79fb      	ldrb	r3, [r7, #7]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d105      	bne.n	8008832 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008826:	683a      	ldr	r2, [r7, #0]
 8008828:	4907      	ldr	r1, [pc, #28]	; (8008848 <USBD_FS_ConfigStrDescriptor+0x34>)
 800882a:	4808      	ldr	r0, [pc, #32]	; (800884c <USBD_FS_ConfigStrDescriptor+0x38>)
 800882c:	f7ff f877 	bl	800791e <USBD_GetString>
 8008830:	e004      	b.n	800883c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008832:	683a      	ldr	r2, [r7, #0]
 8008834:	4904      	ldr	r1, [pc, #16]	; (8008848 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008836:	4805      	ldr	r0, [pc, #20]	; (800884c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008838:	f7ff f871 	bl	800791e <USBD_GetString>
  }
  return USBD_StrDesc;
 800883c:	4b02      	ldr	r3, [pc, #8]	; (8008848 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800883e:	4618      	mov	r0, r3
 8008840:	3708      	adds	r7, #8
 8008842:	46bd      	mov	sp, r7
 8008844:	bd80      	pop	{r7, pc}
 8008846:	bf00      	nop
 8008848:	20001bd0 	.word	0x20001bd0
 800884c:	08008fc0 	.word	0x08008fc0

08008850 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b082      	sub	sp, #8
 8008854:	af00      	add	r7, sp, #0
 8008856:	4603      	mov	r3, r0
 8008858:	6039      	str	r1, [r7, #0]
 800885a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800885c:	79fb      	ldrb	r3, [r7, #7]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d105      	bne.n	800886e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008862:	683a      	ldr	r2, [r7, #0]
 8008864:	4907      	ldr	r1, [pc, #28]	; (8008884 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008866:	4808      	ldr	r0, [pc, #32]	; (8008888 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008868:	f7ff f859 	bl	800791e <USBD_GetString>
 800886c:	e004      	b.n	8008878 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800886e:	683a      	ldr	r2, [r7, #0]
 8008870:	4904      	ldr	r1, [pc, #16]	; (8008884 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008872:	4805      	ldr	r0, [pc, #20]	; (8008888 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008874:	f7ff f853 	bl	800791e <USBD_GetString>
  }
  return USBD_StrDesc;
 8008878:	4b02      	ldr	r3, [pc, #8]	; (8008884 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800887a:	4618      	mov	r0, r3
 800887c:	3708      	adds	r7, #8
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}
 8008882:	bf00      	nop
 8008884:	20001bd0 	.word	0x20001bd0
 8008888:	08008fcc 	.word	0x08008fcc

0800888c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b084      	sub	sp, #16
 8008890:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008892:	4b0f      	ldr	r3, [pc, #60]	; (80088d0 <Get_SerialNum+0x44>)
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008898:	4b0e      	ldr	r3, [pc, #56]	; (80088d4 <Get_SerialNum+0x48>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800889e:	4b0e      	ldr	r3, [pc, #56]	; (80088d8 <Get_SerialNum+0x4c>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80088a4:	68fa      	ldr	r2, [r7, #12]
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	4413      	add	r3, r2
 80088aa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d009      	beq.n	80088c6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80088b2:	2208      	movs	r2, #8
 80088b4:	4909      	ldr	r1, [pc, #36]	; (80088dc <Get_SerialNum+0x50>)
 80088b6:	68f8      	ldr	r0, [r7, #12]
 80088b8:	f000 f814 	bl	80088e4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80088bc:	2204      	movs	r2, #4
 80088be:	4908      	ldr	r1, [pc, #32]	; (80088e0 <Get_SerialNum+0x54>)
 80088c0:	68b8      	ldr	r0, [r7, #8]
 80088c2:	f000 f80f 	bl	80088e4 <IntToUnicode>
  }
}
 80088c6:	bf00      	nop
 80088c8:	3710      	adds	r7, #16
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}
 80088ce:	bf00      	nop
 80088d0:	1ffff7e8 	.word	0x1ffff7e8
 80088d4:	1ffff7ec 	.word	0x1ffff7ec
 80088d8:	1ffff7f0 	.word	0x1ffff7f0
 80088dc:	200000ba 	.word	0x200000ba
 80088e0:	200000ca 	.word	0x200000ca

080088e4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80088e4:	b480      	push	{r7}
 80088e6:	b087      	sub	sp, #28
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	60f8      	str	r0, [r7, #12]
 80088ec:	60b9      	str	r1, [r7, #8]
 80088ee:	4613      	mov	r3, r2
 80088f0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80088f2:	2300      	movs	r3, #0
 80088f4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80088f6:	2300      	movs	r3, #0
 80088f8:	75fb      	strb	r3, [r7, #23]
 80088fa:	e027      	b.n	800894c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	0f1b      	lsrs	r3, r3, #28
 8008900:	2b09      	cmp	r3, #9
 8008902:	d80b      	bhi.n	800891c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	0f1b      	lsrs	r3, r3, #28
 8008908:	b2da      	uxtb	r2, r3
 800890a:	7dfb      	ldrb	r3, [r7, #23]
 800890c:	005b      	lsls	r3, r3, #1
 800890e:	4619      	mov	r1, r3
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	440b      	add	r3, r1
 8008914:	3230      	adds	r2, #48	; 0x30
 8008916:	b2d2      	uxtb	r2, r2
 8008918:	701a      	strb	r2, [r3, #0]
 800891a:	e00a      	b.n	8008932 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	0f1b      	lsrs	r3, r3, #28
 8008920:	b2da      	uxtb	r2, r3
 8008922:	7dfb      	ldrb	r3, [r7, #23]
 8008924:	005b      	lsls	r3, r3, #1
 8008926:	4619      	mov	r1, r3
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	440b      	add	r3, r1
 800892c:	3237      	adds	r2, #55	; 0x37
 800892e:	b2d2      	uxtb	r2, r2
 8008930:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	011b      	lsls	r3, r3, #4
 8008936:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008938:	7dfb      	ldrb	r3, [r7, #23]
 800893a:	005b      	lsls	r3, r3, #1
 800893c:	3301      	adds	r3, #1
 800893e:	68ba      	ldr	r2, [r7, #8]
 8008940:	4413      	add	r3, r2
 8008942:	2200      	movs	r2, #0
 8008944:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008946:	7dfb      	ldrb	r3, [r7, #23]
 8008948:	3301      	adds	r3, #1
 800894a:	75fb      	strb	r3, [r7, #23]
 800894c:	7dfa      	ldrb	r2, [r7, #23]
 800894e:	79fb      	ldrb	r3, [r7, #7]
 8008950:	429a      	cmp	r2, r3
 8008952:	d3d3      	bcc.n	80088fc <IntToUnicode+0x18>
  }
}
 8008954:	bf00      	nop
 8008956:	371c      	adds	r7, #28
 8008958:	46bd      	mov	sp, r7
 800895a:	bc80      	pop	{r7}
 800895c:	4770      	bx	lr

0800895e <MEM_If_Init_FS>:
/**
  * @brief  Memory initialization routine.
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Init_FS(void)
{
 800895e:	b480      	push	{r7}
 8008960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 0 */
  return (USBD_OK);
 8008962:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 8008964:	4618      	mov	r0, r3
 8008966:	46bd      	mov	sp, r7
 8008968:	bc80      	pop	{r7}
 800896a:	4770      	bx	lr

0800896c <MEM_If_DeInit_FS>:
/**
  * @brief  De-Initializes Memory
  * @retval USBD_OK if operation is successful, MAL_FAIL else
  */
uint16_t MEM_If_DeInit_FS(void)
{
 800896c:	b480      	push	{r7}
 800896e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  return (USBD_OK);
 8008970:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 8008972:	4618      	mov	r0, r3
 8008974:	46bd      	mov	sp, r7
 8008976:	bc80      	pop	{r7}
 8008978:	4770      	bx	lr

0800897a <MEM_If_Erase_FS>:
  * @brief  Erase sector.
  * @param  Add: Address of sector to be erased.
  * @retval 0 if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Erase_FS(uint32_t Add)
{
 800897a:	b480      	push	{r7}
 800897c:	b083      	sub	sp, #12
 800897e:	af00      	add	r7, sp, #0
 8008980:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 2 */

  return (USBD_OK);
 8008982:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8008984:	4618      	mov	r0, r3
 8008986:	370c      	adds	r7, #12
 8008988:	46bd      	mov	sp, r7
 800898a:	bc80      	pop	{r7}
 800898c:	4770      	bx	lr

0800898e <MEM_If_Write_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be written (in bytes).
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Write_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 800898e:	b480      	push	{r7}
 8008990:	b085      	sub	sp, #20
 8008992:	af00      	add	r7, sp, #0
 8008994:	60f8      	str	r0, [r7, #12]
 8008996:	60b9      	str	r1, [r7, #8]
 8008998:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 3 */
  return (USBD_OK);
 800899a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800899c:	4618      	mov	r0, r3
 800899e:	3714      	adds	r7, #20
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bc80      	pop	{r7}
 80089a4:	4770      	bx	lr

080089a6 <MEM_If_Read_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be read (in bytes).
  * @retval Pointer to the physical address where data should be read.
  */
uint8_t *MEM_If_Read_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 80089a6:	b480      	push	{r7}
 80089a8:	b085      	sub	sp, #20
 80089aa:	af00      	add	r7, sp, #0
 80089ac:	60f8      	str	r0, [r7, #12]
 80089ae:	60b9      	str	r1, [r7, #8]
 80089b0:	607a      	str	r2, [r7, #4]
  /* Return a valid address to avoid HardFault */
  /* USER CODE BEGIN 4 */
  return (uint8_t*)(USBD_OK);
 80089b2:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80089b4:	4618      	mov	r0, r3
 80089b6:	3714      	adds	r7, #20
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bc80      	pop	{r7}
 80089bc:	4770      	bx	lr

080089be <MEM_If_GetStatus_FS>:
  * @param  Cmd: Number of data to be read (in bytes)
  * @param  buffer: used for returning the time necessary for a program or an erase operation
  * @retval USBD_OK if operation is successful
  */
uint16_t MEM_If_GetStatus_FS(uint32_t Add, uint8_t Cmd, uint8_t *buffer)
{
 80089be:	b480      	push	{r7}
 80089c0:	b085      	sub	sp, #20
 80089c2:	af00      	add	r7, sp, #0
 80089c4:	60f8      	str	r0, [r7, #12]
 80089c6:	460b      	mov	r3, r1
 80089c8:	607a      	str	r2, [r7, #4]
 80089ca:	72fb      	strb	r3, [r7, #11]
  /* USER CODE BEGIN 5 */
  switch (Cmd)
 80089cc:	7afb      	ldrb	r3, [r7, #11]
 80089ce:	2b01      	cmp	r3, #1
 80089d0:	d000      	beq.n	80089d4 <MEM_If_GetStatus_FS+0x16>
    break;

    case DFU_MEDIA_ERASE:
    default:

    break;
 80089d2:	e000      	b.n	80089d6 <MEM_If_GetStatus_FS+0x18>
    break;
 80089d4:	bf00      	nop
  }
  return (USBD_OK);
 80089d6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80089d8:	4618      	mov	r0, r3
 80089da:	3714      	adds	r7, #20
 80089dc:	46bd      	mov	sp, r7
 80089de:	bc80      	pop	{r7}
 80089e0:	4770      	bx	lr
	...

080089e4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b084      	sub	sp, #16
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	4a1e      	ldr	r2, [pc, #120]	; (8008a6c <HAL_PCD_MspInit+0x88>)
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d135      	bne.n	8008a62 <HAL_PCD_MspInit+0x7e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80089f6:	4b1e      	ldr	r3, [pc, #120]	; (8008a70 <HAL_PCD_MspInit+0x8c>)
 80089f8:	69db      	ldr	r3, [r3, #28]
 80089fa:	4a1d      	ldr	r2, [pc, #116]	; (8008a70 <HAL_PCD_MspInit+0x8c>)
 80089fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008a00:	61d3      	str	r3, [r2, #28]
 8008a02:	4b1b      	ldr	r3, [pc, #108]	; (8008a70 <HAL_PCD_MspInit+0x8c>)
 8008a04:	69db      	ldr	r3, [r3, #28]
 8008a06:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008a0a:	60fb      	str	r3, [r7, #12]
 8008a0c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008a0e:	2200      	movs	r2, #0
 8008a10:	2100      	movs	r1, #0
 8008a12:	2014      	movs	r0, #20
 8008a14:	f7f9 f843 	bl	8001a9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008a18:	2014      	movs	r0, #20
 8008a1a:	f7f9 f85c 	bl	8001ad6 <HAL_NVIC_EnableIRQ>
    if(pcdHandle->Init.low_power_enable == 1)
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	699b      	ldr	r3, [r3, #24]
 8008a22:	2b01      	cmp	r3, #1
 8008a24:	d11d      	bne.n	8008a62 <HAL_PCD_MspInit+0x7e>
    {
      /* Enable EXTI Line 20 for USB wakeup */
      __HAL_USB_WAKEUP_EXTI_CLEAR_FLAG();
 8008a26:	4b13      	ldr	r3, [pc, #76]	; (8008a74 <HAL_PCD_MspInit+0x90>)
 8008a28:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8008a2c:	615a      	str	r2, [r3, #20]
      __HAL_USB_WAKEUP_EXTI_ENABLE_RISING_EDGE();
 8008a2e:	4b11      	ldr	r3, [pc, #68]	; (8008a74 <HAL_PCD_MspInit+0x90>)
 8008a30:	68db      	ldr	r3, [r3, #12]
 8008a32:	4a10      	ldr	r2, [pc, #64]	; (8008a74 <HAL_PCD_MspInit+0x90>)
 8008a34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008a38:	60d3      	str	r3, [r2, #12]
 8008a3a:	4b0e      	ldr	r3, [pc, #56]	; (8008a74 <HAL_PCD_MspInit+0x90>)
 8008a3c:	689b      	ldr	r3, [r3, #8]
 8008a3e:	4a0d      	ldr	r2, [pc, #52]	; (8008a74 <HAL_PCD_MspInit+0x90>)
 8008a40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008a44:	6093      	str	r3, [r2, #8]
      __HAL_USB_WAKEUP_EXTI_ENABLE_IT();
 8008a46:	4b0b      	ldr	r3, [pc, #44]	; (8008a74 <HAL_PCD_MspInit+0x90>)
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	4a0a      	ldr	r2, [pc, #40]	; (8008a74 <HAL_PCD_MspInit+0x90>)
 8008a4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008a50:	6013      	str	r3, [r2, #0]
      HAL_NVIC_SetPriority(USBWakeUp_IRQn, 0, 0);
 8008a52:	2200      	movs	r2, #0
 8008a54:	2100      	movs	r1, #0
 8008a56:	202a      	movs	r0, #42	; 0x2a
 8008a58:	f7f9 f821 	bl	8001a9e <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(USBWakeUp_IRQn);
 8008a5c:	202a      	movs	r0, #42	; 0x2a
 8008a5e:	f7f9 f83a 	bl	8001ad6 <HAL_NVIC_EnableIRQ>
    }
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008a62:	bf00      	nop
 8008a64:	3710      	adds	r7, #16
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bd80      	pop	{r7, pc}
 8008a6a:	bf00      	nop
 8008a6c:	40005c00 	.word	0x40005c00
 8008a70:	40021000 	.word	0x40021000
 8008a74:	40010400 	.word	0x40010400

08008a78 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b082      	sub	sp, #8
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8008a8c:	4619      	mov	r1, r3
 8008a8e:	4610      	mov	r0, r2
 8008a90:	f7fe f810 	bl	8006ab4 <USBD_LL_SetupStage>
}
 8008a94:	bf00      	nop
 8008a96:	3708      	adds	r7, #8
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}

08008a9c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b082      	sub	sp, #8
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
 8008aa4:	460b      	mov	r3, r1
 8008aa6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8008aae:	78fb      	ldrb	r3, [r7, #3]
 8008ab0:	687a      	ldr	r2, [r7, #4]
 8008ab2:	015b      	lsls	r3, r3, #5
 8008ab4:	4413      	add	r3, r2
 8008ab6:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8008aba:	681a      	ldr	r2, [r3, #0]
 8008abc:	78fb      	ldrb	r3, [r7, #3]
 8008abe:	4619      	mov	r1, r3
 8008ac0:	f7fe f843 	bl	8006b4a <USBD_LL_DataOutStage>
}
 8008ac4:	bf00      	nop
 8008ac6:	3708      	adds	r7, #8
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}

08008acc <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b082      	sub	sp, #8
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
 8008ad4:	460b      	mov	r3, r1
 8008ad6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8008ade:	78fb      	ldrb	r3, [r7, #3]
 8008ae0:	687a      	ldr	r2, [r7, #4]
 8008ae2:	015b      	lsls	r3, r3, #5
 8008ae4:	4413      	add	r3, r2
 8008ae6:	333c      	adds	r3, #60	; 0x3c
 8008ae8:	681a      	ldr	r2, [r3, #0]
 8008aea:	78fb      	ldrb	r3, [r7, #3]
 8008aec:	4619      	mov	r1, r3
 8008aee:	f7fe f89d 	bl	8006c2c <USBD_LL_DataInStage>
}
 8008af2:	bf00      	nop
 8008af4:	3708      	adds	r7, #8
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd80      	pop	{r7, pc}

08008afa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008afa:	b580      	push	{r7, lr}
 8008afc:	b082      	sub	sp, #8
 8008afe:	af00      	add	r7, sp, #0
 8008b00:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8008b08:	4618      	mov	r0, r3
 8008b0a:	f7fe f9ad 	bl	8006e68 <USBD_LL_SOF>
}
 8008b0e:	bf00      	nop
 8008b10:	3708      	adds	r7, #8
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd80      	pop	{r7, pc}

08008b16 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b16:	b580      	push	{r7, lr}
 8008b18:	b084      	sub	sp, #16
 8008b1a:	af00      	add	r7, sp, #0
 8008b1c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008b1e:	2301      	movs	r3, #1
 8008b20:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	689b      	ldr	r3, [r3, #8]
 8008b26:	2b02      	cmp	r3, #2
 8008b28:	d001      	beq.n	8008b2e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008b2a:	f7f7 feaf 	bl	800088c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8008b34:	7bfa      	ldrb	r2, [r7, #15]
 8008b36:	4611      	mov	r1, r2
 8008b38:	4618      	mov	r0, r3
 8008b3a:	f7fe f95d 	bl	8006df8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8008b44:	4618      	mov	r0, r3
 8008b46:	f7fe f916 	bl	8006d76 <USBD_LL_Reset>
}
 8008b4a:	bf00      	nop
 8008b4c:	3710      	adds	r7, #16
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}
	...

08008b54 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b082      	sub	sp, #8
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8008b62:	4618      	mov	r0, r3
 8008b64:	f7fe f957 	bl	8006e16 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	699b      	ldr	r3, [r3, #24]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d005      	beq.n	8008b7c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008b70:	4b04      	ldr	r3, [pc, #16]	; (8008b84 <HAL_PCD_SuspendCallback+0x30>)
 8008b72:	691b      	ldr	r3, [r3, #16]
 8008b74:	4a03      	ldr	r2, [pc, #12]	; (8008b84 <HAL_PCD_SuspendCallback+0x30>)
 8008b76:	f043 0306 	orr.w	r3, r3, #6
 8008b7a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008b7c:	bf00      	nop
 8008b7e:	3708      	adds	r7, #8
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}
 8008b84:	e000ed00 	.word	0xe000ed00

08008b88 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b082      	sub	sp, #8
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8008b96:	4618      	mov	r0, r3
 8008b98:	f7fe f951 	bl	8006e3e <USBD_LL_Resume>
}
 8008b9c:	bf00      	nop
 8008b9e:	3708      	adds	r7, #8
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bd80      	pop	{r7, pc}

08008ba4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b082      	sub	sp, #8
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008bac:	4a1b      	ldr	r2, [pc, #108]	; (8008c1c <USBD_LL_Init+0x78>)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	4a19      	ldr	r2, [pc, #100]	; (8008c1c <USBD_LL_Init+0x78>)
 8008bb8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008bbc:	4b17      	ldr	r3, [pc, #92]	; (8008c1c <USBD_LL_Init+0x78>)
 8008bbe:	4a18      	ldr	r2, [pc, #96]	; (8008c20 <USBD_LL_Init+0x7c>)
 8008bc0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008bc2:	4b16      	ldr	r3, [pc, #88]	; (8008c1c <USBD_LL_Init+0x78>)
 8008bc4:	2208      	movs	r2, #8
 8008bc6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008bc8:	4b14      	ldr	r3, [pc, #80]	; (8008c1c <USBD_LL_Init+0x78>)
 8008bca:	2202      	movs	r2, #2
 8008bcc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = ENABLE;
 8008bce:	4b13      	ldr	r3, [pc, #76]	; (8008c1c <USBD_LL_Init+0x78>)
 8008bd0:	2201      	movs	r2, #1
 8008bd2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008bd4:	4b11      	ldr	r3, [pc, #68]	; (8008c1c <USBD_LL_Init+0x78>)
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008bda:	4b10      	ldr	r3, [pc, #64]	; (8008c1c <USBD_LL_Init+0x78>)
 8008bdc:	2200      	movs	r2, #0
 8008bde:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008be0:	480e      	ldr	r0, [pc, #56]	; (8008c1c <USBD_LL_Init+0x78>)
 8008be2:	f7f9 f927 	bl	8001e34 <HAL_PCD_Init>
 8008be6:	4603      	mov	r3, r0
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d001      	beq.n	8008bf0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008bec:	f7f7 fe4e 	bl	800088c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008bf6:	2318      	movs	r3, #24
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	2100      	movs	r1, #0
 8008bfc:	f7f9 ff9a 	bl	8002b34 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008c06:	2358      	movs	r3, #88	; 0x58
 8008c08:	2200      	movs	r2, #0
 8008c0a:	2180      	movs	r1, #128	; 0x80
 8008c0c:	f7f9 ff92 	bl	8002b34 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  return USBD_OK;
 8008c10:	2300      	movs	r3, #0
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	3708      	adds	r7, #8
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}
 8008c1a:	bf00      	nop
 8008c1c:	20001dd0 	.word	0x20001dd0
 8008c20:	40005c00 	.word	0x40005c00

08008c24 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b084      	sub	sp, #16
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c30:	2300      	movs	r3, #0
 8008c32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f7f9 f9db 	bl	8001ff6 <HAL_PCD_Start>
 8008c40:	4603      	mov	r3, r0
 8008c42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c44:	7bfb      	ldrb	r3, [r7, #15]
 8008c46:	4618      	mov	r0, r3
 8008c48:	f000 f930 	bl	8008eac <USBD_Get_USB_Status>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c50:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c52:	4618      	mov	r0, r3
 8008c54:	3710      	adds	r7, #16
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bd80      	pop	{r7, pc}

08008c5a <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 8008c5a:	b580      	push	{r7, lr}
 8008c5c:	b084      	sub	sp, #16
 8008c5e:	af00      	add	r7, sp, #0
 8008c60:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c62:	2300      	movs	r3, #0
 8008c64:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c66:	2300      	movs	r3, #0
 8008c68:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c70:	4618      	mov	r0, r3
 8008c72:	f7f9 f9e6 	bl	8002042 <HAL_PCD_Stop>
 8008c76:	4603      	mov	r3, r0
 8008c78:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c7a:	7bfb      	ldrb	r3, [r7, #15]
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	f000 f915 	bl	8008eac <USBD_Get_USB_Status>
 8008c82:	4603      	mov	r3, r0
 8008c84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c86:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	3710      	adds	r7, #16
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bd80      	pop	{r7, pc}

08008c90 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b084      	sub	sp, #16
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
 8008c98:	4608      	mov	r0, r1
 8008c9a:	4611      	mov	r1, r2
 8008c9c:	461a      	mov	r2, r3
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	70fb      	strb	r3, [r7, #3]
 8008ca2:	460b      	mov	r3, r1
 8008ca4:	70bb      	strb	r3, [r7, #2]
 8008ca6:	4613      	mov	r3, r2
 8008ca8:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008caa:	2300      	movs	r3, #0
 8008cac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008cb8:	78bb      	ldrb	r3, [r7, #2]
 8008cba:	883a      	ldrh	r2, [r7, #0]
 8008cbc:	78f9      	ldrb	r1, [r7, #3]
 8008cbe:	f7f9 fb23 	bl	8002308 <HAL_PCD_EP_Open>
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cc6:	7bfb      	ldrb	r3, [r7, #15]
 8008cc8:	4618      	mov	r0, r3
 8008cca:	f000 f8ef 	bl	8008eac <USBD_Get_USB_Status>
 8008cce:	4603      	mov	r3, r0
 8008cd0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008cd2:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	3710      	adds	r7, #16
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bd80      	pop	{r7, pc}

08008cdc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b084      	sub	sp, #16
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
 8008ce4:	460b      	mov	r3, r1
 8008ce6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ce8:	2300      	movs	r3, #0
 8008cea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cec:	2300      	movs	r3, #0
 8008cee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008cf6:	78fa      	ldrb	r2, [r7, #3]
 8008cf8:	4611      	mov	r1, r2
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	f7f9 fbd7 	bl	80024ae <HAL_PCD_EP_SetStall>
 8008d00:	4603      	mov	r3, r0
 8008d02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d04:	7bfb      	ldrb	r3, [r7, #15]
 8008d06:	4618      	mov	r0, r3
 8008d08:	f000 f8d0 	bl	8008eac <USBD_Get_USB_Status>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d10:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	3710      	adds	r7, #16
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}

08008d1a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d1a:	b580      	push	{r7, lr}
 8008d1c:	b084      	sub	sp, #16
 8008d1e:	af00      	add	r7, sp, #0
 8008d20:	6078      	str	r0, [r7, #4]
 8008d22:	460b      	mov	r3, r1
 8008d24:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d26:	2300      	movs	r3, #0
 8008d28:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008d34:	78fa      	ldrb	r2, [r7, #3]
 8008d36:	4611      	mov	r1, r2
 8008d38:	4618      	mov	r0, r3
 8008d3a:	f7f9 fc12 	bl	8002562 <HAL_PCD_EP_ClrStall>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d42:	7bfb      	ldrb	r3, [r7, #15]
 8008d44:	4618      	mov	r0, r3
 8008d46:	f000 f8b1 	bl	8008eac <USBD_Get_USB_Status>
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d4e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d50:	4618      	mov	r0, r3
 8008d52:	3710      	adds	r7, #16
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}

08008d58 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d58:	b480      	push	{r7}
 8008d5a:	b085      	sub	sp, #20
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
 8008d60:	460b      	mov	r3, r1
 8008d62:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008d6a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008d6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	da08      	bge.n	8008d86 <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008d74:	78fb      	ldrb	r3, [r7, #3]
 8008d76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d7a:	68fa      	ldr	r2, [r7, #12]
 8008d7c:	015b      	lsls	r3, r3, #5
 8008d7e:	4413      	add	r3, r2
 8008d80:	332a      	adds	r3, #42	; 0x2a
 8008d82:	781b      	ldrb	r3, [r3, #0]
 8008d84:	e008      	b.n	8008d98 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008d86:	78fb      	ldrb	r3, [r7, #3]
 8008d88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d8c:	68fa      	ldr	r2, [r7, #12]
 8008d8e:	015b      	lsls	r3, r3, #5
 8008d90:	4413      	add	r3, r2
 8008d92:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8008d96:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	3714      	adds	r7, #20
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bc80      	pop	{r7}
 8008da0:	4770      	bx	lr

08008da2 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008da2:	b580      	push	{r7, lr}
 8008da4:	b084      	sub	sp, #16
 8008da6:	af00      	add	r7, sp, #0
 8008da8:	6078      	str	r0, [r7, #4]
 8008daa:	460b      	mov	r3, r1
 8008dac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008dae:	2300      	movs	r3, #0
 8008db0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008db2:	2300      	movs	r3, #0
 8008db4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008dbc:	78fa      	ldrb	r2, [r7, #3]
 8008dbe:	4611      	mov	r1, r2
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	f7f9 fa7c 	bl	80022be <HAL_PCD_SetAddress>
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008dca:	7bfb      	ldrb	r3, [r7, #15]
 8008dcc:	4618      	mov	r0, r3
 8008dce:	f000 f86d 	bl	8008eac <USBD_Get_USB_Status>
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008dd6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	3710      	adds	r7, #16
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}

08008de0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b086      	sub	sp, #24
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	60f8      	str	r0, [r7, #12]
 8008de8:	607a      	str	r2, [r7, #4]
 8008dea:	461a      	mov	r2, r3
 8008dec:	460b      	mov	r3, r1
 8008dee:	72fb      	strb	r3, [r7, #11]
 8008df0:	4613      	mov	r3, r2
 8008df2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008df4:	2300      	movs	r3, #0
 8008df6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008df8:	2300      	movs	r3, #0
 8008dfa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008e02:	893b      	ldrh	r3, [r7, #8]
 8008e04:	7af9      	ldrb	r1, [r7, #11]
 8008e06:	687a      	ldr	r2, [r7, #4]
 8008e08:	f7f9 fb18 	bl	800243c <HAL_PCD_EP_Transmit>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e10:	7dfb      	ldrb	r3, [r7, #23]
 8008e12:	4618      	mov	r0, r3
 8008e14:	f000 f84a 	bl	8008eac <USBD_Get_USB_Status>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008e1c:	7dbb      	ldrb	r3, [r7, #22]
}
 8008e1e:	4618      	mov	r0, r3
 8008e20:	3718      	adds	r7, #24
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd80      	pop	{r7, pc}

08008e26 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008e26:	b580      	push	{r7, lr}
 8008e28:	b086      	sub	sp, #24
 8008e2a:	af00      	add	r7, sp, #0
 8008e2c:	60f8      	str	r0, [r7, #12]
 8008e2e:	607a      	str	r2, [r7, #4]
 8008e30:	461a      	mov	r2, r3
 8008e32:	460b      	mov	r3, r1
 8008e34:	72fb      	strb	r3, [r7, #11]
 8008e36:	4613      	mov	r3, r2
 8008e38:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e3e:	2300      	movs	r3, #0
 8008e40:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008e48:	893b      	ldrh	r3, [r7, #8]
 8008e4a:	7af9      	ldrb	r1, [r7, #11]
 8008e4c:	687a      	ldr	r2, [r7, #4]
 8008e4e:	f7f9 fabb 	bl	80023c8 <HAL_PCD_EP_Receive>
 8008e52:	4603      	mov	r3, r0
 8008e54:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e56:	7dfb      	ldrb	r3, [r7, #23]
 8008e58:	4618      	mov	r0, r3
 8008e5a:	f000 f827 	bl	8008eac <USBD_Get_USB_Status>
 8008e5e:	4603      	mov	r3, r0
 8008e60:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008e62:	7dbb      	ldrb	r3, [r7, #22]
}
 8008e64:	4618      	mov	r0, r3
 8008e66:	3718      	adds	r7, #24
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bd80      	pop	{r7, pc}

08008e6c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b083      	sub	sp, #12
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_DFU_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008e74:	4b02      	ldr	r3, [pc, #8]	; (8008e80 <USBD_static_malloc+0x14>)
}
 8008e76:	4618      	mov	r0, r3
 8008e78:	370c      	adds	r7, #12
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bc80      	pop	{r7}
 8008e7e:	4770      	bx	lr
 8008e80:	20000238 	.word	0x20000238

08008e84 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008e84:	b480      	push	{r7}
 8008e86:	b083      	sub	sp, #12
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]

}
 8008e8c:	bf00      	nop
 8008e8e:	370c      	adds	r7, #12
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bc80      	pop	{r7}
 8008e94:	4770      	bx	lr

08008e96 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e96:	b480      	push	{r7}
 8008e98:	b083      	sub	sp, #12
 8008e9a:	af00      	add	r7, sp, #0
 8008e9c:	6078      	str	r0, [r7, #4]
 8008e9e:	460b      	mov	r3, r1
 8008ea0:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008ea2:	bf00      	nop
 8008ea4:	370c      	adds	r7, #12
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bc80      	pop	{r7}
 8008eaa:	4770      	bx	lr

08008eac <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008eac:	b480      	push	{r7}
 8008eae:	b085      	sub	sp, #20
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008eba:	79fb      	ldrb	r3, [r7, #7]
 8008ebc:	2b03      	cmp	r3, #3
 8008ebe:	d817      	bhi.n	8008ef0 <USBD_Get_USB_Status+0x44>
 8008ec0:	a201      	add	r2, pc, #4	; (adr r2, 8008ec8 <USBD_Get_USB_Status+0x1c>)
 8008ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ec6:	bf00      	nop
 8008ec8:	08008ed9 	.word	0x08008ed9
 8008ecc:	08008edf 	.word	0x08008edf
 8008ed0:	08008ee5 	.word	0x08008ee5
 8008ed4:	08008eeb 	.word	0x08008eeb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	73fb      	strb	r3, [r7, #15]
    break;
 8008edc:	e00b      	b.n	8008ef6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008ede:	2302      	movs	r3, #2
 8008ee0:	73fb      	strb	r3, [r7, #15]
    break;
 8008ee2:	e008      	b.n	8008ef6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	73fb      	strb	r3, [r7, #15]
    break;
 8008ee8:	e005      	b.n	8008ef6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008eea:	2302      	movs	r3, #2
 8008eec:	73fb      	strb	r3, [r7, #15]
    break;
 8008eee:	e002      	b.n	8008ef6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008ef0:	2302      	movs	r3, #2
 8008ef2:	73fb      	strb	r3, [r7, #15]
    break;
 8008ef4:	bf00      	nop
  }
  return usb_status;
 8008ef6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ef8:	4618      	mov	r0, r3
 8008efa:	3714      	adds	r7, #20
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bc80      	pop	{r7}
 8008f00:	4770      	bx	lr
 8008f02:	bf00      	nop

08008f04 <__libc_init_array>:
 8008f04:	b570      	push	{r4, r5, r6, lr}
 8008f06:	2500      	movs	r5, #0
 8008f08:	4e0c      	ldr	r6, [pc, #48]	; (8008f3c <__libc_init_array+0x38>)
 8008f0a:	4c0d      	ldr	r4, [pc, #52]	; (8008f40 <__libc_init_array+0x3c>)
 8008f0c:	1ba4      	subs	r4, r4, r6
 8008f0e:	10a4      	asrs	r4, r4, #2
 8008f10:	42a5      	cmp	r5, r4
 8008f12:	d109      	bne.n	8008f28 <__libc_init_array+0x24>
 8008f14:	f000 f822 	bl	8008f5c <_init>
 8008f18:	2500      	movs	r5, #0
 8008f1a:	4e0a      	ldr	r6, [pc, #40]	; (8008f44 <__libc_init_array+0x40>)
 8008f1c:	4c0a      	ldr	r4, [pc, #40]	; (8008f48 <__libc_init_array+0x44>)
 8008f1e:	1ba4      	subs	r4, r4, r6
 8008f20:	10a4      	asrs	r4, r4, #2
 8008f22:	42a5      	cmp	r5, r4
 8008f24:	d105      	bne.n	8008f32 <__libc_init_array+0x2e>
 8008f26:	bd70      	pop	{r4, r5, r6, pc}
 8008f28:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008f2c:	4798      	blx	r3
 8008f2e:	3501      	adds	r5, #1
 8008f30:	e7ee      	b.n	8008f10 <__libc_init_array+0xc>
 8008f32:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008f36:	4798      	blx	r3
 8008f38:	3501      	adds	r5, #1
 8008f3a:	e7f2      	b.n	8008f22 <__libc_init_array+0x1e>
 8008f3c:	08009054 	.word	0x08009054
 8008f40:	08009054 	.word	0x08009054
 8008f44:	08009054 	.word	0x08009054
 8008f48:	08009058 	.word	0x08009058

08008f4c <memset>:
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	4402      	add	r2, r0
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d100      	bne.n	8008f56 <memset+0xa>
 8008f54:	4770      	bx	lr
 8008f56:	f803 1b01 	strb.w	r1, [r3], #1
 8008f5a:	e7f9      	b.n	8008f50 <memset+0x4>

08008f5c <_init>:
 8008f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f5e:	bf00      	nop
 8008f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f62:	bc08      	pop	{r3}
 8008f64:	469e      	mov	lr, r3
 8008f66:	4770      	bx	lr

08008f68 <_fini>:
 8008f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f6a:	bf00      	nop
 8008f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f6e:	bc08      	pop	{r3}
 8008f70:	469e      	mov	lr, r3
 8008f72:	4770      	bx	lr
