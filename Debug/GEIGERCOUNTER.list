
GEIGERCOUNTER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007688  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08007794  08007794  00017794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007870  08007870  000200f0  2**0
                  CONTENTS
  4 .ARM          00000000  08007870  08007870  000200f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007870  08007870  000200f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007870  08007870  00017870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007874  08007874  00017874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f0  20000000  08007878  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f04  200000f0  08007968  000200f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001ff4  08007968  00021ff4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a787  00000000  00000000  00020119  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003a76  00000000  00000000  0003a8a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015c0  00000000  00000000  0003e318  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013e8  00000000  00000000  0003f8d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017c9e  00000000  00000000  00040cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014333  00000000  00000000  0005895e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007e308  00000000  00000000  0006cc91  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000eaf99  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005978  00000000  00000000  000eb014  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000f0 	.word	0x200000f0
 8000128:	00000000 	.word	0x00000000
 800012c:	0800777c 	.word	0x0800777c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000f4 	.word	0x200000f4
 8000148:	0800777c 	.word	0x0800777c

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fec6 	bl	8000ee0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f838 	bl	80001c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 fad2 	bl	8000700 <MX_GPIO_Init>
  MX_ADC1_Init();
 800015c:	f000 f892 	bl	8000284 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000160:	f000 f8ce 	bl	8000300 <MX_ADC2_Init>
  MX_TIM1_Init();
 8000164:	f000 f978 	bl	8000458 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000168:	f000 f9c8 	bl	80004fc <MX_TIM2_Init>
  MX_TIM3_Init();
 800016c:	f000 fa52 	bl	8000614 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 8000170:	f006 fec8 	bl	8006f04 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 8000174:	f000 f902 	bl	800037c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000178:	f000 fa98 	bl	80006ac <MX_USART1_UART_Init>
  MX_SPI2_Init();
 800017c:	f000 f936 	bl	80003ec <MX_SPI2_Init>
  MX_FATFS_Init();
 8000180:	f004 fef2 	bl	8004f68 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8000184:	480c      	ldr	r0, [pc, #48]	; (80001b8 <main+0x6c>)
 8000186:	f003 f80d 	bl	80031a4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 800018a:	480c      	ldr	r0, [pc, #48]	; (80001bc <main+0x70>)
 800018c:	f003 f80a 	bl	80031a4 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if(millis() - current_millis > 1000){
 8000190:	f000 fe76 	bl	8000e80 <millis>
 8000194:	4602      	mov	r2, r0
 8000196:	4b0a      	ldr	r3, [pc, #40]	; (80001c0 <main+0x74>)
 8000198:	681b      	ldr	r3, [r3, #0]
 800019a:	1ad3      	subs	r3, r2, r3
 800019c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80001a0:	d9f6      	bls.n	8000190 <main+0x44>
		current_millis = millis();
 80001a2:	f000 fe6d 	bl	8000e80 <millis>
 80001a6:	4602      	mov	r2, r0
 80001a8:	4b05      	ldr	r3, [pc, #20]	; (80001c0 <main+0x74>)
 80001aa:	601a      	str	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80001ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001b0:	4804      	ldr	r0, [pc, #16]	; (80001c4 <main+0x78>)
 80001b2:	f001 fba3 	bl	80018fc <HAL_GPIO_TogglePin>
	if(millis() - current_millis > 1000){
 80001b6:	e7eb      	b.n	8000190 <main+0x44>
 80001b8:	20000770 	.word	0x20000770
 80001bc:	200006c0 	.word	0x200006c0
 80001c0:	20000848 	.word	0x20000848
 80001c4:	40011000 	.word	0x40011000

080001c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b094      	sub	sp, #80	; 0x50
 80001cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001d2:	2228      	movs	r2, #40	; 0x28
 80001d4:	2100      	movs	r1, #0
 80001d6:	4618      	mov	r0, r3
 80001d8:	f007 fac8 	bl	800776c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001dc:	f107 0314 	add.w	r3, r7, #20
 80001e0:	2200      	movs	r2, #0
 80001e2:	601a      	str	r2, [r3, #0]
 80001e4:	605a      	str	r2, [r3, #4]
 80001e6:	609a      	str	r2, [r3, #8]
 80001e8:	60da      	str	r2, [r3, #12]
 80001ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001ec:	1d3b      	adds	r3, r7, #4
 80001ee:	2200      	movs	r2, #0
 80001f0:	601a      	str	r2, [r3, #0]
 80001f2:	605a      	str	r2, [r3, #4]
 80001f4:	609a      	str	r2, [r3, #8]
 80001f6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001f8:	2301      	movs	r3, #1
 80001fa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000200:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000202:	2300      	movs	r3, #0
 8000204:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000206:	2301      	movs	r3, #1
 8000208:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800020a:	2302      	movs	r3, #2
 800020c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800020e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000212:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000214:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000218:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800021a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800021e:	4618      	mov	r0, r3
 8000220:	f002 fa62 	bl	80026e8 <HAL_RCC_OscConfig>
 8000224:	4603      	mov	r3, r0
 8000226:	2b00      	cmp	r3, #0
 8000228:	d001      	beq.n	800022e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800022a:	f000 fb25 	bl	8000878 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800022e:	230f      	movs	r3, #15
 8000230:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000232:	2302      	movs	r3, #2
 8000234:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000236:	2300      	movs	r3, #0
 8000238:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800023a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800023e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000240:	2300      	movs	r3, #0
 8000242:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000244:	f107 0314 	add.w	r3, r7, #20
 8000248:	2102      	movs	r1, #2
 800024a:	4618      	mov	r0, r3
 800024c:	f002 fccc 	bl	8002be8 <HAL_RCC_ClockConfig>
 8000250:	4603      	mov	r3, r0
 8000252:	2b00      	cmp	r3, #0
 8000254:	d001      	beq.n	800025a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000256:	f000 fb0f 	bl	8000878 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 800025a:	2312      	movs	r3, #18
 800025c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800025e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000262:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000264:	2300      	movs	r3, #0
 8000266:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000268:	1d3b      	adds	r3, r7, #4
 800026a:	4618      	mov	r0, r3
 800026c:	f002 fe58 	bl	8002f20 <HAL_RCCEx_PeriphCLKConfig>
 8000270:	4603      	mov	r3, r0
 8000272:	2b00      	cmp	r3, #0
 8000274:	d001      	beq.n	800027a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000276:	f000 faff 	bl	8000878 <Error_Handler>
  }
}
 800027a:	bf00      	nop
 800027c:	3750      	adds	r7, #80	; 0x50
 800027e:	46bd      	mov	sp, r7
 8000280:	bd80      	pop	{r7, pc}
	...

08000284 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b084      	sub	sp, #16
 8000288:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800028a:	1d3b      	adds	r3, r7, #4
 800028c:	2200      	movs	r2, #0
 800028e:	601a      	str	r2, [r3, #0]
 8000290:	605a      	str	r2, [r3, #4]
 8000292:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000294:	4b18      	ldr	r3, [pc, #96]	; (80002f8 <MX_ADC1_Init+0x74>)
 8000296:	4a19      	ldr	r2, [pc, #100]	; (80002fc <MX_ADC1_Init+0x78>)
 8000298:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800029a:	4b17      	ldr	r3, [pc, #92]	; (80002f8 <MX_ADC1_Init+0x74>)
 800029c:	2200      	movs	r2, #0
 800029e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80002a0:	4b15      	ldr	r3, [pc, #84]	; (80002f8 <MX_ADC1_Init+0x74>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002a6:	4b14      	ldr	r3, [pc, #80]	; (80002f8 <MX_ADC1_Init+0x74>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002ac:	4b12      	ldr	r3, [pc, #72]	; (80002f8 <MX_ADC1_Init+0x74>)
 80002ae:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80002b2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002b4:	4b10      	ldr	r3, [pc, #64]	; (80002f8 <MX_ADC1_Init+0x74>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80002ba:	4b0f      	ldr	r3, [pc, #60]	; (80002f8 <MX_ADC1_Init+0x74>)
 80002bc:	2201      	movs	r2, #1
 80002be:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002c0:	480d      	ldr	r0, [pc, #52]	; (80002f8 <MX_ADC1_Init+0x74>)
 80002c2:	f000 fe91 	bl	8000fe8 <HAL_ADC_Init>
 80002c6:	4603      	mov	r3, r0
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d001      	beq.n	80002d0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80002cc:	f000 fad4 	bl	8000878 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80002d0:	2300      	movs	r3, #0
 80002d2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002d4:	2301      	movs	r3, #1
 80002d6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80002d8:	2300      	movs	r3, #0
 80002da:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002dc:	1d3b      	adds	r3, r7, #4
 80002de:	4619      	mov	r1, r3
 80002e0:	4805      	ldr	r0, [pc, #20]	; (80002f8 <MX_ADC1_Init+0x74>)
 80002e2:	f000 ff59 	bl	8001198 <HAL_ADC_ConfigChannel>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d001      	beq.n	80002f0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80002ec:	f000 fac4 	bl	8000878 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002f0:	bf00      	nop
 80002f2:	3710      	adds	r7, #16
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bd80      	pop	{r7, pc}
 80002f8:	20000700 	.word	0x20000700
 80002fc:	40012400 	.word	0x40012400

08000300 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b084      	sub	sp, #16
 8000304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000306:	1d3b      	adds	r3, r7, #4
 8000308:	2200      	movs	r2, #0
 800030a:	601a      	str	r2, [r3, #0]
 800030c:	605a      	str	r2, [r3, #4]
 800030e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8000310:	4b18      	ldr	r3, [pc, #96]	; (8000374 <MX_ADC2_Init+0x74>)
 8000312:	4a19      	ldr	r2, [pc, #100]	; (8000378 <MX_ADC2_Init+0x78>)
 8000314:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000316:	4b17      	ldr	r3, [pc, #92]	; (8000374 <MX_ADC2_Init+0x74>)
 8000318:	2200      	movs	r2, #0
 800031a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800031c:	4b15      	ldr	r3, [pc, #84]	; (8000374 <MX_ADC2_Init+0x74>)
 800031e:	2200      	movs	r2, #0
 8000320:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000322:	4b14      	ldr	r3, [pc, #80]	; (8000374 <MX_ADC2_Init+0x74>)
 8000324:	2200      	movs	r2, #0
 8000326:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000328:	4b12      	ldr	r3, [pc, #72]	; (8000374 <MX_ADC2_Init+0x74>)
 800032a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800032e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000330:	4b10      	ldr	r3, [pc, #64]	; (8000374 <MX_ADC2_Init+0x74>)
 8000332:	2200      	movs	r2, #0
 8000334:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8000336:	4b0f      	ldr	r3, [pc, #60]	; (8000374 <MX_ADC2_Init+0x74>)
 8000338:	2201      	movs	r2, #1
 800033a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800033c:	480d      	ldr	r0, [pc, #52]	; (8000374 <MX_ADC2_Init+0x74>)
 800033e:	f000 fe53 	bl	8000fe8 <HAL_ADC_Init>
 8000342:	4603      	mov	r3, r0
 8000344:	2b00      	cmp	r3, #0
 8000346:	d001      	beq.n	800034c <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000348:	f000 fa96 	bl	8000878 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800034c:	2309      	movs	r3, #9
 800034e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000350:	2301      	movs	r3, #1
 8000352:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000354:	2300      	movs	r3, #0
 8000356:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000358:	1d3b      	adds	r3, r7, #4
 800035a:	4619      	mov	r1, r3
 800035c:	4805      	ldr	r0, [pc, #20]	; (8000374 <MX_ADC2_Init+0x74>)
 800035e:	f000 ff1b 	bl	8001198 <HAL_ADC_ConfigChannel>
 8000362:	4603      	mov	r3, r0
 8000364:	2b00      	cmp	r3, #0
 8000366:	d001      	beq.n	800036c <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8000368:	f000 fa86 	bl	8000878 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800036c:	bf00      	nop
 800036e:	3710      	adds	r7, #16
 8000370:	46bd      	mov	sp, r7
 8000372:	bd80      	pop	{r7, pc}
 8000374:	20000690 	.word	0x20000690
 8000378:	40012800 	.word	0x40012800

0800037c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000380:	4b18      	ldr	r3, [pc, #96]	; (80003e4 <MX_SPI1_Init+0x68>)
 8000382:	4a19      	ldr	r2, [pc, #100]	; (80003e8 <MX_SPI1_Init+0x6c>)
 8000384:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000386:	4b17      	ldr	r3, [pc, #92]	; (80003e4 <MX_SPI1_Init+0x68>)
 8000388:	f44f 7282 	mov.w	r2, #260	; 0x104
 800038c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800038e:	4b15      	ldr	r3, [pc, #84]	; (80003e4 <MX_SPI1_Init+0x68>)
 8000390:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000394:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000396:	4b13      	ldr	r3, [pc, #76]	; (80003e4 <MX_SPI1_Init+0x68>)
 8000398:	2200      	movs	r2, #0
 800039a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800039c:	4b11      	ldr	r3, [pc, #68]	; (80003e4 <MX_SPI1_Init+0x68>)
 800039e:	2200      	movs	r2, #0
 80003a0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003a2:	4b10      	ldr	r3, [pc, #64]	; (80003e4 <MX_SPI1_Init+0x68>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80003a8:	4b0e      	ldr	r3, [pc, #56]	; (80003e4 <MX_SPI1_Init+0x68>)
 80003aa:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80003ae:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80003b0:	4b0c      	ldr	r3, [pc, #48]	; (80003e4 <MX_SPI1_Init+0x68>)
 80003b2:	2208      	movs	r2, #8
 80003b4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003b6:	4b0b      	ldr	r3, [pc, #44]	; (80003e4 <MX_SPI1_Init+0x68>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80003bc:	4b09      	ldr	r3, [pc, #36]	; (80003e4 <MX_SPI1_Init+0x68>)
 80003be:	2200      	movs	r2, #0
 80003c0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003c2:	4b08      	ldr	r3, [pc, #32]	; (80003e4 <MX_SPI1_Init+0x68>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80003c8:	4b06      	ldr	r3, [pc, #24]	; (80003e4 <MX_SPI1_Init+0x68>)
 80003ca:	220a      	movs	r2, #10
 80003cc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80003ce:	4805      	ldr	r0, [pc, #20]	; (80003e4 <MX_SPI1_Init+0x68>)
 80003d0:	f002 fe5c 	bl	800308c <HAL_SPI_Init>
 80003d4:	4603      	mov	r3, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d001      	beq.n	80003de <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80003da:	f000 fa4d 	bl	8000878 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80003de:	bf00      	nop
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	200007b0 	.word	0x200007b0
 80003e8:	40013000 	.word	0x40013000

080003ec <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80003f0:	4b17      	ldr	r3, [pc, #92]	; (8000450 <MX_SPI2_Init+0x64>)
 80003f2:	4a18      	ldr	r2, [pc, #96]	; (8000454 <MX_SPI2_Init+0x68>)
 80003f4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80003f6:	4b16      	ldr	r3, [pc, #88]	; (8000450 <MX_SPI2_Init+0x64>)
 80003f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80003fc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80003fe:	4b14      	ldr	r3, [pc, #80]	; (8000450 <MX_SPI2_Init+0x64>)
 8000400:	2200      	movs	r2, #0
 8000402:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000404:	4b12      	ldr	r3, [pc, #72]	; (8000450 <MX_SPI2_Init+0x64>)
 8000406:	2200      	movs	r2, #0
 8000408:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800040a:	4b11      	ldr	r3, [pc, #68]	; (8000450 <MX_SPI2_Init+0x64>)
 800040c:	2200      	movs	r2, #0
 800040e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000410:	4b0f      	ldr	r3, [pc, #60]	; (8000450 <MX_SPI2_Init+0x64>)
 8000412:	2200      	movs	r2, #0
 8000414:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000416:	4b0e      	ldr	r3, [pc, #56]	; (8000450 <MX_SPI2_Init+0x64>)
 8000418:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800041c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800041e:	4b0c      	ldr	r3, [pc, #48]	; (8000450 <MX_SPI2_Init+0x64>)
 8000420:	2208      	movs	r2, #8
 8000422:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000424:	4b0a      	ldr	r3, [pc, #40]	; (8000450 <MX_SPI2_Init+0x64>)
 8000426:	2200      	movs	r2, #0
 8000428:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800042a:	4b09      	ldr	r3, [pc, #36]	; (8000450 <MX_SPI2_Init+0x64>)
 800042c:	2200      	movs	r2, #0
 800042e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000430:	4b07      	ldr	r3, [pc, #28]	; (8000450 <MX_SPI2_Init+0x64>)
 8000432:	2200      	movs	r2, #0
 8000434:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000436:	4b06      	ldr	r3, [pc, #24]	; (8000450 <MX_SPI2_Init+0x64>)
 8000438:	220a      	movs	r2, #10
 800043a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800043c:	4804      	ldr	r0, [pc, #16]	; (8000450 <MX_SPI2_Init+0x64>)
 800043e:	f002 fe25 	bl	800308c <HAL_SPI_Init>
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	d001      	beq.n	800044c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000448:	f000 fa16 	bl	8000878 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800044c:	bf00      	nop
 800044e:	bd80      	pop	{r7, pc}
 8000450:	20000638 	.word	0x20000638
 8000454:	40003800 	.word	0x40003800

08000458 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b086      	sub	sp, #24
 800045c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800045e:	f107 0308 	add.w	r3, r7, #8
 8000462:	2200      	movs	r2, #0
 8000464:	601a      	str	r2, [r3, #0]
 8000466:	605a      	str	r2, [r3, #4]
 8000468:	609a      	str	r2, [r3, #8]
 800046a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800046c:	463b      	mov	r3, r7
 800046e:	2200      	movs	r2, #0
 8000470:	601a      	str	r2, [r3, #0]
 8000472:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000474:	4b1f      	ldr	r3, [pc, #124]	; (80004f4 <MX_TIM1_Init+0x9c>)
 8000476:	4a20      	ldr	r2, [pc, #128]	; (80004f8 <MX_TIM1_Init+0xa0>)
 8000478:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7199;
 800047a:	4b1e      	ldr	r3, [pc, #120]	; (80004f4 <MX_TIM1_Init+0x9c>)
 800047c:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000480:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000482:	4b1c      	ldr	r3, [pc, #112]	; (80004f4 <MX_TIM1_Init+0x9c>)
 8000484:	2200      	movs	r2, #0
 8000486:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 8000488:	4b1a      	ldr	r3, [pc, #104]	; (80004f4 <MX_TIM1_Init+0x9c>)
 800048a:	f242 720f 	movw	r2, #9999	; 0x270f
 800048e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000490:	4b18      	ldr	r3, [pc, #96]	; (80004f4 <MX_TIM1_Init+0x9c>)
 8000492:	2200      	movs	r2, #0
 8000494:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000496:	4b17      	ldr	r3, [pc, #92]	; (80004f4 <MX_TIM1_Init+0x9c>)
 8000498:	2200      	movs	r2, #0
 800049a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800049c:	4b15      	ldr	r3, [pc, #84]	; (80004f4 <MX_TIM1_Init+0x9c>)
 800049e:	2280      	movs	r2, #128	; 0x80
 80004a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80004a2:	4814      	ldr	r0, [pc, #80]	; (80004f4 <MX_TIM1_Init+0x9c>)
 80004a4:	f002 fe53 	bl	800314e <HAL_TIM_Base_Init>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d001      	beq.n	80004b2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80004ae:	f000 f9e3 	bl	8000878 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004b6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80004b8:	f107 0308 	add.w	r3, r7, #8
 80004bc:	4619      	mov	r1, r3
 80004be:	480d      	ldr	r0, [pc, #52]	; (80004f4 <MX_TIM1_Init+0x9c>)
 80004c0:	f003 f896 	bl	80035f0 <HAL_TIM_ConfigClockSource>
 80004c4:	4603      	mov	r3, r0
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d001      	beq.n	80004ce <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80004ca:	f000 f9d5 	bl	8000878 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004ce:	2300      	movs	r3, #0
 80004d0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004d2:	2300      	movs	r3, #0
 80004d4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80004d6:	463b      	mov	r3, r7
 80004d8:	4619      	mov	r1, r3
 80004da:	4806      	ldr	r0, [pc, #24]	; (80004f4 <MX_TIM1_Init+0x9c>)
 80004dc:	f003 fbec 	bl	8003cb8 <HAL_TIMEx_MasterConfigSynchronization>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d001      	beq.n	80004ea <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80004e6:	f000 f9c7 	bl	8000878 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80004ea:	bf00      	nop
 80004ec:	3718      	adds	r7, #24
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	20000770 	.word	0x20000770
 80004f8:	40012c00 	.word	0x40012c00

080004fc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b08e      	sub	sp, #56	; 0x38
 8000500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000502:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000506:	2200      	movs	r2, #0
 8000508:	601a      	str	r2, [r3, #0]
 800050a:	605a      	str	r2, [r3, #4]
 800050c:	609a      	str	r2, [r3, #8]
 800050e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000510:	f107 0320 	add.w	r3, r7, #32
 8000514:	2200      	movs	r2, #0
 8000516:	601a      	str	r2, [r3, #0]
 8000518:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800051a:	1d3b      	adds	r3, r7, #4
 800051c:	2200      	movs	r2, #0
 800051e:	601a      	str	r2, [r3, #0]
 8000520:	605a      	str	r2, [r3, #4]
 8000522:	609a      	str	r2, [r3, #8]
 8000524:	60da      	str	r2, [r3, #12]
 8000526:	611a      	str	r2, [r3, #16]
 8000528:	615a      	str	r2, [r3, #20]
 800052a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800052c:	4b38      	ldr	r3, [pc, #224]	; (8000610 <MX_TIM2_Init+0x114>)
 800052e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000532:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 8000534:	4b36      	ldr	r3, [pc, #216]	; (8000610 <MX_TIM2_Init+0x114>)
 8000536:	2207      	movs	r2, #7
 8000538:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800053a:	4b35      	ldr	r3, [pc, #212]	; (8000610 <MX_TIM2_Init+0x114>)
 800053c:	2200      	movs	r2, #0
 800053e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 511;
 8000540:	4b33      	ldr	r3, [pc, #204]	; (8000610 <MX_TIM2_Init+0x114>)
 8000542:	f240 12ff 	movw	r2, #511	; 0x1ff
 8000546:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000548:	4b31      	ldr	r3, [pc, #196]	; (8000610 <MX_TIM2_Init+0x114>)
 800054a:	2200      	movs	r2, #0
 800054c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800054e:	4b30      	ldr	r3, [pc, #192]	; (8000610 <MX_TIM2_Init+0x114>)
 8000550:	2280      	movs	r2, #128	; 0x80
 8000552:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000554:	482e      	ldr	r0, [pc, #184]	; (8000610 <MX_TIM2_Init+0x114>)
 8000556:	f002 fdfa 	bl	800314e <HAL_TIM_Base_Init>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000560:	f000 f98a 	bl	8000878 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000564:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000568:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800056a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800056e:	4619      	mov	r1, r3
 8000570:	4827      	ldr	r0, [pc, #156]	; (8000610 <MX_TIM2_Init+0x114>)
 8000572:	f003 f83d 	bl	80035f0 <HAL_TIM_ConfigClockSource>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d001      	beq.n	8000580 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800057c:	f000 f97c 	bl	8000878 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000580:	4823      	ldr	r0, [pc, #140]	; (8000610 <MX_TIM2_Init+0x114>)
 8000582:	f002 fe32 	bl	80031ea <HAL_TIM_PWM_Init>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800058c:	f000 f974 	bl	8000878 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000590:	2300      	movs	r3, #0
 8000592:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000594:	2300      	movs	r3, #0
 8000596:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000598:	f107 0320 	add.w	r3, r7, #32
 800059c:	4619      	mov	r1, r3
 800059e:	481c      	ldr	r0, [pc, #112]	; (8000610 <MX_TIM2_Init+0x114>)
 80005a0:	f003 fb8a 	bl	8003cb8 <HAL_TIMEx_MasterConfigSynchronization>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80005aa:	f000 f965 	bl	8000878 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005ae:	2360      	movs	r3, #96	; 0x60
 80005b0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80005b2:	2300      	movs	r3, #0
 80005b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005b6:	2300      	movs	r3, #0
 80005b8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005ba:	2300      	movs	r3, #0
 80005bc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80005be:	1d3b      	adds	r3, r7, #4
 80005c0:	2200      	movs	r2, #0
 80005c2:	4619      	mov	r1, r3
 80005c4:	4812      	ldr	r0, [pc, #72]	; (8000610 <MX_TIM2_Init+0x114>)
 80005c6:	f002 ff4d 	bl	8003464 <HAL_TIM_PWM_ConfigChannel>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80005d0:	f000 f952 	bl	8000878 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80005d4:	1d3b      	adds	r3, r7, #4
 80005d6:	2204      	movs	r2, #4
 80005d8:	4619      	mov	r1, r3
 80005da:	480d      	ldr	r0, [pc, #52]	; (8000610 <MX_TIM2_Init+0x114>)
 80005dc:	f002 ff42 	bl	8003464 <HAL_TIM_PWM_ConfigChannel>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80005e6:	f000 f947 	bl	8000878 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80005ea:	1d3b      	adds	r3, r7, #4
 80005ec:	2208      	movs	r2, #8
 80005ee:	4619      	mov	r1, r3
 80005f0:	4807      	ldr	r0, [pc, #28]	; (8000610 <MX_TIM2_Init+0x114>)
 80005f2:	f002 ff37 	bl	8003464 <HAL_TIM_PWM_ConfigChannel>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 80005fc:	f000 f93c 	bl	8000878 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000600:	4803      	ldr	r0, [pc, #12]	; (8000610 <MX_TIM2_Init+0x114>)
 8000602:	f000 faaf 	bl	8000b64 <HAL_TIM_MspPostInit>

}
 8000606:	bf00      	nop
 8000608:	3738      	adds	r7, #56	; 0x38
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	20000808 	.word	0x20000808

08000614 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b086      	sub	sp, #24
 8000618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800061a:	f107 0308 	add.w	r3, r7, #8
 800061e:	2200      	movs	r2, #0
 8000620:	601a      	str	r2, [r3, #0]
 8000622:	605a      	str	r2, [r3, #4]
 8000624:	609a      	str	r2, [r3, #8]
 8000626:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000628:	463b      	mov	r3, r7
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000630:	4b1c      	ldr	r3, [pc, #112]	; (80006a4 <MX_TIM3_Init+0x90>)
 8000632:	4a1d      	ldr	r2, [pc, #116]	; (80006a8 <MX_TIM3_Init+0x94>)
 8000634:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8000636:	4b1b      	ldr	r3, [pc, #108]	; (80006a4 <MX_TIM3_Init+0x90>)
 8000638:	2247      	movs	r2, #71	; 0x47
 800063a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800063c:	4b19      	ldr	r3, [pc, #100]	; (80006a4 <MX_TIM3_Init+0x90>)
 800063e:	2200      	movs	r2, #0
 8000640:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2-1;
 8000642:	4b18      	ldr	r3, [pc, #96]	; (80006a4 <MX_TIM3_Init+0x90>)
 8000644:	2201      	movs	r2, #1
 8000646:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000648:	4b16      	ldr	r3, [pc, #88]	; (80006a4 <MX_TIM3_Init+0x90>)
 800064a:	2200      	movs	r2, #0
 800064c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800064e:	4b15      	ldr	r3, [pc, #84]	; (80006a4 <MX_TIM3_Init+0x90>)
 8000650:	2280      	movs	r2, #128	; 0x80
 8000652:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000654:	4813      	ldr	r0, [pc, #76]	; (80006a4 <MX_TIM3_Init+0x90>)
 8000656:	f002 fd7a 	bl	800314e <HAL_TIM_Base_Init>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8000660:	f000 f90a 	bl	8000878 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000664:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000668:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800066a:	f107 0308 	add.w	r3, r7, #8
 800066e:	4619      	mov	r1, r3
 8000670:	480c      	ldr	r0, [pc, #48]	; (80006a4 <MX_TIM3_Init+0x90>)
 8000672:	f002 ffbd 	bl	80035f0 <HAL_TIM_ConfigClockSource>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 800067c:	f000 f8fc 	bl	8000878 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000680:	2300      	movs	r3, #0
 8000682:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000684:	2300      	movs	r3, #0
 8000686:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000688:	463b      	mov	r3, r7
 800068a:	4619      	mov	r1, r3
 800068c:	4805      	ldr	r0, [pc, #20]	; (80006a4 <MX_TIM3_Init+0x90>)
 800068e:	f003 fb13 	bl	8003cb8 <HAL_TIMEx_MasterConfigSynchronization>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8000698:	f000 f8ee 	bl	8000878 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800069c:	bf00      	nop
 800069e:	3718      	adds	r7, #24
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	200006c0 	.word	0x200006c0
 80006a8:	40000400 	.word	0x40000400

080006ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006b0:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <MX_USART1_UART_Init+0x4c>)
 80006b2:	4a12      	ldr	r2, [pc, #72]	; (80006fc <MX_USART1_UART_Init+0x50>)
 80006b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006b6:	4b10      	ldr	r3, [pc, #64]	; (80006f8 <MX_USART1_UART_Init+0x4c>)
 80006b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006be:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <MX_USART1_UART_Init+0x4c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006c4:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <MX_USART1_UART_Init+0x4c>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006ca:	4b0b      	ldr	r3, [pc, #44]	; (80006f8 <MX_USART1_UART_Init+0x4c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006d0:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <MX_USART1_UART_Init+0x4c>)
 80006d2:	220c      	movs	r2, #12
 80006d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006d6:	4b08      	ldr	r3, [pc, #32]	; (80006f8 <MX_USART1_UART_Init+0x4c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006dc:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <MX_USART1_UART_Init+0x4c>)
 80006de:	2200      	movs	r2, #0
 80006e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006e2:	4805      	ldr	r0, [pc, #20]	; (80006f8 <MX_USART1_UART_Init+0x4c>)
 80006e4:	f003 fb3e 	bl	8003d64 <HAL_UART_Init>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80006ee:	f000 f8c3 	bl	8000878 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	20000730 	.word	0x20000730
 80006fc:	40013800 	.word	0x40013800

08000700 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b088      	sub	sp, #32
 8000704:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000706:	f107 0310 	add.w	r3, r7, #16
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	605a      	str	r2, [r3, #4]
 8000710:	609a      	str	r2, [r3, #8]
 8000712:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000714:	4b52      	ldr	r3, [pc, #328]	; (8000860 <MX_GPIO_Init+0x160>)
 8000716:	699b      	ldr	r3, [r3, #24]
 8000718:	4a51      	ldr	r2, [pc, #324]	; (8000860 <MX_GPIO_Init+0x160>)
 800071a:	f043 0310 	orr.w	r3, r3, #16
 800071e:	6193      	str	r3, [r2, #24]
 8000720:	4b4f      	ldr	r3, [pc, #316]	; (8000860 <MX_GPIO_Init+0x160>)
 8000722:	699b      	ldr	r3, [r3, #24]
 8000724:	f003 0310 	and.w	r3, r3, #16
 8000728:	60fb      	str	r3, [r7, #12]
 800072a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800072c:	4b4c      	ldr	r3, [pc, #304]	; (8000860 <MX_GPIO_Init+0x160>)
 800072e:	699b      	ldr	r3, [r3, #24]
 8000730:	4a4b      	ldr	r2, [pc, #300]	; (8000860 <MX_GPIO_Init+0x160>)
 8000732:	f043 0320 	orr.w	r3, r3, #32
 8000736:	6193      	str	r3, [r2, #24]
 8000738:	4b49      	ldr	r3, [pc, #292]	; (8000860 <MX_GPIO_Init+0x160>)
 800073a:	699b      	ldr	r3, [r3, #24]
 800073c:	f003 0320 	and.w	r3, r3, #32
 8000740:	60bb      	str	r3, [r7, #8]
 8000742:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000744:	4b46      	ldr	r3, [pc, #280]	; (8000860 <MX_GPIO_Init+0x160>)
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	4a45      	ldr	r2, [pc, #276]	; (8000860 <MX_GPIO_Init+0x160>)
 800074a:	f043 0304 	orr.w	r3, r3, #4
 800074e:	6193      	str	r3, [r2, #24]
 8000750:	4b43      	ldr	r3, [pc, #268]	; (8000860 <MX_GPIO_Init+0x160>)
 8000752:	699b      	ldr	r3, [r3, #24]
 8000754:	f003 0304 	and.w	r3, r3, #4
 8000758:	607b      	str	r3, [r7, #4]
 800075a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800075c:	4b40      	ldr	r3, [pc, #256]	; (8000860 <MX_GPIO_Init+0x160>)
 800075e:	699b      	ldr	r3, [r3, #24]
 8000760:	4a3f      	ldr	r2, [pc, #252]	; (8000860 <MX_GPIO_Init+0x160>)
 8000762:	f043 0308 	orr.w	r3, r3, #8
 8000766:	6193      	str	r3, [r2, #24]
 8000768:	4b3d      	ldr	r3, [pc, #244]	; (8000860 <MX_GPIO_Init+0x160>)
 800076a:	699b      	ldr	r3, [r3, #24]
 800076c:	f003 0308 	and.w	r3, r3, #8
 8000770:	603b      	str	r3, [r7, #0]
 8000772:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000774:	2200      	movs	r2, #0
 8000776:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800077a:	483a      	ldr	r0, [pc, #232]	; (8000864 <MX_GPIO_Init+0x164>)
 800077c:	f001 f8a6 	bl	80018cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLINK_GPIO_Port, BLINK_Pin, GPIO_PIN_RESET);
 8000780:	2200      	movs	r2, #0
 8000782:	2104      	movs	r1, #4
 8000784:	4838      	ldr	r0, [pc, #224]	; (8000868 <MX_GPIO_Init+0x168>)
 8000786:	f001 f8a1 	bl	80018cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800078a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800078e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000790:	2301      	movs	r3, #1
 8000792:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000798:	2302      	movs	r3, #2
 800079a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800079c:	f107 0310 	add.w	r3, r7, #16
 80007a0:	4619      	mov	r1, r3
 80007a2:	4830      	ldr	r0, [pc, #192]	; (8000864 <MX_GPIO_Init+0x164>)
 80007a4:	f000 ff38 	bl	8001618 <HAL_GPIO_Init>

  /*Configure GPIO pins : GINT1_Pin GINT2_Pin */
  GPIO_InitStruct.Pin = GINT1_Pin|GINT2_Pin;
 80007a8:	2306      	movs	r3, #6
 80007aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007ac:	4b2f      	ldr	r3, [pc, #188]	; (800086c <MX_GPIO_Init+0x16c>)
 80007ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b0:	2300      	movs	r3, #0
 80007b2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b4:	f107 0310 	add.w	r3, r7, #16
 80007b8:	4619      	mov	r1, r3
 80007ba:	482d      	ldr	r0, [pc, #180]	; (8000870 <MX_GPIO_Init+0x170>)
 80007bc:	f000 ff2c 	bl	8001618 <HAL_GPIO_Init>

  /*Configure GPIO pin : GINT3_Pin */
  GPIO_InitStruct.Pin = GINT3_Pin;
 80007c0:	2308      	movs	r3, #8
 80007c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007c4:	4b2b      	ldr	r3, [pc, #172]	; (8000874 <MX_GPIO_Init+0x174>)
 80007c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GINT3_GPIO_Port, &GPIO_InitStruct);
 80007cc:	f107 0310 	add.w	r3, r7, #16
 80007d0:	4619      	mov	r1, r3
 80007d2:	4827      	ldr	r0, [pc, #156]	; (8000870 <MX_GPIO_Init+0x170>)
 80007d4:	f000 ff20 	bl	8001618 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_RST_Pin */
  GPIO_InitStruct.Pin = SPI1_RST_Pin;
 80007d8:	2301      	movs	r3, #1
 80007da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007dc:	2300      	movs	r3, #0
 80007de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007e0:	2301      	movs	r3, #1
 80007e2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_RST_GPIO_Port, &GPIO_InitStruct);
 80007e4:	f107 0310 	add.w	r3, r7, #16
 80007e8:	4619      	mov	r1, r3
 80007ea:	481f      	ldr	r0, [pc, #124]	; (8000868 <MX_GPIO_Init+0x168>)
 80007ec:	f000 ff14 	bl	8001618 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLINK_Pin */
  GPIO_InitStruct.Pin = BLINK_Pin;
 80007f0:	2304      	movs	r3, #4
 80007f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f4:	2301      	movs	r3, #1
 80007f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007fc:	2303      	movs	r3, #3
 80007fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLINK_GPIO_Port, &GPIO_InitStruct);
 8000800:	f107 0310 	add.w	r3, r7, #16
 8000804:	4619      	mov	r1, r3
 8000806:	4818      	ldr	r0, [pc, #96]	; (8000868 <MX_GPIO_Init+0x168>)
 8000808:	f000 ff06 	bl	8001618 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 BSET_Pin BRSET_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_11|BSET_Pin|BRSET_Pin;
 800080c:	f44f 6303 	mov.w	r3, #2096	; 0x830
 8000810:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000812:	2300      	movs	r3, #0
 8000814:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800081a:	f107 0310 	add.w	r3, r7, #16
 800081e:	4619      	mov	r1, r3
 8000820:	4811      	ldr	r0, [pc, #68]	; (8000868 <MX_GPIO_Init+0x168>)
 8000822:	f000 fef9 	bl	8001618 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000826:	2200      	movs	r2, #0
 8000828:	2100      	movs	r1, #0
 800082a:	2007      	movs	r0, #7
 800082c:	f000 febd 	bl	80015aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000830:	2007      	movs	r0, #7
 8000832:	f000 fed6 	bl	80015e2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000836:	2200      	movs	r2, #0
 8000838:	2100      	movs	r1, #0
 800083a:	2008      	movs	r0, #8
 800083c:	f000 feb5 	bl	80015aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000840:	2008      	movs	r0, #8
 8000842:	f000 fece 	bl	80015e2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000846:	2200      	movs	r2, #0
 8000848:	2100      	movs	r1, #0
 800084a:	2009      	movs	r0, #9
 800084c:	f000 fead 	bl	80015aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000850:	2009      	movs	r0, #9
 8000852:	f000 fec6 	bl	80015e2 <HAL_NVIC_EnableIRQ>

}
 8000856:	bf00      	nop
 8000858:	3720      	adds	r7, #32
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40021000 	.word	0x40021000
 8000864:	40011000 	.word	0x40011000
 8000868:	40010c00 	.word	0x40010c00
 800086c:	10210000 	.word	0x10210000
 8000870:	40010800 	.word	0x40010800
 8000874:	10110000 	.word	0x10110000

08000878 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800087c:	bf00      	nop
 800087e:	46bd      	mov	sp, r7
 8000880:	bc80      	pop	{r7}
 8000882:	4770      	bx	lr

08000884 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000884:	b480      	push	{r7}
 8000886:	b085      	sub	sp, #20
 8000888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800088a:	4b15      	ldr	r3, [pc, #84]	; (80008e0 <HAL_MspInit+0x5c>)
 800088c:	699b      	ldr	r3, [r3, #24]
 800088e:	4a14      	ldr	r2, [pc, #80]	; (80008e0 <HAL_MspInit+0x5c>)
 8000890:	f043 0301 	orr.w	r3, r3, #1
 8000894:	6193      	str	r3, [r2, #24]
 8000896:	4b12      	ldr	r3, [pc, #72]	; (80008e0 <HAL_MspInit+0x5c>)
 8000898:	699b      	ldr	r3, [r3, #24]
 800089a:	f003 0301 	and.w	r3, r3, #1
 800089e:	60bb      	str	r3, [r7, #8]
 80008a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a2:	4b0f      	ldr	r3, [pc, #60]	; (80008e0 <HAL_MspInit+0x5c>)
 80008a4:	69db      	ldr	r3, [r3, #28]
 80008a6:	4a0e      	ldr	r2, [pc, #56]	; (80008e0 <HAL_MspInit+0x5c>)
 80008a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008ac:	61d3      	str	r3, [r2, #28]
 80008ae:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <HAL_MspInit+0x5c>)
 80008b0:	69db      	ldr	r3, [r3, #28]
 80008b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008b6:	607b      	str	r3, [r7, #4]
 80008b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80008ba:	4b0a      	ldr	r3, [pc, #40]	; (80008e4 <HAL_MspInit+0x60>)
 80008bc:	685b      	ldr	r3, [r3, #4]
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80008c6:	60fb      	str	r3, [r7, #12]
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	4a04      	ldr	r2, [pc, #16]	; (80008e4 <HAL_MspInit+0x60>)
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008d6:	bf00      	nop
 80008d8:	3714      	adds	r7, #20
 80008da:	46bd      	mov	sp, r7
 80008dc:	bc80      	pop	{r7}
 80008de:	4770      	bx	lr
 80008e0:	40021000 	.word	0x40021000
 80008e4:	40010000 	.word	0x40010000

080008e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b08a      	sub	sp, #40	; 0x28
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f0:	f107 0318 	add.w	r3, r7, #24
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	605a      	str	r2, [r3, #4]
 80008fa:	609a      	str	r2, [r3, #8]
 80008fc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	4a28      	ldr	r2, [pc, #160]	; (80009a4 <HAL_ADC_MspInit+0xbc>)
 8000904:	4293      	cmp	r3, r2
 8000906:	d122      	bne.n	800094e <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000908:	4b27      	ldr	r3, [pc, #156]	; (80009a8 <HAL_ADC_MspInit+0xc0>)
 800090a:	699b      	ldr	r3, [r3, #24]
 800090c:	4a26      	ldr	r2, [pc, #152]	; (80009a8 <HAL_ADC_MspInit+0xc0>)
 800090e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000912:	6193      	str	r3, [r2, #24]
 8000914:	4b24      	ldr	r3, [pc, #144]	; (80009a8 <HAL_ADC_MspInit+0xc0>)
 8000916:	699b      	ldr	r3, [r3, #24]
 8000918:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800091c:	617b      	str	r3, [r7, #20]
 800091e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000920:	4b21      	ldr	r3, [pc, #132]	; (80009a8 <HAL_ADC_MspInit+0xc0>)
 8000922:	699b      	ldr	r3, [r3, #24]
 8000924:	4a20      	ldr	r2, [pc, #128]	; (80009a8 <HAL_ADC_MspInit+0xc0>)
 8000926:	f043 0304 	orr.w	r3, r3, #4
 800092a:	6193      	str	r3, [r2, #24]
 800092c:	4b1e      	ldr	r3, [pc, #120]	; (80009a8 <HAL_ADC_MspInit+0xc0>)
 800092e:	699b      	ldr	r3, [r3, #24]
 8000930:	f003 0304 	and.w	r3, r3, #4
 8000934:	613b      	str	r3, [r7, #16]
 8000936:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000938:	2301      	movs	r3, #1
 800093a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800093c:	2303      	movs	r3, #3
 800093e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000940:	f107 0318 	add.w	r3, r7, #24
 8000944:	4619      	mov	r1, r3
 8000946:	4819      	ldr	r0, [pc, #100]	; (80009ac <HAL_ADC_MspInit+0xc4>)
 8000948:	f000 fe66 	bl	8001618 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800094c:	e026      	b.n	800099c <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4a17      	ldr	r2, [pc, #92]	; (80009b0 <HAL_ADC_MspInit+0xc8>)
 8000954:	4293      	cmp	r3, r2
 8000956:	d121      	bne.n	800099c <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000958:	4b13      	ldr	r3, [pc, #76]	; (80009a8 <HAL_ADC_MspInit+0xc0>)
 800095a:	699b      	ldr	r3, [r3, #24]
 800095c:	4a12      	ldr	r2, [pc, #72]	; (80009a8 <HAL_ADC_MspInit+0xc0>)
 800095e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000962:	6193      	str	r3, [r2, #24]
 8000964:	4b10      	ldr	r3, [pc, #64]	; (80009a8 <HAL_ADC_MspInit+0xc0>)
 8000966:	699b      	ldr	r3, [r3, #24]
 8000968:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800096c:	60fb      	str	r3, [r7, #12]
 800096e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000970:	4b0d      	ldr	r3, [pc, #52]	; (80009a8 <HAL_ADC_MspInit+0xc0>)
 8000972:	699b      	ldr	r3, [r3, #24]
 8000974:	4a0c      	ldr	r2, [pc, #48]	; (80009a8 <HAL_ADC_MspInit+0xc0>)
 8000976:	f043 0308 	orr.w	r3, r3, #8
 800097a:	6193      	str	r3, [r2, #24]
 800097c:	4b0a      	ldr	r3, [pc, #40]	; (80009a8 <HAL_ADC_MspInit+0xc0>)
 800097e:	699b      	ldr	r3, [r3, #24]
 8000980:	f003 0308 	and.w	r3, r3, #8
 8000984:	60bb      	str	r3, [r7, #8]
 8000986:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000988:	2302      	movs	r3, #2
 800098a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800098c:	2303      	movs	r3, #3
 800098e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000990:	f107 0318 	add.w	r3, r7, #24
 8000994:	4619      	mov	r1, r3
 8000996:	4807      	ldr	r0, [pc, #28]	; (80009b4 <HAL_ADC_MspInit+0xcc>)
 8000998:	f000 fe3e 	bl	8001618 <HAL_GPIO_Init>
}
 800099c:	bf00      	nop
 800099e:	3728      	adds	r7, #40	; 0x28
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	40012400 	.word	0x40012400
 80009a8:	40021000 	.word	0x40021000
 80009ac:	40010800 	.word	0x40010800
 80009b0:	40012800 	.word	0x40012800
 80009b4:	40010c00 	.word	0x40010c00

080009b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b08a      	sub	sp, #40	; 0x28
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c0:	f107 0318 	add.w	r3, r7, #24
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]
 80009ca:	609a      	str	r2, [r3, #8]
 80009cc:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4a31      	ldr	r2, [pc, #196]	; (8000a98 <HAL_SPI_MspInit+0xe0>)
 80009d4:	4293      	cmp	r3, r2
 80009d6:	d124      	bne.n	8000a22 <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009d8:	4b30      	ldr	r3, [pc, #192]	; (8000a9c <HAL_SPI_MspInit+0xe4>)
 80009da:	699b      	ldr	r3, [r3, #24]
 80009dc:	4a2f      	ldr	r2, [pc, #188]	; (8000a9c <HAL_SPI_MspInit+0xe4>)
 80009de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009e2:	6193      	str	r3, [r2, #24]
 80009e4:	4b2d      	ldr	r3, [pc, #180]	; (8000a9c <HAL_SPI_MspInit+0xe4>)
 80009e6:	699b      	ldr	r3, [r3, #24]
 80009e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009ec:	617b      	str	r3, [r7, #20]
 80009ee:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f0:	4b2a      	ldr	r3, [pc, #168]	; (8000a9c <HAL_SPI_MspInit+0xe4>)
 80009f2:	699b      	ldr	r3, [r3, #24]
 80009f4:	4a29      	ldr	r2, [pc, #164]	; (8000a9c <HAL_SPI_MspInit+0xe4>)
 80009f6:	f043 0304 	orr.w	r3, r3, #4
 80009fa:	6193      	str	r3, [r2, #24]
 80009fc:	4b27      	ldr	r3, [pc, #156]	; (8000a9c <HAL_SPI_MspInit+0xe4>)
 80009fe:	699b      	ldr	r3, [r3, #24]
 8000a00:	f003 0304 	and.w	r3, r3, #4
 8000a04:	613b      	str	r3, [r7, #16]
 8000a06:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8000a08:	23b0      	movs	r3, #176	; 0xb0
 8000a0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a10:	2303      	movs	r3, #3
 8000a12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a14:	f107 0318 	add.w	r3, r7, #24
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4821      	ldr	r0, [pc, #132]	; (8000aa0 <HAL_SPI_MspInit+0xe8>)
 8000a1c:	f000 fdfc 	bl	8001618 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000a20:	e036      	b.n	8000a90 <HAL_SPI_MspInit+0xd8>
  else if(hspi->Instance==SPI2)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4a1f      	ldr	r2, [pc, #124]	; (8000aa4 <HAL_SPI_MspInit+0xec>)
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d131      	bne.n	8000a90 <HAL_SPI_MspInit+0xd8>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a2c:	4b1b      	ldr	r3, [pc, #108]	; (8000a9c <HAL_SPI_MspInit+0xe4>)
 8000a2e:	69db      	ldr	r3, [r3, #28]
 8000a30:	4a1a      	ldr	r2, [pc, #104]	; (8000a9c <HAL_SPI_MspInit+0xe4>)
 8000a32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a36:	61d3      	str	r3, [r2, #28]
 8000a38:	4b18      	ldr	r3, [pc, #96]	; (8000a9c <HAL_SPI_MspInit+0xe4>)
 8000a3a:	69db      	ldr	r3, [r3, #28]
 8000a3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a40:	60fb      	str	r3, [r7, #12]
 8000a42:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a44:	4b15      	ldr	r3, [pc, #84]	; (8000a9c <HAL_SPI_MspInit+0xe4>)
 8000a46:	699b      	ldr	r3, [r3, #24]
 8000a48:	4a14      	ldr	r2, [pc, #80]	; (8000a9c <HAL_SPI_MspInit+0xe4>)
 8000a4a:	f043 0308 	orr.w	r3, r3, #8
 8000a4e:	6193      	str	r3, [r2, #24]
 8000a50:	4b12      	ldr	r3, [pc, #72]	; (8000a9c <HAL_SPI_MspInit+0xe4>)
 8000a52:	699b      	ldr	r3, [r3, #24]
 8000a54:	f003 0308 	and.w	r3, r3, #8
 8000a58:	60bb      	str	r3, [r7, #8]
 8000a5a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8000a5c:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8000a60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a62:	2302      	movs	r3, #2
 8000a64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a66:	2303      	movs	r3, #3
 8000a68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a6a:	f107 0318 	add.w	r3, r7, #24
 8000a6e:	4619      	mov	r1, r3
 8000a70:	480d      	ldr	r0, [pc, #52]	; (8000aa8 <HAL_SPI_MspInit+0xf0>)
 8000a72:	f000 fdd1 	bl	8001618 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000a76:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a84:	f107 0318 	add.w	r3, r7, #24
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4807      	ldr	r0, [pc, #28]	; (8000aa8 <HAL_SPI_MspInit+0xf0>)
 8000a8c:	f000 fdc4 	bl	8001618 <HAL_GPIO_Init>
}
 8000a90:	bf00      	nop
 8000a92:	3728      	adds	r7, #40	; 0x28
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	40013000 	.word	0x40013000
 8000a9c:	40021000 	.word	0x40021000
 8000aa0:	40010800 	.word	0x40010800
 8000aa4:	40003800 	.word	0x40003800
 8000aa8:	40010c00 	.word	0x40010c00

08000aac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b086      	sub	sp, #24
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a27      	ldr	r2, [pc, #156]	; (8000b58 <HAL_TIM_Base_MspInit+0xac>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d114      	bne.n	8000ae8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000abe:	4b27      	ldr	r3, [pc, #156]	; (8000b5c <HAL_TIM_Base_MspInit+0xb0>)
 8000ac0:	699b      	ldr	r3, [r3, #24]
 8000ac2:	4a26      	ldr	r2, [pc, #152]	; (8000b5c <HAL_TIM_Base_MspInit+0xb0>)
 8000ac4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ac8:	6193      	str	r3, [r2, #24]
 8000aca:	4b24      	ldr	r3, [pc, #144]	; (8000b5c <HAL_TIM_Base_MspInit+0xb0>)
 8000acc:	699b      	ldr	r3, [r3, #24]
 8000ace:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ad2:	617b      	str	r3, [r7, #20]
 8000ad4:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 1, 0);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2101      	movs	r1, #1
 8000ada:	2019      	movs	r0, #25
 8000adc:	f000 fd65 	bl	80015aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000ae0:	2019      	movs	r0, #25
 8000ae2:	f000 fd7e 	bl	80015e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000ae6:	e032      	b.n	8000b4e <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM2)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000af0:	d114      	bne.n	8000b1c <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000af2:	4b1a      	ldr	r3, [pc, #104]	; (8000b5c <HAL_TIM_Base_MspInit+0xb0>)
 8000af4:	69db      	ldr	r3, [r3, #28]
 8000af6:	4a19      	ldr	r2, [pc, #100]	; (8000b5c <HAL_TIM_Base_MspInit+0xb0>)
 8000af8:	f043 0301 	orr.w	r3, r3, #1
 8000afc:	61d3      	str	r3, [r2, #28]
 8000afe:	4b17      	ldr	r3, [pc, #92]	; (8000b5c <HAL_TIM_Base_MspInit+0xb0>)
 8000b00:	69db      	ldr	r3, [r3, #28]
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	613b      	str	r3, [r7, #16]
 8000b08:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	2102      	movs	r1, #2
 8000b0e:	201c      	movs	r0, #28
 8000b10:	f000 fd4b 	bl	80015aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b14:	201c      	movs	r0, #28
 8000b16:	f000 fd64 	bl	80015e2 <HAL_NVIC_EnableIRQ>
}
 8000b1a:	e018      	b.n	8000b4e <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM3)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a0f      	ldr	r2, [pc, #60]	; (8000b60 <HAL_TIM_Base_MspInit+0xb4>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d113      	bne.n	8000b4e <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b26:	4b0d      	ldr	r3, [pc, #52]	; (8000b5c <HAL_TIM_Base_MspInit+0xb0>)
 8000b28:	69db      	ldr	r3, [r3, #28]
 8000b2a:	4a0c      	ldr	r2, [pc, #48]	; (8000b5c <HAL_TIM_Base_MspInit+0xb0>)
 8000b2c:	f043 0302 	orr.w	r3, r3, #2
 8000b30:	61d3      	str	r3, [r2, #28]
 8000b32:	4b0a      	ldr	r3, [pc, #40]	; (8000b5c <HAL_TIM_Base_MspInit+0xb0>)
 8000b34:	69db      	ldr	r3, [r3, #28]
 8000b36:	f003 0302 	and.w	r3, r3, #2
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 3, 0);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	2103      	movs	r1, #3
 8000b42:	201d      	movs	r0, #29
 8000b44:	f000 fd31 	bl	80015aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000b48:	201d      	movs	r0, #29
 8000b4a:	f000 fd4a 	bl	80015e2 <HAL_NVIC_EnableIRQ>
}
 8000b4e:	bf00      	nop
 8000b50:	3718      	adds	r7, #24
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40012c00 	.word	0x40012c00
 8000b5c:	40021000 	.word	0x40021000
 8000b60:	40000400 	.word	0x40000400

08000b64 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b08a      	sub	sp, #40	; 0x28
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6c:	f107 0314 	add.w	r3, r7, #20
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b82:	d14f      	bne.n	8000c24 <HAL_TIM_MspPostInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b84:	4b29      	ldr	r3, [pc, #164]	; (8000c2c <HAL_TIM_MspPostInit+0xc8>)
 8000b86:	699b      	ldr	r3, [r3, #24]
 8000b88:	4a28      	ldr	r2, [pc, #160]	; (8000c2c <HAL_TIM_MspPostInit+0xc8>)
 8000b8a:	f043 0308 	orr.w	r3, r3, #8
 8000b8e:	6193      	str	r3, [r2, #24]
 8000b90:	4b26      	ldr	r3, [pc, #152]	; (8000c2c <HAL_TIM_MspPostInit+0xc8>)
 8000b92:	699b      	ldr	r3, [r3, #24]
 8000b94:	f003 0308 	and.w	r3, r3, #8
 8000b98:	613b      	str	r3, [r7, #16]
 8000b9a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9c:	4b23      	ldr	r3, [pc, #140]	; (8000c2c <HAL_TIM_MspPostInit+0xc8>)
 8000b9e:	699b      	ldr	r3, [r3, #24]
 8000ba0:	4a22      	ldr	r2, [pc, #136]	; (8000c2c <HAL_TIM_MspPostInit+0xc8>)
 8000ba2:	f043 0304 	orr.w	r3, r3, #4
 8000ba6:	6193      	str	r3, [r2, #24]
 8000ba8:	4b20      	ldr	r3, [pc, #128]	; (8000c2c <HAL_TIM_MspPostInit+0xc8>)
 8000baa:	699b      	ldr	r3, [r3, #24]
 8000bac:	f003 0304 	and.w	r3, r3, #4
 8000bb0:	60fb      	str	r3, [r7, #12]
 8000bb2:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000bb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc2:	f107 0314 	add.w	r3, r7, #20
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4819      	ldr	r0, [pc, #100]	; (8000c30 <HAL_TIM_MspPostInit+0xcc>)
 8000bca:	f000 fd25 	bl	8001618 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000bce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000bd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bd8:	2303      	movs	r3, #3
 8000bda:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	4619      	mov	r1, r3
 8000be2:	4814      	ldr	r0, [pc, #80]	; (8000c34 <HAL_TIM_MspPostInit+0xd0>)
 8000be4:	f000 fd18 	bl	8001618 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000be8:	2308      	movs	r3, #8
 8000bea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bec:	2302      	movs	r3, #2
 8000bee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bf0:	2303      	movs	r3, #3
 8000bf2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf4:	f107 0314 	add.w	r3, r7, #20
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	480d      	ldr	r0, [pc, #52]	; (8000c30 <HAL_TIM_MspPostInit+0xcc>)
 8000bfc:	f000 fd0c 	bl	8001618 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_ENABLE();
 8000c00:	4b0d      	ldr	r3, [pc, #52]	; (8000c38 <HAL_TIM_MspPostInit+0xd4>)
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	627b      	str	r3, [r7, #36]	; 0x24
 8000c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000c0c:	627b      	str	r3, [r7, #36]	; 0x24
 8000c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c10:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000c14:	627b      	str	r3, [r7, #36]	; 0x24
 8000c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c18:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000c1c:	627b      	str	r3, [r7, #36]	; 0x24
 8000c1e:	4a06      	ldr	r2, [pc, #24]	; (8000c38 <HAL_TIM_MspPostInit+0xd4>)
 8000c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c22:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000c24:	bf00      	nop
 8000c26:	3728      	adds	r7, #40	; 0x28
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	40021000 	.word	0x40021000
 8000c30:	40010c00 	.word	0x40010c00
 8000c34:	40010800 	.word	0x40010800
 8000c38:	40010000 	.word	0x40010000

08000c3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b088      	sub	sp, #32
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c44:	f107 0310 	add.w	r3, r7, #16
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4a1c      	ldr	r2, [pc, #112]	; (8000cc8 <HAL_UART_MspInit+0x8c>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d131      	bne.n	8000cc0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c5c:	4b1b      	ldr	r3, [pc, #108]	; (8000ccc <HAL_UART_MspInit+0x90>)
 8000c5e:	699b      	ldr	r3, [r3, #24]
 8000c60:	4a1a      	ldr	r2, [pc, #104]	; (8000ccc <HAL_UART_MspInit+0x90>)
 8000c62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c66:	6193      	str	r3, [r2, #24]
 8000c68:	4b18      	ldr	r3, [pc, #96]	; (8000ccc <HAL_UART_MspInit+0x90>)
 8000c6a:	699b      	ldr	r3, [r3, #24]
 8000c6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c70:	60fb      	str	r3, [r7, #12]
 8000c72:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c74:	4b15      	ldr	r3, [pc, #84]	; (8000ccc <HAL_UART_MspInit+0x90>)
 8000c76:	699b      	ldr	r3, [r3, #24]
 8000c78:	4a14      	ldr	r2, [pc, #80]	; (8000ccc <HAL_UART_MspInit+0x90>)
 8000c7a:	f043 0304 	orr.w	r3, r3, #4
 8000c7e:	6193      	str	r3, [r2, #24]
 8000c80:	4b12      	ldr	r3, [pc, #72]	; (8000ccc <HAL_UART_MspInit+0x90>)
 8000c82:	699b      	ldr	r3, [r3, #24]
 8000c84:	f003 0304 	and.w	r3, r3, #4
 8000c88:	60bb      	str	r3, [r7, #8]
 8000c8a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c90:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c92:	2302      	movs	r3, #2
 8000c94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c96:	2303      	movs	r3, #3
 8000c98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c9a:	f107 0310 	add.w	r3, r7, #16
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	480b      	ldr	r0, [pc, #44]	; (8000cd0 <HAL_UART_MspInit+0x94>)
 8000ca2:	f000 fcb9 	bl	8001618 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ca6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000caa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cac:	2300      	movs	r3, #0
 8000cae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb4:	f107 0310 	add.w	r3, r7, #16
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4805      	ldr	r0, [pc, #20]	; (8000cd0 <HAL_UART_MspInit+0x94>)
 8000cbc:	f000 fcac 	bl	8001618 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000cc0:	bf00      	nop
 8000cc2:	3720      	adds	r7, #32
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	40013800 	.word	0x40013800
 8000ccc:	40021000 	.word	0x40021000
 8000cd0:	40010800 	.word	0x40010800

08000cd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bc80      	pop	{r7}
 8000cde:	4770      	bx	lr

08000ce0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ce4:	e7fe      	b.n	8000ce4 <HardFault_Handler+0x4>

08000ce6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cea:	e7fe      	b.n	8000cea <MemManage_Handler+0x4>

08000cec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cf0:	e7fe      	b.n	8000cf0 <BusFault_Handler+0x4>

08000cf2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cf6:	e7fe      	b.n	8000cf6 <UsageFault_Handler+0x4>

08000cf8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bc80      	pop	{r7}
 8000d02:	4770      	bx	lr

08000d04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d08:	bf00      	nop
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bc80      	pop	{r7}
 8000d0e:	4770      	bx	lr

08000d10 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bc80      	pop	{r7}
 8000d1a:	4770      	bx	lr

08000d1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d20:	f000 f924 	bl	8000f6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d24:	bf00      	nop
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000d2c:	2002      	movs	r0, #2
 8000d2e:	f000 fdfd 	bl	800192c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000d3a:	2004      	movs	r0, #4
 8000d3c:	f000 fdf6 	bl	800192c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000d40:	bf00      	nop
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000d48:	2008      	movs	r0, #8
 8000d4a:	f000 fdef 	bl	800192c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
	...

08000d54 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000d58:	4802      	ldr	r0, [pc, #8]	; (8000d64 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000d5a:	f000 ff40 	bl	8001bde <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	20001d88 	.word	0x20001d88

08000d68 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d6c:	4802      	ldr	r0, [pc, #8]	; (8000d78 <TIM1_UP_IRQHandler+0x10>)
 8000d6e:	f002 fa70 	bl	8003252 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	20000770 	.word	0x20000770

08000d7c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d80:	4802      	ldr	r0, [pc, #8]	; (8000d8c <TIM2_IRQHandler+0x10>)
 8000d82:	f002 fa66 	bl	8003252 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	20000808 	.word	0x20000808

08000d90 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000d90:	b598      	push	{r3, r4, r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
  micros_timer++;
 8000d94:	4b0f      	ldr	r3, [pc, #60]	; (8000dd4 <TIM3_IRQHandler+0x44>)
 8000d96:	e9d3 1200 	ldrd	r1, r2, [r3]
 8000d9a:	1c4b      	adds	r3, r1, #1
 8000d9c:	f142 0400 	adc.w	r4, r2, #0
 8000da0:	4a0c      	ldr	r2, [pc, #48]	; (8000dd4 <TIM3_IRQHandler+0x44>)
 8000da2:	e9c2 3400 	strd	r3, r4, [r2]
  millis_counter++;
 8000da6:	4b0c      	ldr	r3, [pc, #48]	; (8000dd8 <TIM3_IRQHandler+0x48>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	3301      	adds	r3, #1
 8000dac:	4a0a      	ldr	r2, [pc, #40]	; (8000dd8 <TIM3_IRQHandler+0x48>)
 8000dae:	6013      	str	r3, [r2, #0]
  if(millis_counter > 300){
 8000db0:	4b09      	ldr	r3, [pc, #36]	; (8000dd8 <TIM3_IRQHandler+0x48>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000db8:	d907      	bls.n	8000dca <TIM3_IRQHandler+0x3a>
	  millis_counter = 0;
 8000dba:	4b07      	ldr	r3, [pc, #28]	; (8000dd8 <TIM3_IRQHandler+0x48>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
	  millis_timer++;
 8000dc0:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <TIM3_IRQHandler+0x4c>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	4a05      	ldr	r2, [pc, #20]	; (8000ddc <TIM3_IRQHandler+0x4c>)
 8000dc8:	6013      	str	r3, [r2, #0]
  }
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000dca:	4805      	ldr	r0, [pc, #20]	; (8000de0 <TIM3_IRQHandler+0x50>)
 8000dcc:	f002 fa41 	bl	8003252 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000dd0:	bf00      	nop
 8000dd2:	bd98      	pop	{r3, r4, r7, pc}
 8000dd4:	20000850 	.word	0x20000850
 8000dd8:	2000084c 	.word	0x2000084c
 8000ddc:	20000858 	.word	0x20000858
 8000de0:	200006c0 	.word	0x200006c0

08000de4 <USBWakeUp_IRQHandler>:

/**
  * @brief This function handles USB wake-up interrupt through EXTI line 18.
  */
void USBWakeUp_IRQHandler(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USBWakeUp_IRQn 0 */

  /* USER CODE END USBWakeUp_IRQn 0 */
  if ((&hpcd_USB_FS)->Init.low_power_enable) {
 8000de8:	4b08      	ldr	r3, [pc, #32]	; (8000e0c <USBWakeUp_IRQHandler+0x28>)
 8000dea:	699b      	ldr	r3, [r3, #24]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d007      	beq.n	8000e00 <USBWakeUp_IRQHandler+0x1c>
    /* Reset SLEEPDEEP bit of Cortex System Control Register */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8000df0:	4b07      	ldr	r3, [pc, #28]	; (8000e10 <USBWakeUp_IRQHandler+0x2c>)
 8000df2:	691b      	ldr	r3, [r3, #16]
 8000df4:	4a06      	ldr	r2, [pc, #24]	; (8000e10 <USBWakeUp_IRQHandler+0x2c>)
 8000df6:	f023 0306 	bic.w	r3, r3, #6
 8000dfa:	6113      	str	r3, [r2, #16]
    SystemClock_Config();
 8000dfc:	f7ff f9e4 	bl	80001c8 <SystemClock_Config>
  }
  /* Clear EXTI pending bit */
  __HAL_USB_WAKEUP_EXTI_CLEAR_FLAG();
 8000e00:	4b04      	ldr	r3, [pc, #16]	; (8000e14 <USBWakeUp_IRQHandler+0x30>)
 8000e02:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000e06:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN USBWakeUp_IRQn 1 */

  /* USER CODE END USBWakeUp_IRQn 1 */
}
 8000e08:	bf00      	nop
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	20001d88 	.word	0x20001d88
 8000e10:	e000ed00 	.word	0xe000ed00
 8000e14:	40010400 	.word	0x40010400

08000e18 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000e1c:	4b15      	ldr	r3, [pc, #84]	; (8000e74 <SystemInit+0x5c>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a14      	ldr	r2, [pc, #80]	; (8000e74 <SystemInit+0x5c>)
 8000e22:	f043 0301 	orr.w	r3, r3, #1
 8000e26:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000e28:	4b12      	ldr	r3, [pc, #72]	; (8000e74 <SystemInit+0x5c>)
 8000e2a:	685a      	ldr	r2, [r3, #4]
 8000e2c:	4911      	ldr	r1, [pc, #68]	; (8000e74 <SystemInit+0x5c>)
 8000e2e:	4b12      	ldr	r3, [pc, #72]	; (8000e78 <SystemInit+0x60>)
 8000e30:	4013      	ands	r3, r2
 8000e32:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000e34:	4b0f      	ldr	r3, [pc, #60]	; (8000e74 <SystemInit+0x5c>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a0e      	ldr	r2, [pc, #56]	; (8000e74 <SystemInit+0x5c>)
 8000e3a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000e3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e42:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e44:	4b0b      	ldr	r3, [pc, #44]	; (8000e74 <SystemInit+0x5c>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a0a      	ldr	r2, [pc, #40]	; (8000e74 <SystemInit+0x5c>)
 8000e4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e4e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000e50:	4b08      	ldr	r3, [pc, #32]	; (8000e74 <SystemInit+0x5c>)
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	4a07      	ldr	r2, [pc, #28]	; (8000e74 <SystemInit+0x5c>)
 8000e56:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000e5a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000e5c:	4b05      	ldr	r3, [pc, #20]	; (8000e74 <SystemInit+0x5c>)
 8000e5e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000e62:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000e64:	4b05      	ldr	r3, [pc, #20]	; (8000e7c <SystemInit+0x64>)
 8000e66:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e6a:	609a      	str	r2, [r3, #8]
#endif 
}
 8000e6c:	bf00      	nop
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bc80      	pop	{r7}
 8000e72:	4770      	bx	lr
 8000e74:	40021000 	.word	0x40021000
 8000e78:	f8ff0000 	.word	0xf8ff0000
 8000e7c:	e000ed00 	.word	0xe000ed00

08000e80 <millis>:
#include "util.h"

volatile unsigned long long micros_timer;
volatile unsigned long millis_timer;

unsigned long millis(){ return millis_timer; }
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	4b02      	ldr	r3, [pc, #8]	; (8000e90 <millis+0x10>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4618      	mov	r0, r3
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bc80      	pop	{r7}
 8000e8e:	4770      	bx	lr
 8000e90:	20000858 	.word	0x20000858

08000e94 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000e94:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000e96:	e003      	b.n	8000ea0 <LoopCopyDataInit>

08000e98 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000e98:	4b0b      	ldr	r3, [pc, #44]	; (8000ec8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000e9a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000e9c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000e9e:	3104      	adds	r1, #4

08000ea0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000ea0:	480a      	ldr	r0, [pc, #40]	; (8000ecc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000ea2:	4b0b      	ldr	r3, [pc, #44]	; (8000ed0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000ea4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000ea6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000ea8:	d3f6      	bcc.n	8000e98 <CopyDataInit>
  ldr r2, =_sbss
 8000eaa:	4a0a      	ldr	r2, [pc, #40]	; (8000ed4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000eac:	e002      	b.n	8000eb4 <LoopFillZerobss>

08000eae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000eae:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000eb0:	f842 3b04 	str.w	r3, [r2], #4

08000eb4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000eb4:	4b08      	ldr	r3, [pc, #32]	; (8000ed8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000eb6:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000eb8:	d3f9      	bcc.n	8000eae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000eba:	f7ff ffad 	bl	8000e18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ebe:	f006 fc31 	bl	8007724 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ec2:	f7ff f943 	bl	800014c <main>
  bx lr
 8000ec6:	4770      	bx	lr
  ldr r3, =_sidata
 8000ec8:	08007878 	.word	0x08007878
  ldr r0, =_sdata
 8000ecc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000ed0:	200000f0 	.word	0x200000f0
  ldr r2, =_sbss
 8000ed4:	200000f0 	.word	0x200000f0
  ldr r3, = _ebss
 8000ed8:	20001ff4 	.word	0x20001ff4

08000edc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000edc:	e7fe      	b.n	8000edc <ADC1_2_IRQHandler>
	...

08000ee0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ee4:	4b08      	ldr	r3, [pc, #32]	; (8000f08 <HAL_Init+0x28>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a07      	ldr	r2, [pc, #28]	; (8000f08 <HAL_Init+0x28>)
 8000eea:	f043 0310 	orr.w	r3, r3, #16
 8000eee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ef0:	2003      	movs	r0, #3
 8000ef2:	f000 fb4f 	bl	8001594 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	f000 f808 	bl	8000f0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000efc:	f7ff fcc2 	bl	8000884 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40022000 	.word	0x40022000

08000f0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f14:	4b12      	ldr	r3, [pc, #72]	; (8000f60 <HAL_InitTick+0x54>)
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	4b12      	ldr	r3, [pc, #72]	; (8000f64 <HAL_InitTick+0x58>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f000 fb67 	bl	80015fe <HAL_SYSTICK_Config>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
 8000f38:	e00e      	b.n	8000f58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2b0f      	cmp	r3, #15
 8000f3e:	d80a      	bhi.n	8000f56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f40:	2200      	movs	r2, #0
 8000f42:	6879      	ldr	r1, [r7, #4]
 8000f44:	f04f 30ff 	mov.w	r0, #4294967295
 8000f48:	f000 fb2f 	bl	80015aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f4c:	4a06      	ldr	r2, [pc, #24]	; (8000f68 <HAL_InitTick+0x5c>)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f52:	2300      	movs	r3, #0
 8000f54:	e000      	b.n	8000f58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20000000 	.word	0x20000000
 8000f64:	20000008 	.word	0x20000008
 8000f68:	20000004 	.word	0x20000004

08000f6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f70:	4b05      	ldr	r3, [pc, #20]	; (8000f88 <HAL_IncTick+0x1c>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	461a      	mov	r2, r3
 8000f76:	4b05      	ldr	r3, [pc, #20]	; (8000f8c <HAL_IncTick+0x20>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	4a03      	ldr	r2, [pc, #12]	; (8000f8c <HAL_IncTick+0x20>)
 8000f7e:	6013      	str	r3, [r2, #0]
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bc80      	pop	{r7}
 8000f86:	4770      	bx	lr
 8000f88:	20000008 	.word	0x20000008
 8000f8c:	2000085c 	.word	0x2000085c

08000f90 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  return uwTick;
 8000f94:	4b02      	ldr	r3, [pc, #8]	; (8000fa0 <HAL_GetTick+0x10>)
 8000f96:	681b      	ldr	r3, [r3, #0]
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bc80      	pop	{r7}
 8000f9e:	4770      	bx	lr
 8000fa0:	2000085c 	.word	0x2000085c

08000fa4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fac:	f7ff fff0 	bl	8000f90 <HAL_GetTick>
 8000fb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fbc:	d005      	beq.n	8000fca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fbe:	4b09      	ldr	r3, [pc, #36]	; (8000fe4 <HAL_Delay+0x40>)
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fca:	bf00      	nop
 8000fcc:	f7ff ffe0 	bl	8000f90 <HAL_GetTick>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	68fa      	ldr	r2, [r7, #12]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d8f7      	bhi.n	8000fcc <HAL_Delay+0x28>
  {
  }
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20000008 	.word	0x20000008

08000fe8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d101      	bne.n	800100a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	e0be      	b.n	8001188 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001014:	2b00      	cmp	r3, #0
 8001016:	d109      	bne.n	800102c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2200      	movs	r2, #0
 800101c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2200      	movs	r2, #0
 8001022:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f7ff fc5e 	bl	80008e8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f000 f9ab 	bl	8001388 <ADC_ConversionStop_Disable>
 8001032:	4603      	mov	r3, r0
 8001034:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800103a:	f003 0310 	and.w	r3, r3, #16
 800103e:	2b00      	cmp	r3, #0
 8001040:	f040 8099 	bne.w	8001176 <HAL_ADC_Init+0x18e>
 8001044:	7dfb      	ldrb	r3, [r7, #23]
 8001046:	2b00      	cmp	r3, #0
 8001048:	f040 8095 	bne.w	8001176 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001050:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001054:	f023 0302 	bic.w	r3, r3, #2
 8001058:	f043 0202 	orr.w	r2, r3, #2
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001068:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	7b1b      	ldrb	r3, [r3, #12]
 800106e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001070:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001072:	68ba      	ldr	r2, [r7, #8]
 8001074:	4313      	orrs	r3, r2
 8001076:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	689b      	ldr	r3, [r3, #8]
 800107c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001080:	d003      	beq.n	800108a <HAL_ADC_Init+0xa2>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	2b01      	cmp	r3, #1
 8001088:	d102      	bne.n	8001090 <HAL_ADC_Init+0xa8>
 800108a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800108e:	e000      	b.n	8001092 <HAL_ADC_Init+0xaa>
 8001090:	2300      	movs	r3, #0
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	4313      	orrs	r3, r2
 8001096:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	7d1b      	ldrb	r3, [r3, #20]
 800109c:	2b01      	cmp	r3, #1
 800109e:	d119      	bne.n	80010d4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	7b1b      	ldrb	r3, [r3, #12]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d109      	bne.n	80010bc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	699b      	ldr	r3, [r3, #24]
 80010ac:	3b01      	subs	r3, #1
 80010ae:	035a      	lsls	r2, r3, #13
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010b8:	613b      	str	r3, [r7, #16]
 80010ba:	e00b      	b.n	80010d4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010c0:	f043 0220 	orr.w	r2, r3, #32
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010cc:	f043 0201 	orr.w	r2, r3, #1
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	430a      	orrs	r2, r1
 80010e6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	689a      	ldr	r2, [r3, #8]
 80010ee:	4b28      	ldr	r3, [pc, #160]	; (8001190 <HAL_ADC_Init+0x1a8>)
 80010f0:	4013      	ands	r3, r2
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	6812      	ldr	r2, [r2, #0]
 80010f6:	68b9      	ldr	r1, [r7, #8]
 80010f8:	430b      	orrs	r3, r1
 80010fa:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001104:	d003      	beq.n	800110e <HAL_ADC_Init+0x126>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	2b01      	cmp	r3, #1
 800110c:	d104      	bne.n	8001118 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	691b      	ldr	r3, [r3, #16]
 8001112:	3b01      	subs	r3, #1
 8001114:	051b      	lsls	r3, r3, #20
 8001116:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800111e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	68fa      	ldr	r2, [r7, #12]
 8001128:	430a      	orrs	r2, r1
 800112a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	689a      	ldr	r2, [r3, #8]
 8001132:	4b18      	ldr	r3, [pc, #96]	; (8001194 <HAL_ADC_Init+0x1ac>)
 8001134:	4013      	ands	r3, r2
 8001136:	68ba      	ldr	r2, [r7, #8]
 8001138:	429a      	cmp	r2, r3
 800113a:	d10b      	bne.n	8001154 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2200      	movs	r2, #0
 8001140:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001146:	f023 0303 	bic.w	r3, r3, #3
 800114a:	f043 0201 	orr.w	r2, r3, #1
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001152:	e018      	b.n	8001186 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001158:	f023 0312 	bic.w	r3, r3, #18
 800115c:	f043 0210 	orr.w	r2, r3, #16
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001168:	f043 0201 	orr.w	r2, r3, #1
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001170:	2301      	movs	r3, #1
 8001172:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001174:	e007      	b.n	8001186 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800117a:	f043 0210 	orr.w	r2, r3, #16
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001186:	7dfb      	ldrb	r3, [r7, #23]
}
 8001188:	4618      	mov	r0, r3
 800118a:	3718      	adds	r7, #24
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	ffe1f7fd 	.word	0xffe1f7fd
 8001194:	ff1f0efe 	.word	0xff1f0efe

08001198 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001198:	b480      	push	{r7}
 800119a:	b085      	sub	sp, #20
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011a2:	2300      	movs	r3, #0
 80011a4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80011a6:	2300      	movs	r3, #0
 80011a8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d101      	bne.n	80011b8 <HAL_ADC_ConfigChannel+0x20>
 80011b4:	2302      	movs	r3, #2
 80011b6:	e0dc      	b.n	8001372 <HAL_ADC_ConfigChannel+0x1da>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2201      	movs	r2, #1
 80011bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	2b06      	cmp	r3, #6
 80011c6:	d81c      	bhi.n	8001202 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685a      	ldr	r2, [r3, #4]
 80011d2:	4613      	mov	r3, r2
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	4413      	add	r3, r2
 80011d8:	3b05      	subs	r3, #5
 80011da:	221f      	movs	r2, #31
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	43db      	mvns	r3, r3
 80011e2:	4019      	ands	r1, r3
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	6818      	ldr	r0, [r3, #0]
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685a      	ldr	r2, [r3, #4]
 80011ec:	4613      	mov	r3, r2
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	4413      	add	r3, r2
 80011f2:	3b05      	subs	r3, #5
 80011f4:	fa00 f203 	lsl.w	r2, r0, r3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	430a      	orrs	r2, r1
 80011fe:	635a      	str	r2, [r3, #52]	; 0x34
 8001200:	e03c      	b.n	800127c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	2b0c      	cmp	r3, #12
 8001208:	d81c      	bhi.n	8001244 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685a      	ldr	r2, [r3, #4]
 8001214:	4613      	mov	r3, r2
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	4413      	add	r3, r2
 800121a:	3b23      	subs	r3, #35	; 0x23
 800121c:	221f      	movs	r2, #31
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	43db      	mvns	r3, r3
 8001224:	4019      	ands	r1, r3
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	6818      	ldr	r0, [r3, #0]
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685a      	ldr	r2, [r3, #4]
 800122e:	4613      	mov	r3, r2
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	4413      	add	r3, r2
 8001234:	3b23      	subs	r3, #35	; 0x23
 8001236:	fa00 f203 	lsl.w	r2, r0, r3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	430a      	orrs	r2, r1
 8001240:	631a      	str	r2, [r3, #48]	; 0x30
 8001242:	e01b      	b.n	800127c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685a      	ldr	r2, [r3, #4]
 800124e:	4613      	mov	r3, r2
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	4413      	add	r3, r2
 8001254:	3b41      	subs	r3, #65	; 0x41
 8001256:	221f      	movs	r2, #31
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	43db      	mvns	r3, r3
 800125e:	4019      	ands	r1, r3
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	6818      	ldr	r0, [r3, #0]
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685a      	ldr	r2, [r3, #4]
 8001268:	4613      	mov	r3, r2
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	4413      	add	r3, r2
 800126e:	3b41      	subs	r3, #65	; 0x41
 8001270:	fa00 f203 	lsl.w	r2, r0, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	430a      	orrs	r2, r1
 800127a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2b09      	cmp	r3, #9
 8001282:	d91c      	bls.n	80012be <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	68d9      	ldr	r1, [r3, #12]
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	4613      	mov	r3, r2
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	4413      	add	r3, r2
 8001294:	3b1e      	subs	r3, #30
 8001296:	2207      	movs	r2, #7
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	43db      	mvns	r3, r3
 800129e:	4019      	ands	r1, r3
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	6898      	ldr	r0, [r3, #8]
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	4613      	mov	r3, r2
 80012aa:	005b      	lsls	r3, r3, #1
 80012ac:	4413      	add	r3, r2
 80012ae:	3b1e      	subs	r3, #30
 80012b0:	fa00 f203 	lsl.w	r2, r0, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	430a      	orrs	r2, r1
 80012ba:	60da      	str	r2, [r3, #12]
 80012bc:	e019      	b.n	80012f2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	6919      	ldr	r1, [r3, #16]
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	4613      	mov	r3, r2
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	4413      	add	r3, r2
 80012ce:	2207      	movs	r2, #7
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	43db      	mvns	r3, r3
 80012d6:	4019      	ands	r1, r3
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	6898      	ldr	r0, [r3, #8]
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	4613      	mov	r3, r2
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	4413      	add	r3, r2
 80012e6:	fa00 f203 	lsl.w	r2, r0, r3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	430a      	orrs	r2, r1
 80012f0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	2b10      	cmp	r3, #16
 80012f8:	d003      	beq.n	8001302 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80012fe:	2b11      	cmp	r3, #17
 8001300:	d132      	bne.n	8001368 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a1d      	ldr	r2, [pc, #116]	; (800137c <HAL_ADC_ConfigChannel+0x1e4>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d125      	bne.n	8001358 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d126      	bne.n	8001368 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	689a      	ldr	r2, [r3, #8]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001328:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	2b10      	cmp	r3, #16
 8001330:	d11a      	bne.n	8001368 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001332:	4b13      	ldr	r3, [pc, #76]	; (8001380 <HAL_ADC_ConfigChannel+0x1e8>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a13      	ldr	r2, [pc, #76]	; (8001384 <HAL_ADC_ConfigChannel+0x1ec>)
 8001338:	fba2 2303 	umull	r2, r3, r2, r3
 800133c:	0c9a      	lsrs	r2, r3, #18
 800133e:	4613      	mov	r3, r2
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	4413      	add	r3, r2
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001348:	e002      	b.n	8001350 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800134a:	68bb      	ldr	r3, [r7, #8]
 800134c:	3b01      	subs	r3, #1
 800134e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d1f9      	bne.n	800134a <HAL_ADC_ConfigChannel+0x1b2>
 8001356:	e007      	b.n	8001368 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800135c:	f043 0220 	orr.w	r2, r3, #32
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001364:	2301      	movs	r3, #1
 8001366:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2200      	movs	r2, #0
 800136c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001370:	7bfb      	ldrb	r3, [r7, #15]
}
 8001372:	4618      	mov	r0, r3
 8001374:	3714      	adds	r7, #20
 8001376:	46bd      	mov	sp, r7
 8001378:	bc80      	pop	{r7}
 800137a:	4770      	bx	lr
 800137c:	40012400 	.word	0x40012400
 8001380:	20000000 	.word	0x20000000
 8001384:	431bde83 	.word	0x431bde83

08001388 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001390:	2300      	movs	r3, #0
 8001392:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d127      	bne.n	80013f2 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	689a      	ldr	r2, [r3, #8]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f022 0201 	bic.w	r2, r2, #1
 80013b0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80013b2:	f7ff fded 	bl	8000f90 <HAL_GetTick>
 80013b6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80013b8:	e014      	b.n	80013e4 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80013ba:	f7ff fde9 	bl	8000f90 <HAL_GetTick>
 80013be:	4602      	mov	r2, r0
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d90d      	bls.n	80013e4 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013cc:	f043 0210 	orr.w	r2, r3, #16
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013d8:	f043 0201 	orr.w	r2, r3, #1
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
 80013e2:	e007      	b.n	80013f4 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	f003 0301 	and.w	r3, r3, #1
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d0e3      	beq.n	80013ba <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80013f2:	2300      	movs	r3, #0
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3710      	adds	r7, #16
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}

080013fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b085      	sub	sp, #20
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f003 0307 	and.w	r3, r3, #7
 800140a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800140c:	4b0c      	ldr	r3, [pc, #48]	; (8001440 <__NVIC_SetPriorityGrouping+0x44>)
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001412:	68ba      	ldr	r2, [r7, #8]
 8001414:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001418:	4013      	ands	r3, r2
 800141a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001424:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001428:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800142c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800142e:	4a04      	ldr	r2, [pc, #16]	; (8001440 <__NVIC_SetPriorityGrouping+0x44>)
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	60d3      	str	r3, [r2, #12]
}
 8001434:	bf00      	nop
 8001436:	3714      	adds	r7, #20
 8001438:	46bd      	mov	sp, r7
 800143a:	bc80      	pop	{r7}
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	e000ed00 	.word	0xe000ed00

08001444 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001448:	4b04      	ldr	r3, [pc, #16]	; (800145c <__NVIC_GetPriorityGrouping+0x18>)
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	0a1b      	lsrs	r3, r3, #8
 800144e:	f003 0307 	and.w	r3, r3, #7
}
 8001452:	4618      	mov	r0, r3
 8001454:	46bd      	mov	sp, r7
 8001456:	bc80      	pop	{r7}
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	e000ed00 	.word	0xe000ed00

08001460 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800146a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146e:	2b00      	cmp	r3, #0
 8001470:	db0b      	blt.n	800148a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001472:	79fb      	ldrb	r3, [r7, #7]
 8001474:	f003 021f 	and.w	r2, r3, #31
 8001478:	4906      	ldr	r1, [pc, #24]	; (8001494 <__NVIC_EnableIRQ+0x34>)
 800147a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147e:	095b      	lsrs	r3, r3, #5
 8001480:	2001      	movs	r0, #1
 8001482:	fa00 f202 	lsl.w	r2, r0, r2
 8001486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800148a:	bf00      	nop
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	bc80      	pop	{r7}
 8001492:	4770      	bx	lr
 8001494:	e000e100 	.word	0xe000e100

08001498 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	6039      	str	r1, [r7, #0]
 80014a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	db0a      	blt.n	80014c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	b2da      	uxtb	r2, r3
 80014b0:	490c      	ldr	r1, [pc, #48]	; (80014e4 <__NVIC_SetPriority+0x4c>)
 80014b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b6:	0112      	lsls	r2, r2, #4
 80014b8:	b2d2      	uxtb	r2, r2
 80014ba:	440b      	add	r3, r1
 80014bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014c0:	e00a      	b.n	80014d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	b2da      	uxtb	r2, r3
 80014c6:	4908      	ldr	r1, [pc, #32]	; (80014e8 <__NVIC_SetPriority+0x50>)
 80014c8:	79fb      	ldrb	r3, [r7, #7]
 80014ca:	f003 030f 	and.w	r3, r3, #15
 80014ce:	3b04      	subs	r3, #4
 80014d0:	0112      	lsls	r2, r2, #4
 80014d2:	b2d2      	uxtb	r2, r2
 80014d4:	440b      	add	r3, r1
 80014d6:	761a      	strb	r2, [r3, #24]
}
 80014d8:	bf00      	nop
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	bc80      	pop	{r7}
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	e000e100 	.word	0xe000e100
 80014e8:	e000ed00 	.word	0xe000ed00

080014ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b089      	sub	sp, #36	; 0x24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	60f8      	str	r0, [r7, #12]
 80014f4:	60b9      	str	r1, [r7, #8]
 80014f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	f003 0307 	and.w	r3, r3, #7
 80014fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	f1c3 0307 	rsb	r3, r3, #7
 8001506:	2b04      	cmp	r3, #4
 8001508:	bf28      	it	cs
 800150a:	2304      	movcs	r3, #4
 800150c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	3304      	adds	r3, #4
 8001512:	2b06      	cmp	r3, #6
 8001514:	d902      	bls.n	800151c <NVIC_EncodePriority+0x30>
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	3b03      	subs	r3, #3
 800151a:	e000      	b.n	800151e <NVIC_EncodePriority+0x32>
 800151c:	2300      	movs	r3, #0
 800151e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001520:	f04f 32ff 	mov.w	r2, #4294967295
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	fa02 f303 	lsl.w	r3, r2, r3
 800152a:	43da      	mvns	r2, r3
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	401a      	ands	r2, r3
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001534:	f04f 31ff 	mov.w	r1, #4294967295
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	fa01 f303 	lsl.w	r3, r1, r3
 800153e:	43d9      	mvns	r1, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001544:	4313      	orrs	r3, r2
         );
}
 8001546:	4618      	mov	r0, r3
 8001548:	3724      	adds	r7, #36	; 0x24
 800154a:	46bd      	mov	sp, r7
 800154c:	bc80      	pop	{r7}
 800154e:	4770      	bx	lr

08001550 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	3b01      	subs	r3, #1
 800155c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001560:	d301      	bcc.n	8001566 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001562:	2301      	movs	r3, #1
 8001564:	e00f      	b.n	8001586 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001566:	4a0a      	ldr	r2, [pc, #40]	; (8001590 <SysTick_Config+0x40>)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	3b01      	subs	r3, #1
 800156c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800156e:	210f      	movs	r1, #15
 8001570:	f04f 30ff 	mov.w	r0, #4294967295
 8001574:	f7ff ff90 	bl	8001498 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001578:	4b05      	ldr	r3, [pc, #20]	; (8001590 <SysTick_Config+0x40>)
 800157a:	2200      	movs	r2, #0
 800157c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800157e:	4b04      	ldr	r3, [pc, #16]	; (8001590 <SysTick_Config+0x40>)
 8001580:	2207      	movs	r2, #7
 8001582:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001584:	2300      	movs	r3, #0
}
 8001586:	4618      	mov	r0, r3
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	e000e010 	.word	0xe000e010

08001594 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f7ff ff2d 	bl	80013fc <__NVIC_SetPriorityGrouping>
}
 80015a2:	bf00      	nop
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b086      	sub	sp, #24
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	4603      	mov	r3, r0
 80015b2:	60b9      	str	r1, [r7, #8]
 80015b4:	607a      	str	r2, [r7, #4]
 80015b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015b8:	2300      	movs	r3, #0
 80015ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015bc:	f7ff ff42 	bl	8001444 <__NVIC_GetPriorityGrouping>
 80015c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	68b9      	ldr	r1, [r7, #8]
 80015c6:	6978      	ldr	r0, [r7, #20]
 80015c8:	f7ff ff90 	bl	80014ec <NVIC_EncodePriority>
 80015cc:	4602      	mov	r2, r0
 80015ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015d2:	4611      	mov	r1, r2
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff ff5f 	bl	8001498 <__NVIC_SetPriority>
}
 80015da:	bf00      	nop
 80015dc:	3718      	adds	r7, #24
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b082      	sub	sp, #8
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	4603      	mov	r3, r0
 80015ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7ff ff35 	bl	8001460 <__NVIC_EnableIRQ>
}
 80015f6:	bf00      	nop
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}

080015fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015fe:	b580      	push	{r7, lr}
 8001600:	b082      	sub	sp, #8
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f7ff ffa2 	bl	8001550 <SysTick_Config>
 800160c:	4603      	mov	r3, r0
}
 800160e:	4618      	mov	r0, r3
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
	...

08001618 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001618:	b480      	push	{r7}
 800161a:	b08b      	sub	sp, #44	; 0x2c
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001622:	2300      	movs	r3, #0
 8001624:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001626:	2300      	movs	r3, #0
 8001628:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800162a:	e127      	b.n	800187c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800162c:	2201      	movs	r2, #1
 800162e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	69fa      	ldr	r2, [r7, #28]
 800163c:	4013      	ands	r3, r2
 800163e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	429a      	cmp	r2, r3
 8001646:	f040 8116 	bne.w	8001876 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	2b12      	cmp	r3, #18
 8001650:	d034      	beq.n	80016bc <HAL_GPIO_Init+0xa4>
 8001652:	2b12      	cmp	r3, #18
 8001654:	d80d      	bhi.n	8001672 <HAL_GPIO_Init+0x5a>
 8001656:	2b02      	cmp	r3, #2
 8001658:	d02b      	beq.n	80016b2 <HAL_GPIO_Init+0x9a>
 800165a:	2b02      	cmp	r3, #2
 800165c:	d804      	bhi.n	8001668 <HAL_GPIO_Init+0x50>
 800165e:	2b00      	cmp	r3, #0
 8001660:	d031      	beq.n	80016c6 <HAL_GPIO_Init+0xae>
 8001662:	2b01      	cmp	r3, #1
 8001664:	d01c      	beq.n	80016a0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001666:	e048      	b.n	80016fa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001668:	2b03      	cmp	r3, #3
 800166a:	d043      	beq.n	80016f4 <HAL_GPIO_Init+0xdc>
 800166c:	2b11      	cmp	r3, #17
 800166e:	d01b      	beq.n	80016a8 <HAL_GPIO_Init+0x90>
          break;
 8001670:	e043      	b.n	80016fa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001672:	4a89      	ldr	r2, [pc, #548]	; (8001898 <HAL_GPIO_Init+0x280>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d026      	beq.n	80016c6 <HAL_GPIO_Init+0xae>
 8001678:	4a87      	ldr	r2, [pc, #540]	; (8001898 <HAL_GPIO_Init+0x280>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d806      	bhi.n	800168c <HAL_GPIO_Init+0x74>
 800167e:	4a87      	ldr	r2, [pc, #540]	; (800189c <HAL_GPIO_Init+0x284>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d020      	beq.n	80016c6 <HAL_GPIO_Init+0xae>
 8001684:	4a86      	ldr	r2, [pc, #536]	; (80018a0 <HAL_GPIO_Init+0x288>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d01d      	beq.n	80016c6 <HAL_GPIO_Init+0xae>
          break;
 800168a:	e036      	b.n	80016fa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800168c:	4a85      	ldr	r2, [pc, #532]	; (80018a4 <HAL_GPIO_Init+0x28c>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d019      	beq.n	80016c6 <HAL_GPIO_Init+0xae>
 8001692:	4a85      	ldr	r2, [pc, #532]	; (80018a8 <HAL_GPIO_Init+0x290>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d016      	beq.n	80016c6 <HAL_GPIO_Init+0xae>
 8001698:	4a84      	ldr	r2, [pc, #528]	; (80018ac <HAL_GPIO_Init+0x294>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d013      	beq.n	80016c6 <HAL_GPIO_Init+0xae>
          break;
 800169e:	e02c      	b.n	80016fa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	623b      	str	r3, [r7, #32]
          break;
 80016a6:	e028      	b.n	80016fa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	3304      	adds	r3, #4
 80016ae:	623b      	str	r3, [r7, #32]
          break;
 80016b0:	e023      	b.n	80016fa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	68db      	ldr	r3, [r3, #12]
 80016b6:	3308      	adds	r3, #8
 80016b8:	623b      	str	r3, [r7, #32]
          break;
 80016ba:	e01e      	b.n	80016fa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	330c      	adds	r3, #12
 80016c2:	623b      	str	r3, [r7, #32]
          break;
 80016c4:	e019      	b.n	80016fa <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d102      	bne.n	80016d4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80016ce:	2304      	movs	r3, #4
 80016d0:	623b      	str	r3, [r7, #32]
          break;
 80016d2:	e012      	b.n	80016fa <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d105      	bne.n	80016e8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016dc:	2308      	movs	r3, #8
 80016de:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	69fa      	ldr	r2, [r7, #28]
 80016e4:	611a      	str	r2, [r3, #16]
          break;
 80016e6:	e008      	b.n	80016fa <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016e8:	2308      	movs	r3, #8
 80016ea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	69fa      	ldr	r2, [r7, #28]
 80016f0:	615a      	str	r2, [r3, #20]
          break;
 80016f2:	e002      	b.n	80016fa <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80016f4:	2300      	movs	r3, #0
 80016f6:	623b      	str	r3, [r7, #32]
          break;
 80016f8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	2bff      	cmp	r3, #255	; 0xff
 80016fe:	d801      	bhi.n	8001704 <HAL_GPIO_Init+0xec>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	e001      	b.n	8001708 <HAL_GPIO_Init+0xf0>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	3304      	adds	r3, #4
 8001708:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	2bff      	cmp	r3, #255	; 0xff
 800170e:	d802      	bhi.n	8001716 <HAL_GPIO_Init+0xfe>
 8001710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	e002      	b.n	800171c <HAL_GPIO_Init+0x104>
 8001716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001718:	3b08      	subs	r3, #8
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	210f      	movs	r1, #15
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	fa01 f303 	lsl.w	r3, r1, r3
 800172a:	43db      	mvns	r3, r3
 800172c:	401a      	ands	r2, r3
 800172e:	6a39      	ldr	r1, [r7, #32]
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	fa01 f303 	lsl.w	r3, r1, r3
 8001736:	431a      	orrs	r2, r3
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001744:	2b00      	cmp	r3, #0
 8001746:	f000 8096 	beq.w	8001876 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800174a:	4b59      	ldr	r3, [pc, #356]	; (80018b0 <HAL_GPIO_Init+0x298>)
 800174c:	699b      	ldr	r3, [r3, #24]
 800174e:	4a58      	ldr	r2, [pc, #352]	; (80018b0 <HAL_GPIO_Init+0x298>)
 8001750:	f043 0301 	orr.w	r3, r3, #1
 8001754:	6193      	str	r3, [r2, #24]
 8001756:	4b56      	ldr	r3, [pc, #344]	; (80018b0 <HAL_GPIO_Init+0x298>)
 8001758:	699b      	ldr	r3, [r3, #24]
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	60bb      	str	r3, [r7, #8]
 8001760:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001762:	4a54      	ldr	r2, [pc, #336]	; (80018b4 <HAL_GPIO_Init+0x29c>)
 8001764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001766:	089b      	lsrs	r3, r3, #2
 8001768:	3302      	adds	r3, #2
 800176a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800176e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001772:	f003 0303 	and.w	r3, r3, #3
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	220f      	movs	r2, #15
 800177a:	fa02 f303 	lsl.w	r3, r2, r3
 800177e:	43db      	mvns	r3, r3
 8001780:	68fa      	ldr	r2, [r7, #12]
 8001782:	4013      	ands	r3, r2
 8001784:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a4b      	ldr	r2, [pc, #300]	; (80018b8 <HAL_GPIO_Init+0x2a0>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d013      	beq.n	80017b6 <HAL_GPIO_Init+0x19e>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a4a      	ldr	r2, [pc, #296]	; (80018bc <HAL_GPIO_Init+0x2a4>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d00d      	beq.n	80017b2 <HAL_GPIO_Init+0x19a>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4a49      	ldr	r2, [pc, #292]	; (80018c0 <HAL_GPIO_Init+0x2a8>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d007      	beq.n	80017ae <HAL_GPIO_Init+0x196>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a48      	ldr	r2, [pc, #288]	; (80018c4 <HAL_GPIO_Init+0x2ac>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d101      	bne.n	80017aa <HAL_GPIO_Init+0x192>
 80017a6:	2303      	movs	r3, #3
 80017a8:	e006      	b.n	80017b8 <HAL_GPIO_Init+0x1a0>
 80017aa:	2304      	movs	r3, #4
 80017ac:	e004      	b.n	80017b8 <HAL_GPIO_Init+0x1a0>
 80017ae:	2302      	movs	r3, #2
 80017b0:	e002      	b.n	80017b8 <HAL_GPIO_Init+0x1a0>
 80017b2:	2301      	movs	r3, #1
 80017b4:	e000      	b.n	80017b8 <HAL_GPIO_Init+0x1a0>
 80017b6:	2300      	movs	r3, #0
 80017b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017ba:	f002 0203 	and.w	r2, r2, #3
 80017be:	0092      	lsls	r2, r2, #2
 80017c0:	4093      	lsls	r3, r2
 80017c2:	68fa      	ldr	r2, [r7, #12]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80017c8:	493a      	ldr	r1, [pc, #232]	; (80018b4 <HAL_GPIO_Init+0x29c>)
 80017ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017cc:	089b      	lsrs	r3, r3, #2
 80017ce:	3302      	adds	r3, #2
 80017d0:	68fa      	ldr	r2, [r7, #12]
 80017d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d006      	beq.n	80017f0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017e2:	4b39      	ldr	r3, [pc, #228]	; (80018c8 <HAL_GPIO_Init+0x2b0>)
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	4938      	ldr	r1, [pc, #224]	; (80018c8 <HAL_GPIO_Init+0x2b0>)
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	4313      	orrs	r3, r2
 80017ec:	600b      	str	r3, [r1, #0]
 80017ee:	e006      	b.n	80017fe <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017f0:	4b35      	ldr	r3, [pc, #212]	; (80018c8 <HAL_GPIO_Init+0x2b0>)
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	69bb      	ldr	r3, [r7, #24]
 80017f6:	43db      	mvns	r3, r3
 80017f8:	4933      	ldr	r1, [pc, #204]	; (80018c8 <HAL_GPIO_Init+0x2b0>)
 80017fa:	4013      	ands	r3, r2
 80017fc:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d006      	beq.n	8001818 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800180a:	4b2f      	ldr	r3, [pc, #188]	; (80018c8 <HAL_GPIO_Init+0x2b0>)
 800180c:	685a      	ldr	r2, [r3, #4]
 800180e:	492e      	ldr	r1, [pc, #184]	; (80018c8 <HAL_GPIO_Init+0x2b0>)
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	4313      	orrs	r3, r2
 8001814:	604b      	str	r3, [r1, #4]
 8001816:	e006      	b.n	8001826 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001818:	4b2b      	ldr	r3, [pc, #172]	; (80018c8 <HAL_GPIO_Init+0x2b0>)
 800181a:	685a      	ldr	r2, [r3, #4]
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	43db      	mvns	r3, r3
 8001820:	4929      	ldr	r1, [pc, #164]	; (80018c8 <HAL_GPIO_Init+0x2b0>)
 8001822:	4013      	ands	r3, r2
 8001824:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d006      	beq.n	8001840 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001832:	4b25      	ldr	r3, [pc, #148]	; (80018c8 <HAL_GPIO_Init+0x2b0>)
 8001834:	689a      	ldr	r2, [r3, #8]
 8001836:	4924      	ldr	r1, [pc, #144]	; (80018c8 <HAL_GPIO_Init+0x2b0>)
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	4313      	orrs	r3, r2
 800183c:	608b      	str	r3, [r1, #8]
 800183e:	e006      	b.n	800184e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001840:	4b21      	ldr	r3, [pc, #132]	; (80018c8 <HAL_GPIO_Init+0x2b0>)
 8001842:	689a      	ldr	r2, [r3, #8]
 8001844:	69bb      	ldr	r3, [r7, #24]
 8001846:	43db      	mvns	r3, r3
 8001848:	491f      	ldr	r1, [pc, #124]	; (80018c8 <HAL_GPIO_Init+0x2b0>)
 800184a:	4013      	ands	r3, r2
 800184c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d006      	beq.n	8001868 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800185a:	4b1b      	ldr	r3, [pc, #108]	; (80018c8 <HAL_GPIO_Init+0x2b0>)
 800185c:	68da      	ldr	r2, [r3, #12]
 800185e:	491a      	ldr	r1, [pc, #104]	; (80018c8 <HAL_GPIO_Init+0x2b0>)
 8001860:	69bb      	ldr	r3, [r7, #24]
 8001862:	4313      	orrs	r3, r2
 8001864:	60cb      	str	r3, [r1, #12]
 8001866:	e006      	b.n	8001876 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001868:	4b17      	ldr	r3, [pc, #92]	; (80018c8 <HAL_GPIO_Init+0x2b0>)
 800186a:	68da      	ldr	r2, [r3, #12]
 800186c:	69bb      	ldr	r3, [r7, #24]
 800186e:	43db      	mvns	r3, r3
 8001870:	4915      	ldr	r1, [pc, #84]	; (80018c8 <HAL_GPIO_Init+0x2b0>)
 8001872:	4013      	ands	r3, r2
 8001874:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001878:	3301      	adds	r3, #1
 800187a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001882:	fa22 f303 	lsr.w	r3, r2, r3
 8001886:	2b00      	cmp	r3, #0
 8001888:	f47f aed0 	bne.w	800162c <HAL_GPIO_Init+0x14>
  }
}
 800188c:	bf00      	nop
 800188e:	372c      	adds	r7, #44	; 0x2c
 8001890:	46bd      	mov	sp, r7
 8001892:	bc80      	pop	{r7}
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	10210000 	.word	0x10210000
 800189c:	10110000 	.word	0x10110000
 80018a0:	10120000 	.word	0x10120000
 80018a4:	10310000 	.word	0x10310000
 80018a8:	10320000 	.word	0x10320000
 80018ac:	10220000 	.word	0x10220000
 80018b0:	40021000 	.word	0x40021000
 80018b4:	40010000 	.word	0x40010000
 80018b8:	40010800 	.word	0x40010800
 80018bc:	40010c00 	.word	0x40010c00
 80018c0:	40011000 	.word	0x40011000
 80018c4:	40011400 	.word	0x40011400
 80018c8:	40010400 	.word	0x40010400

080018cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	460b      	mov	r3, r1
 80018d6:	807b      	strh	r3, [r7, #2]
 80018d8:	4613      	mov	r3, r2
 80018da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018dc:	787b      	ldrb	r3, [r7, #1]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d003      	beq.n	80018ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018e2:	887a      	ldrh	r2, [r7, #2]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80018e8:	e003      	b.n	80018f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80018ea:	887b      	ldrh	r3, [r7, #2]
 80018ec:	041a      	lsls	r2, r3, #16
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	611a      	str	r2, [r3, #16]
}
 80018f2:	bf00      	nop
 80018f4:	370c      	adds	r7, #12
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bc80      	pop	{r7}
 80018fa:	4770      	bx	lr

080018fc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	460b      	mov	r3, r1
 8001906:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	68da      	ldr	r2, [r3, #12]
 800190c:	887b      	ldrh	r3, [r7, #2]
 800190e:	4013      	ands	r3, r2
 8001910:	2b00      	cmp	r3, #0
 8001912:	d003      	beq.n	800191c <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001914:	887a      	ldrh	r2, [r7, #2]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800191a:	e002      	b.n	8001922 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800191c:	887a      	ldrh	r2, [r7, #2]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	611a      	str	r2, [r3, #16]
}
 8001922:	bf00      	nop
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	bc80      	pop	{r7}
 800192a:	4770      	bx	lr

0800192c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	4603      	mov	r3, r0
 8001934:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001936:	4b08      	ldr	r3, [pc, #32]	; (8001958 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001938:	695a      	ldr	r2, [r3, #20]
 800193a:	88fb      	ldrh	r3, [r7, #6]
 800193c:	4013      	ands	r3, r2
 800193e:	2b00      	cmp	r3, #0
 8001940:	d006      	beq.n	8001950 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001942:	4a05      	ldr	r2, [pc, #20]	; (8001958 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001944:	88fb      	ldrh	r3, [r7, #6]
 8001946:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001948:	88fb      	ldrh	r3, [r7, #6]
 800194a:	4618      	mov	r0, r3
 800194c:	f000 f806 	bl	800195c <HAL_GPIO_EXTI_Callback>
  }
}
 8001950:	bf00      	nop
 8001952:	3708      	adds	r7, #8
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	40010400 	.word	0x40010400

0800195c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	4603      	mov	r3, r0
 8001964:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001966:	bf00      	nop
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	bc80      	pop	{r7}
 800196e:	4770      	bx	lr

08001970 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001970:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001972:	b08b      	sub	sp, #44	; 0x2c
 8001974:	af06      	add	r7, sp, #24
 8001976:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d101      	bne.n	8001982 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e0d3      	b.n	8001b2a <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8001988:	b2db      	uxtb	r3, r3
 800198a:	2b00      	cmp	r3, #0
 800198c:	d106      	bne.n	800199c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2200      	movs	r2, #0
 8001992:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f005 fc34 	bl	8007204 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2203      	movs	r2, #3
 80019a0:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f002 fb2a 	bl	8004002 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	603b      	str	r3, [r7, #0]
 80019b4:	687e      	ldr	r6, [r7, #4]
 80019b6:	466d      	mov	r5, sp
 80019b8:	f106 0410 	add.w	r4, r6, #16
 80019bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019c0:	6823      	ldr	r3, [r4, #0]
 80019c2:	602b      	str	r3, [r5, #0]
 80019c4:	1d33      	adds	r3, r6, #4
 80019c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019c8:	6838      	ldr	r0, [r7, #0]
 80019ca:	f002 faf3 	bl	8003fb4 <USB_CoreInit>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d005      	beq.n	80019e0 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2202      	movs	r2, #2
 80019d8:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e0a4      	b.n	8001b2a <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2100      	movs	r1, #0
 80019e6:	4618      	mov	r0, r3
 80019e8:	f002 fb27 	bl	800403a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019ec:	2300      	movs	r3, #0
 80019ee:	73fb      	strb	r3, [r7, #15]
 80019f0:	e035      	b.n	8001a5e <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80019f2:	7bfb      	ldrb	r3, [r7, #15]
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	015b      	lsls	r3, r3, #5
 80019f8:	4413      	add	r3, r2
 80019fa:	3329      	adds	r3, #41	; 0x29
 80019fc:	2201      	movs	r2, #1
 80019fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001a00:	7bfb      	ldrb	r3, [r7, #15]
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	015b      	lsls	r3, r3, #5
 8001a06:	4413      	add	r3, r2
 8001a08:	3328      	adds	r3, #40	; 0x28
 8001a0a:	7bfa      	ldrb	r2, [r7, #15]
 8001a0c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001a0e:	7bfb      	ldrb	r3, [r7, #15]
 8001a10:	7bfa      	ldrb	r2, [r7, #15]
 8001a12:	b291      	uxth	r1, r2
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	015b      	lsls	r3, r3, #5
 8001a18:	4413      	add	r3, r2
 8001a1a:	3336      	adds	r3, #54	; 0x36
 8001a1c:	460a      	mov	r2, r1
 8001a1e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001a20:	7bfb      	ldrb	r3, [r7, #15]
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	015b      	lsls	r3, r3, #5
 8001a26:	4413      	add	r3, r2
 8001a28:	332b      	adds	r3, #43	; 0x2b
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001a2e:	7bfb      	ldrb	r3, [r7, #15]
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	015b      	lsls	r3, r3, #5
 8001a34:	4413      	add	r3, r2
 8001a36:	3338      	adds	r3, #56	; 0x38
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001a3c:	7bfb      	ldrb	r3, [r7, #15]
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	015b      	lsls	r3, r3, #5
 8001a42:	4413      	add	r3, r2
 8001a44:	333c      	adds	r3, #60	; 0x3c
 8001a46:	2200      	movs	r2, #0
 8001a48:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001a4a:	7bfb      	ldrb	r3, [r7, #15]
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	3302      	adds	r3, #2
 8001a50:	015b      	lsls	r3, r3, #5
 8001a52:	4413      	add	r3, r2
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a58:	7bfb      	ldrb	r3, [r7, #15]
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	73fb      	strb	r3, [r7, #15]
 8001a5e:	7bfa      	ldrb	r2, [r7, #15]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d3c4      	bcc.n	80019f2 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a68:	2300      	movs	r3, #0
 8001a6a:	73fb      	strb	r3, [r7, #15]
 8001a6c:	e031      	b.n	8001ad2 <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001a6e:	7bfb      	ldrb	r3, [r7, #15]
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	015b      	lsls	r3, r3, #5
 8001a74:	4413      	add	r3, r2
 8001a76:	f203 1329 	addw	r3, r3, #297	; 0x129
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001a7e:	7bfb      	ldrb	r3, [r7, #15]
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	015b      	lsls	r3, r3, #5
 8001a84:	4413      	add	r3, r2
 8001a86:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001a8a:	7bfa      	ldrb	r2, [r7, #15]
 8001a8c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001a8e:	7bfb      	ldrb	r3, [r7, #15]
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	015b      	lsls	r3, r3, #5
 8001a94:	4413      	add	r3, r2
 8001a96:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001a9e:	7bfb      	ldrb	r3, [r7, #15]
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	015b      	lsls	r3, r3, #5
 8001aa4:	4413      	add	r3, r2
 8001aa6:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001aaa:	2200      	movs	r2, #0
 8001aac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001aae:	7bfb      	ldrb	r3, [r7, #15]
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	015b      	lsls	r3, r3, #5
 8001ab4:	4413      	add	r3, r2
 8001ab6:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001aba:	2200      	movs	r2, #0
 8001abc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001abe:	7bfb      	ldrb	r3, [r7, #15]
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	330a      	adds	r3, #10
 8001ac4:	015b      	lsls	r3, r3, #5
 8001ac6:	4413      	add	r3, r2
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001acc:	7bfb      	ldrb	r3, [r7, #15]
 8001ace:	3301      	adds	r3, #1
 8001ad0:	73fb      	strb	r3, [r7, #15]
 8001ad2:	7bfa      	ldrb	r2, [r7, #15]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d3c8      	bcc.n	8001a6e <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	603b      	str	r3, [r7, #0]
 8001ae2:	687e      	ldr	r6, [r7, #4]
 8001ae4:	466d      	mov	r5, sp
 8001ae6:	f106 0410 	add.w	r4, r6, #16
 8001aea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001aec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001aee:	6823      	ldr	r3, [r4, #0]
 8001af0:	602b      	str	r3, [r5, #0]
 8001af2:	1d33      	adds	r3, r6, #4
 8001af4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001af6:	6838      	ldr	r0, [r7, #0]
 8001af8:	f002 faab 	bl	8004052 <USB_DevInit>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d005      	beq.n	8001b0e <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2202      	movs	r2, #2
 8001b06:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e00d      	b.n	8001b2a <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2200      	movs	r2, #0
 8001b12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2201      	movs	r2, #1
 8001b1a:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f003 f969 	bl	8004dfa <USB_DevDisconnect>

  return HAL_OK;
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3714      	adds	r7, #20
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b32 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b082      	sub	sp, #8
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d101      	bne.n	8001b48 <HAL_PCD_Start+0x16>
 8001b44:	2302      	movs	r3, #2
 8001b46:	e016      	b.n	8001b76 <HAL_PCD_Start+0x44>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001b50:	2101      	movs	r1, #1
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f005 fdaf 	bl	80076b6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f003 f942 	bl	8004de6 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f002 fa34 	bl	8003fd4 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b082      	sub	sp, #8
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d101      	bne.n	8001b94 <HAL_PCD_Stop+0x16>
 8001b90:	2302      	movs	r3, #2
 8001b92:	e020      	b.n	8001bd6 <HAL_PCD_Stop+0x58>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2201      	movs	r2, #1
 8001b98:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  __HAL_PCD_DISABLE(hpcd);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f002 fa2e 	bl	8004002 <USB_DisableGlobalInt>

  if (USB_StopDevice(hpcd->Instance) != HAL_OK)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4618      	mov	r0, r3
 8001bac:	f003 f8f2 	bl	8004d94 <USB_StopDevice>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d005      	beq.n	8001bc2 <HAL_PCD_Stop+0x44>
  {
    __HAL_UNLOCK(hpcd);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
    return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e009      	b.n	8001bd6 <HAL_PCD_Stop+0x58>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f003 f917 	bl	8004dfa <USB_DevDisconnect>
  __HAL_UNLOCK(hpcd);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b082      	sub	sp, #8
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f003 f90f 	bl	8004e0e <USB_ReadInterrupts>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bf6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001bfa:	d102      	bne.n	8001c02 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f000 fa9d 	bl	800213c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f003 f901 	bl	8004e0e <USB_ReadInterrupts>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c16:	d112      	bne.n	8001c3e <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c20:	b29a      	uxth	r2, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c2a:	b292      	uxth	r2, r2
 8001c2c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f005 fb80 	bl	8007336 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001c36:	2100      	movs	r1, #0
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f000 f8de 	bl	8001dfa <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f003 f8e3 	bl	8004e0e <USB_ReadInterrupts>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001c52:	d10b      	bne.n	8001c6c <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c5c:	b29a      	uxth	r2, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001c66:	b292      	uxth	r2, r2
 8001c68:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f003 f8cc 	bl	8004e0e <USB_ReadInterrupts>
 8001c76:	4603      	mov	r3, r0
 8001c78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c80:	d10b      	bne.n	8001c9a <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c8a:	b29a      	uxth	r2, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c94:	b292      	uxth	r2, r2
 8001c96:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f003 f8b5 	bl	8004e0e <USB_ReadInterrupts>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001caa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cae:	d126      	bne.n	8001cfe <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001cb8:	b29a      	uxth	r2, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f022 0204 	bic.w	r2, r2, #4
 8001cc2:	b292      	uxth	r2, r2
 8001cc4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001cd0:	b29a      	uxth	r2, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f022 0208 	bic.w	r2, r2, #8
 8001cda:	b292      	uxth	r2, r2
 8001cdc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f005 fb61 	bl	80073a8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001cee:	b29a      	uxth	r2, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001cf8:	b292      	uxth	r2, r2
 8001cfa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f003 f883 	bl	8004e0e <USB_ReadInterrupts>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d12:	d13d      	bne.n	8001d90 <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d1c:	b29a      	uxth	r2, r3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f042 0208 	orr.w	r2, r2, #8
 8001d26:	b292      	uxth	r2, r2
 8001d28:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d34:	b29a      	uxth	r2, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d3e:	b292      	uxth	r2, r2
 8001d40:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d4c:	b29a      	uxth	r2, r3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f042 0204 	orr.w	r2, r2, #4
 8001d56:	b292      	uxth	r2, r2
 8001d58:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f003 f854 	bl	8004e0e <USB_ReadInterrupts>
 8001d66:	4603      	mov	r3, r0
 8001d68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d70:	d10b      	bne.n	8001d8a <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d7a:	b29a      	uxth	r2, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001d84:	b292      	uxth	r2, r2
 8001d86:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f005 faf2 	bl	8007374 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f003 f83a 	bl	8004e0e <USB_ReadInterrupts>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001da0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001da4:	d10e      	bne.n	8001dc4 <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001dae:	b29a      	uxth	r2, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001db8:	b292      	uxth	r2, r2
 8001dba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f005 faab 	bl	800731a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f003 f820 	bl	8004e0e <USB_ReadInterrupts>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001dd8:	d10b      	bne.n	8001df2 <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001de2:	b29a      	uxth	r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001dec:	b292      	uxth	r2, r2
 8001dee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001df2:	bf00      	nop
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	b082      	sub	sp, #8
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
 8001e02:	460b      	mov	r3, r1
 8001e04:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d101      	bne.n	8001e14 <HAL_PCD_SetAddress+0x1a>
 8001e10:	2302      	movs	r3, #2
 8001e12:	e013      	b.n	8001e3c <HAL_PCD_SetAddress+0x42>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2201      	movs	r2, #1
 8001e18:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	78fa      	ldrb	r2, [r7, #3]
 8001e20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	78fa      	ldrb	r2, [r7, #3]
 8001e2a:	4611      	mov	r1, r2
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f002 ffc7 	bl	8004dc0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001e3a:	2300      	movs	r3, #0
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3708      	adds	r7, #8
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}

08001e44 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	4608      	mov	r0, r1
 8001e4e:	4611      	mov	r1, r2
 8001e50:	461a      	mov	r2, r3
 8001e52:	4603      	mov	r3, r0
 8001e54:	70fb      	strb	r3, [r7, #3]
 8001e56:	460b      	mov	r3, r1
 8001e58:	803b      	strh	r3, [r7, #0]
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	da0b      	bge.n	8001e82 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e6a:	78fb      	ldrb	r3, [r7, #3]
 8001e6c:	f003 0307 	and.w	r3, r3, #7
 8001e70:	015b      	lsls	r3, r3, #5
 8001e72:	3328      	adds	r3, #40	; 0x28
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	4413      	add	r3, r2
 8001e78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	705a      	strb	r2, [r3, #1]
 8001e80:	e00b      	b.n	8001e9a <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e82:	78fb      	ldrb	r3, [r7, #3]
 8001e84:	f003 0307 	and.w	r3, r3, #7
 8001e88:	015b      	lsls	r3, r3, #5
 8001e8a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	4413      	add	r3, r2
 8001e92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2200      	movs	r2, #0
 8001e98:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001e9a:	78fb      	ldrb	r3, [r7, #3]
 8001e9c:	f003 0307 	and.w	r3, r3, #7
 8001ea0:	b2da      	uxtb	r2, r3
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001ea6:	883a      	ldrh	r2, [r7, #0]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	78ba      	ldrb	r2, [r7, #2]
 8001eb0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	785b      	ldrb	r3, [r3, #1]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d004      	beq.n	8001ec4 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	b29a      	uxth	r2, r3
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001ec4:	78bb      	ldrb	r3, [r7, #2]
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d102      	bne.n	8001ed0 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d101      	bne.n	8001ede <HAL_PCD_EP_Open+0x9a>
 8001eda:	2302      	movs	r3, #2
 8001edc:	e00e      	b.n	8001efc <HAL_PCD_EP_Open+0xb8>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	68f9      	ldr	r1, [r7, #12]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f002 f8d5 	bl	800409c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8001efa:	7afb      	ldrb	r3, [r7, #11]
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3710      	adds	r7, #16
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b086      	sub	sp, #24
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	60f8      	str	r0, [r7, #12]
 8001f0c:	607a      	str	r2, [r7, #4]
 8001f0e:	603b      	str	r3, [r7, #0]
 8001f10:	460b      	mov	r3, r1
 8001f12:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f14:	7afb      	ldrb	r3, [r7, #11]
 8001f16:	f003 0307 	and.w	r3, r3, #7
 8001f1a:	015b      	lsls	r3, r3, #5
 8001f1c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001f20:	68fa      	ldr	r2, [r7, #12]
 8001f22:	4413      	add	r3, r2
 8001f24:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	683a      	ldr	r2, [r7, #0]
 8001f30:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	2200      	movs	r2, #0
 8001f36:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f3e:	7afb      	ldrb	r3, [r7, #11]
 8001f40:	f003 0307 	and.w	r3, r3, #7
 8001f44:	b2da      	uxtb	r2, r3
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f4a:	7afb      	ldrb	r3, [r7, #11]
 8001f4c:	f003 0307 	and.w	r3, r3, #7
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d106      	bne.n	8001f62 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	6979      	ldr	r1, [r7, #20]
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f002 fb8c 	bl	8004678 <USB_EPStartXfer>
 8001f60:	e005      	b.n	8001f6e <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	6979      	ldr	r1, [r7, #20]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f002 fb85 	bl	8004678 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3718      	adds	r7, #24
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b086      	sub	sp, #24
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	607a      	str	r2, [r7, #4]
 8001f82:	603b      	str	r3, [r7, #0]
 8001f84:	460b      	mov	r3, r1
 8001f86:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f88:	7afb      	ldrb	r3, [r7, #11]
 8001f8a:	f003 0307 	and.w	r3, r3, #7
 8001f8e:	015b      	lsls	r3, r3, #5
 8001f90:	3328      	adds	r3, #40	; 0x28
 8001f92:	68fa      	ldr	r2, [r7, #12]
 8001f94:	4413      	add	r3, r2
 8001f96:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	683a      	ldr	r2, [r7, #0]
 8001fa2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	2201      	movs	r2, #1
 8001fae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fb0:	7afb      	ldrb	r3, [r7, #11]
 8001fb2:	f003 0307 	and.w	r3, r3, #7
 8001fb6:	b2da      	uxtb	r2, r3
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001fbc:	7afb      	ldrb	r3, [r7, #11]
 8001fbe:	f003 0307 	and.w	r3, r3, #7
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d106      	bne.n	8001fd4 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	6979      	ldr	r1, [r7, #20]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f002 fb53 	bl	8004678 <USB_EPStartXfer>
 8001fd2:	e005      	b.n	8001fe0 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	6979      	ldr	r1, [r7, #20]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f002 fb4c 	bl	8004678 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3718      	adds	r7, #24
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fea:	b580      	push	{r7, lr}
 8001fec:	b084      	sub	sp, #16
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001ff6:	78fb      	ldrb	r3, [r7, #3]
 8001ff8:	f003 0207 	and.w	r2, r3, #7
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	429a      	cmp	r2, r3
 8002002:	d901      	bls.n	8002008 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e046      	b.n	8002096 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002008:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800200c:	2b00      	cmp	r3, #0
 800200e:	da0b      	bge.n	8002028 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002010:	78fb      	ldrb	r3, [r7, #3]
 8002012:	f003 0307 	and.w	r3, r3, #7
 8002016:	015b      	lsls	r3, r3, #5
 8002018:	3328      	adds	r3, #40	; 0x28
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	4413      	add	r3, r2
 800201e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2201      	movs	r2, #1
 8002024:	705a      	strb	r2, [r3, #1]
 8002026:	e009      	b.n	800203c <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002028:	78fb      	ldrb	r3, [r7, #3]
 800202a:	015b      	lsls	r3, r3, #5
 800202c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	4413      	add	r3, r2
 8002034:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2200      	movs	r2, #0
 800203a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2201      	movs	r2, #1
 8002040:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002042:	78fb      	ldrb	r3, [r7, #3]
 8002044:	f003 0307 	and.w	r3, r3, #7
 8002048:	b2da      	uxtb	r2, r3
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002054:	2b01      	cmp	r3, #1
 8002056:	d101      	bne.n	800205c <HAL_PCD_EP_SetStall+0x72>
 8002058:	2302      	movs	r3, #2
 800205a:	e01c      	b.n	8002096 <HAL_PCD_EP_SetStall+0xac>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2201      	movs	r2, #1
 8002060:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	68f9      	ldr	r1, [r7, #12]
 800206a:	4618      	mov	r0, r3
 800206c:	f002 fdbc 	bl	8004be8 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002070:	78fb      	ldrb	r3, [r7, #3]
 8002072:	f003 0307 	and.w	r3, r3, #7
 8002076:	2b00      	cmp	r3, #0
 8002078:	d108      	bne.n	800208c <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8002084:	4619      	mov	r1, r3
 8002086:	4610      	mov	r0, r2
 8002088:	f002 fed0 	bl	8004e2c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8002094:	2300      	movs	r3, #0
}
 8002096:	4618      	mov	r0, r3
 8002098:	3710      	adds	r7, #16
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}

0800209e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800209e:	b580      	push	{r7, lr}
 80020a0:	b084      	sub	sp, #16
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
 80020a6:	460b      	mov	r3, r1
 80020a8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80020aa:	78fb      	ldrb	r3, [r7, #3]
 80020ac:	f003 020f 	and.w	r2, r3, #15
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d901      	bls.n	80020bc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e03a      	b.n	8002132 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80020bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	da0b      	bge.n	80020dc <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020c4:	78fb      	ldrb	r3, [r7, #3]
 80020c6:	f003 0307 	and.w	r3, r3, #7
 80020ca:	015b      	lsls	r3, r3, #5
 80020cc:	3328      	adds	r3, #40	; 0x28
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	4413      	add	r3, r2
 80020d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2201      	movs	r2, #1
 80020d8:	705a      	strb	r2, [r3, #1]
 80020da:	e00b      	b.n	80020f4 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020dc:	78fb      	ldrb	r3, [r7, #3]
 80020de:	f003 0307 	and.w	r3, r3, #7
 80020e2:	015b      	lsls	r3, r3, #5
 80020e4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	4413      	add	r3, r2
 80020ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2200      	movs	r2, #0
 80020f2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2200      	movs	r2, #0
 80020f8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020fa:	78fb      	ldrb	r3, [r7, #3]
 80020fc:	f003 0307 	and.w	r3, r3, #7
 8002100:	b2da      	uxtb	r2, r3
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800210c:	2b01      	cmp	r3, #1
 800210e:	d101      	bne.n	8002114 <HAL_PCD_EP_ClrStall+0x76>
 8002110:	2302      	movs	r3, #2
 8002112:	e00e      	b.n	8002132 <HAL_PCD_EP_ClrStall+0x94>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	68f9      	ldr	r1, [r7, #12]
 8002122:	4618      	mov	r0, r3
 8002124:	f002 fda2 	bl	8004c6c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8002130:	2300      	movs	r3, #0
}
 8002132:	4618      	mov	r0, r3
 8002134:	3710      	adds	r7, #16
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
	...

0800213c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800213c:	b590      	push	{r4, r7, lr}
 800213e:	b089      	sub	sp, #36	; 0x24
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002144:	e282      	b.n	800264c <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800214e:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002150:	8afb      	ldrh	r3, [r7, #22]
 8002152:	b2db      	uxtb	r3, r3
 8002154:	f003 030f 	and.w	r3, r3, #15
 8002158:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 800215a:	7d7b      	ldrb	r3, [r7, #21]
 800215c:	2b00      	cmp	r3, #0
 800215e:	f040 8142 	bne.w	80023e6 <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002162:	8afb      	ldrh	r3, [r7, #22]
 8002164:	f003 0310 	and.w	r3, r3, #16
 8002168:	2b00      	cmp	r3, #0
 800216a:	d151      	bne.n	8002210 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	881b      	ldrh	r3, [r3, #0]
 8002172:	b29b      	uxth	r3, r3
 8002174:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002178:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800217c:	b29c      	uxth	r4, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8002186:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800218a:	b29b      	uxth	r3, r3
 800218c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	3328      	adds	r3, #40	; 0x28
 8002192:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800219c:	b29b      	uxth	r3, r3
 800219e:	461a      	mov	r2, r3
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	00db      	lsls	r3, r3, #3
 80021a6:	4413      	add	r3, r2
 80021a8:	3302      	adds	r3, #2
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	6812      	ldr	r2, [r2, #0]
 80021b0:	4413      	add	r3, r2
 80021b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021b6:	881b      	ldrh	r3, [r3, #0]
 80021b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	695a      	ldr	r2, [r3, #20]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	69db      	ldr	r3, [r3, #28]
 80021c8:	441a      	add	r2, r3
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80021ce:	2100      	movs	r1, #0
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f005 f88b 	bl	80072ec <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	2b00      	cmp	r3, #0
 80021e0:	f000 8234 	beq.w	800264c <PCD_EP_ISR_Handler+0x510>
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	699b      	ldr	r3, [r3, #24]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	f040 822f 	bne.w	800264c <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80021fa:	b2da      	uxtb	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	b292      	uxth	r2, r2
 8002202:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800220e:	e21d      	b.n	800264c <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002216:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	881b      	ldrh	r3, [r3, #0]
 800221e:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002220:	8a7b      	ldrh	r3, [r7, #18]
 8002222:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002226:	2b00      	cmp	r3, #0
 8002228:	d033      	beq.n	8002292 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002232:	b29b      	uxth	r3, r3
 8002234:	461a      	mov	r2, r3
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	00db      	lsls	r3, r3, #3
 800223c:	4413      	add	r3, r2
 800223e:	3306      	adds	r3, #6
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	6812      	ldr	r2, [r2, #0]
 8002246:	4413      	add	r3, r2
 8002248:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800224c:	881b      	ldrh	r3, [r3, #0]
 800224e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6818      	ldr	r0, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002268:	b29b      	uxth	r3, r3
 800226a:	f002 fe2e 	bl	8004eca <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	881b      	ldrh	r3, [r3, #0]
 8002274:	b29a      	uxth	r2, r3
 8002276:	f640 738f 	movw	r3, #3983	; 0xf8f
 800227a:	4013      	ands	r3, r2
 800227c:	b29c      	uxth	r4, r3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8002286:	b292      	uxth	r2, r2
 8002288:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f005 f804 	bl	8007298 <HAL_PCD_SetupStageCallback>
 8002290:	e1dc      	b.n	800264c <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002292:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002296:	2b00      	cmp	r3, #0
 8002298:	f280 81d8 	bge.w	800264c <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	881b      	ldrh	r3, [r3, #0]
 80022a2:	b29a      	uxth	r2, r3
 80022a4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80022a8:	4013      	ands	r3, r2
 80022aa:	b29c      	uxth	r4, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80022b4:	b292      	uxth	r2, r2
 80022b6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	461a      	mov	r2, r3
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	00db      	lsls	r3, r3, #3
 80022ca:	4413      	add	r3, r2
 80022cc:	3306      	adds	r3, #6
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	6812      	ldr	r2, [r2, #0]
 80022d4:	4413      	add	r3, r2
 80022d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022da:	881b      	ldrh	r3, [r3, #0]
 80022dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	69db      	ldr	r3, [r3, #28]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d019      	beq.n	8002320 <PCD_EP_ISR_Handler+0x1e4>
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	695b      	ldr	r3, [r3, #20]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d015      	beq.n	8002320 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6818      	ldr	r0, [r3, #0]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	6959      	ldr	r1, [r3, #20]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002304:	b29b      	uxth	r3, r3
 8002306:	f002 fde0 	bl	8004eca <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	695a      	ldr	r2, [r3, #20]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	69db      	ldr	r3, [r3, #28]
 8002312:	441a      	add	r2, r3
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002318:	2100      	movs	r1, #0
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f004 ffce 	bl	80072bc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	461c      	mov	r4, r3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800232e:	b29b      	uxth	r3, r3
 8002330:	441c      	add	r4, r3
 8002332:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 8002336:	461c      	mov	r4, r3
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	691b      	ldr	r3, [r3, #16]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d10e      	bne.n	800235e <PCD_EP_ISR_Handler+0x222>
 8002340:	8823      	ldrh	r3, [r4, #0]
 8002342:	b29b      	uxth	r3, r3
 8002344:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002348:	b29b      	uxth	r3, r3
 800234a:	8023      	strh	r3, [r4, #0]
 800234c:	8823      	ldrh	r3, [r4, #0]
 800234e:	b29b      	uxth	r3, r3
 8002350:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002354:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002358:	b29b      	uxth	r3, r3
 800235a:	8023      	strh	r3, [r4, #0]
 800235c:	e02d      	b.n	80023ba <PCD_EP_ISR_Handler+0x27e>
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	691b      	ldr	r3, [r3, #16]
 8002362:	2b3e      	cmp	r3, #62	; 0x3e
 8002364:	d812      	bhi.n	800238c <PCD_EP_ISR_Handler+0x250>
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	085b      	lsrs	r3, r3, #1
 800236c:	61bb      	str	r3, [r7, #24]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	2b00      	cmp	r3, #0
 8002378:	d002      	beq.n	8002380 <PCD_EP_ISR_Handler+0x244>
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	3301      	adds	r3, #1
 800237e:	61bb      	str	r3, [r7, #24]
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	b29b      	uxth	r3, r3
 8002384:	029b      	lsls	r3, r3, #10
 8002386:	b29b      	uxth	r3, r3
 8002388:	8023      	strh	r3, [r4, #0]
 800238a:	e016      	b.n	80023ba <PCD_EP_ISR_Handler+0x27e>
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	691b      	ldr	r3, [r3, #16]
 8002390:	095b      	lsrs	r3, r3, #5
 8002392:	61bb      	str	r3, [r7, #24]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	691b      	ldr	r3, [r3, #16]
 8002398:	f003 031f 	and.w	r3, r3, #31
 800239c:	2b00      	cmp	r3, #0
 800239e:	d102      	bne.n	80023a6 <PCD_EP_ISR_Handler+0x26a>
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	3b01      	subs	r3, #1
 80023a4:	61bb      	str	r3, [r7, #24]
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	029b      	lsls	r3, r3, #10
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	881b      	ldrh	r3, [r3, #0]
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80023c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023ca:	b29c      	uxth	r4, r3
 80023cc:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80023d0:	b29c      	uxth	r4, r3
 80023d2:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80023d6:	b29c      	uxth	r4, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	4ba2      	ldr	r3, [pc, #648]	; (8002668 <PCD_EP_ISR_Handler+0x52c>)
 80023de:	4323      	orrs	r3, r4
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	8013      	strh	r3, [r2, #0]
 80023e4:	e132      	b.n	800264c <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	461a      	mov	r2, r3
 80023ec:	7d7b      	ldrb	r3, [r7, #21]
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	4413      	add	r3, r2
 80023f2:	881b      	ldrh	r3, [r3, #0]
 80023f4:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80023f6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	f280 80d1 	bge.w	80025a2 <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	461a      	mov	r2, r3
 8002406:	7d7b      	ldrb	r3, [r7, #21]
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	4413      	add	r3, r2
 800240c:	881b      	ldrh	r3, [r3, #0]
 800240e:	b29a      	uxth	r2, r3
 8002410:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002414:	4013      	ands	r3, r2
 8002416:	b29c      	uxth	r4, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	461a      	mov	r2, r3
 800241e:	7d7b      	ldrb	r3, [r7, #21]
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	4413      	add	r3, r2
 8002424:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8002428:	b292      	uxth	r2, r2
 800242a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800242c:	7d7b      	ldrb	r3, [r7, #21]
 800242e:	015b      	lsls	r3, r3, #5
 8002430:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	4413      	add	r3, r2
 8002438:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	7b1b      	ldrb	r3, [r3, #12]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d121      	bne.n	8002486 <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800244a:	b29b      	uxth	r3, r3
 800244c:	461a      	mov	r2, r3
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	00db      	lsls	r3, r3, #3
 8002454:	4413      	add	r3, r2
 8002456:	3306      	adds	r3, #6
 8002458:	005b      	lsls	r3, r3, #1
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	6812      	ldr	r2, [r2, #0]
 800245e:	4413      	add	r3, r2
 8002460:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002464:	881b      	ldrh	r3, [r3, #0]
 8002466:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800246a:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 800246c:	8bfb      	ldrh	r3, [r7, #30]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d072      	beq.n	8002558 <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6818      	ldr	r0, [r3, #0]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6959      	ldr	r1, [r3, #20]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	88da      	ldrh	r2, [r3, #6]
 800247e:	8bfb      	ldrh	r3, [r7, #30]
 8002480:	f002 fd23 	bl	8004eca <USB_ReadPMA>
 8002484:	e068      	b.n	8002558 <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	461a      	mov	r2, r3
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	4413      	add	r3, r2
 8002494:	881b      	ldrh	r3, [r3, #0]
 8002496:	b29b      	uxth	r3, r3
 8002498:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d021      	beq.n	80024e4 <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	461a      	mov	r2, r3
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	00db      	lsls	r3, r3, #3
 80024b2:	4413      	add	r3, r2
 80024b4:	3302      	adds	r3, #2
 80024b6:	005b      	lsls	r3, r3, #1
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	6812      	ldr	r2, [r2, #0]
 80024bc:	4413      	add	r3, r2
 80024be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024c2:	881b      	ldrh	r3, [r3, #0]
 80024c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024c8:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80024ca:	8bfb      	ldrh	r3, [r7, #30]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d02a      	beq.n	8002526 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6818      	ldr	r0, [r3, #0]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6959      	ldr	r1, [r3, #20]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	891a      	ldrh	r2, [r3, #8]
 80024dc:	8bfb      	ldrh	r3, [r7, #30]
 80024de:	f002 fcf4 	bl	8004eca <USB_ReadPMA>
 80024e2:	e020      	b.n	8002526 <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	461a      	mov	r2, r3
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	00db      	lsls	r3, r3, #3
 80024f6:	4413      	add	r3, r2
 80024f8:	3306      	adds	r3, #6
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	6812      	ldr	r2, [r2, #0]
 8002500:	4413      	add	r3, r2
 8002502:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002506:	881b      	ldrh	r3, [r3, #0]
 8002508:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800250c:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 800250e:	8bfb      	ldrh	r3, [r7, #30]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d008      	beq.n	8002526 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6818      	ldr	r0, [r3, #0]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	6959      	ldr	r1, [r3, #20]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	895a      	ldrh	r2, [r3, #10]
 8002520:	8bfb      	ldrh	r3, [r7, #30]
 8002522:	f002 fcd2 	bl	8004eca <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	461a      	mov	r2, r3
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	4413      	add	r3, r2
 8002534:	881b      	ldrh	r3, [r3, #0]
 8002536:	b29b      	uxth	r3, r3
 8002538:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800253c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002540:	b29c      	uxth	r4, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	461a      	mov	r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	441a      	add	r2, r3
 8002550:	4b46      	ldr	r3, [pc, #280]	; (800266c <PCD_EP_ISR_Handler+0x530>)
 8002552:	4323      	orrs	r3, r4
 8002554:	b29b      	uxth	r3, r3
 8002556:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	69da      	ldr	r2, [r3, #28]
 800255c:	8bfb      	ldrh	r3, [r7, #30]
 800255e:	441a      	add	r2, r3
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	695a      	ldr	r2, [r3, #20]
 8002568:	8bfb      	ldrh	r3, [r7, #30]
 800256a:	441a      	add	r2, r3
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	699b      	ldr	r3, [r3, #24]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d004      	beq.n	8002582 <PCD_EP_ISR_Handler+0x446>
 8002578:	8bfa      	ldrh	r2, [r7, #30]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	429a      	cmp	r2, r3
 8002580:	d206      	bcs.n	8002590 <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	4619      	mov	r1, r3
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f004 fe97 	bl	80072bc <HAL_PCD_DataOutStageCallback>
 800258e:	e008      	b.n	80025a2 <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	7819      	ldrb	r1, [r3, #0]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	695a      	ldr	r2, [r3, #20]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	699b      	ldr	r3, [r3, #24]
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f7ff fcb1 	bl	8001f04 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80025a2:	8a7b      	ldrh	r3, [r7, #18]
 80025a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d04f      	beq.n	800264c <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 80025ac:	7d7b      	ldrb	r3, [r7, #21]
 80025ae:	015b      	lsls	r3, r3, #5
 80025b0:	3328      	adds	r3, #40	; 0x28
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	4413      	add	r3, r2
 80025b6:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	461a      	mov	r2, r3
 80025be:	7d7b      	ldrb	r3, [r7, #21]
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	4413      	add	r3, r2
 80025c4:	881b      	ldrh	r3, [r3, #0]
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80025cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025d0:	b29c      	uxth	r4, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	461a      	mov	r2, r3
 80025d8:	7d7b      	ldrb	r3, [r7, #21]
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	441a      	add	r2, r3
 80025de:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 80025e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	461a      	mov	r2, r3
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	00db      	lsls	r3, r3, #3
 80025fc:	4413      	add	r3, r2
 80025fe:	3302      	adds	r3, #2
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	6812      	ldr	r2, [r2, #0]
 8002606:	4413      	add	r3, r2
 8002608:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800260c:	881b      	ldrh	r3, [r3, #0]
 800260e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	695a      	ldr	r2, [r3, #20]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	69db      	ldr	r3, [r3, #28]
 800261e:	441a      	add	r2, r3
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	699b      	ldr	r3, [r3, #24]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d106      	bne.n	800263a <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	4619      	mov	r1, r3
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f004 fe5a 	bl	80072ec <HAL_PCD_DataInStageCallback>
 8002638:	e008      	b.n	800264c <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	7819      	ldrb	r1, [r3, #0]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	695a      	ldr	r2, [r3, #20]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	699b      	ldr	r3, [r3, #24]
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f7ff fc96 	bl	8001f78 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002654:	b29b      	uxth	r3, r3
 8002656:	b21b      	sxth	r3, r3
 8002658:	2b00      	cmp	r3, #0
 800265a:	f6ff ad74 	blt.w	8002146 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 800265e:	2300      	movs	r3, #0
}
 8002660:	4618      	mov	r0, r3
 8002662:	3724      	adds	r7, #36	; 0x24
 8002664:	46bd      	mov	sp, r7
 8002666:	bd90      	pop	{r4, r7, pc}
 8002668:	ffff8080 	.word	0xffff8080
 800266c:	ffff80c0 	.word	0xffff80c0

08002670 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8002670:	b480      	push	{r7}
 8002672:	b087      	sub	sp, #28
 8002674:	af00      	add	r7, sp, #0
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	607b      	str	r3, [r7, #4]
 800267a:	460b      	mov	r3, r1
 800267c:	817b      	strh	r3, [r7, #10]
 800267e:	4613      	mov	r3, r2
 8002680:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002682:	897b      	ldrh	r3, [r7, #10]
 8002684:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002688:	b29b      	uxth	r3, r3
 800268a:	2b00      	cmp	r3, #0
 800268c:	d008      	beq.n	80026a0 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800268e:	897b      	ldrh	r3, [r7, #10]
 8002690:	f003 0307 	and.w	r3, r3, #7
 8002694:	015b      	lsls	r3, r3, #5
 8002696:	3328      	adds	r3, #40	; 0x28
 8002698:	68fa      	ldr	r2, [r7, #12]
 800269a:	4413      	add	r3, r2
 800269c:	617b      	str	r3, [r7, #20]
 800269e:	e006      	b.n	80026ae <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80026a0:	897b      	ldrh	r3, [r7, #10]
 80026a2:	015b      	lsls	r3, r3, #5
 80026a4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80026a8:	68fa      	ldr	r2, [r7, #12]
 80026aa:	4413      	add	r3, r2
 80026ac:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80026ae:	893b      	ldrh	r3, [r7, #8]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d107      	bne.n	80026c4 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	2200      	movs	r2, #0
 80026b8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	b29a      	uxth	r2, r3
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	80da      	strh	r2, [r3, #6]
 80026c2:	e00b      	b.n	80026dc <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	2201      	movs	r2, #1
 80026c8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	b29a      	uxth	r2, r3
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	0c1b      	lsrs	r3, r3, #16
 80026d6:	b29a      	uxth	r2, r3
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	371c      	adds	r7, #28
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bc80      	pop	{r7}
 80026e6:	4770      	bx	lr

080026e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b086      	sub	sp, #24
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d101      	bne.n	80026fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e26c      	b.n	8002bd4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	2b00      	cmp	r3, #0
 8002704:	f000 8087 	beq.w	8002816 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002708:	4b92      	ldr	r3, [pc, #584]	; (8002954 <HAL_RCC_OscConfig+0x26c>)
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f003 030c 	and.w	r3, r3, #12
 8002710:	2b04      	cmp	r3, #4
 8002712:	d00c      	beq.n	800272e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002714:	4b8f      	ldr	r3, [pc, #572]	; (8002954 <HAL_RCC_OscConfig+0x26c>)
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f003 030c 	and.w	r3, r3, #12
 800271c:	2b08      	cmp	r3, #8
 800271e:	d112      	bne.n	8002746 <HAL_RCC_OscConfig+0x5e>
 8002720:	4b8c      	ldr	r3, [pc, #560]	; (8002954 <HAL_RCC_OscConfig+0x26c>)
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002728:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800272c:	d10b      	bne.n	8002746 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800272e:	4b89      	ldr	r3, [pc, #548]	; (8002954 <HAL_RCC_OscConfig+0x26c>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d06c      	beq.n	8002814 <HAL_RCC_OscConfig+0x12c>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d168      	bne.n	8002814 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e246      	b.n	8002bd4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800274e:	d106      	bne.n	800275e <HAL_RCC_OscConfig+0x76>
 8002750:	4b80      	ldr	r3, [pc, #512]	; (8002954 <HAL_RCC_OscConfig+0x26c>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a7f      	ldr	r2, [pc, #508]	; (8002954 <HAL_RCC_OscConfig+0x26c>)
 8002756:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800275a:	6013      	str	r3, [r2, #0]
 800275c:	e02e      	b.n	80027bc <HAL_RCC_OscConfig+0xd4>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d10c      	bne.n	8002780 <HAL_RCC_OscConfig+0x98>
 8002766:	4b7b      	ldr	r3, [pc, #492]	; (8002954 <HAL_RCC_OscConfig+0x26c>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a7a      	ldr	r2, [pc, #488]	; (8002954 <HAL_RCC_OscConfig+0x26c>)
 800276c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002770:	6013      	str	r3, [r2, #0]
 8002772:	4b78      	ldr	r3, [pc, #480]	; (8002954 <HAL_RCC_OscConfig+0x26c>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a77      	ldr	r2, [pc, #476]	; (8002954 <HAL_RCC_OscConfig+0x26c>)
 8002778:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800277c:	6013      	str	r3, [r2, #0]
 800277e:	e01d      	b.n	80027bc <HAL_RCC_OscConfig+0xd4>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002788:	d10c      	bne.n	80027a4 <HAL_RCC_OscConfig+0xbc>
 800278a:	4b72      	ldr	r3, [pc, #456]	; (8002954 <HAL_RCC_OscConfig+0x26c>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a71      	ldr	r2, [pc, #452]	; (8002954 <HAL_RCC_OscConfig+0x26c>)
 8002790:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002794:	6013      	str	r3, [r2, #0]
 8002796:	4b6f      	ldr	r3, [pc, #444]	; (8002954 <HAL_RCC_OscConfig+0x26c>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a6e      	ldr	r2, [pc, #440]	; (8002954 <HAL_RCC_OscConfig+0x26c>)
 800279c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027a0:	6013      	str	r3, [r2, #0]
 80027a2:	e00b      	b.n	80027bc <HAL_RCC_OscConfig+0xd4>
 80027a4:	4b6b      	ldr	r3, [pc, #428]	; (8002954 <HAL_RCC_OscConfig+0x26c>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a6a      	ldr	r2, [pc, #424]	; (8002954 <HAL_RCC_OscConfig+0x26c>)
 80027aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027ae:	6013      	str	r3, [r2, #0]
 80027b0:	4b68      	ldr	r3, [pc, #416]	; (8002954 <HAL_RCC_OscConfig+0x26c>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a67      	ldr	r2, [pc, #412]	; (8002954 <HAL_RCC_OscConfig+0x26c>)
 80027b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027ba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d013      	beq.n	80027ec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c4:	f7fe fbe4 	bl	8000f90 <HAL_GetTick>
 80027c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ca:	e008      	b.n	80027de <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027cc:	f7fe fbe0 	bl	8000f90 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	2b64      	cmp	r3, #100	; 0x64
 80027d8:	d901      	bls.n	80027de <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e1fa      	b.n	8002bd4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027de:	4b5d      	ldr	r3, [pc, #372]	; (8002954 <HAL_RCC_OscConfig+0x26c>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d0f0      	beq.n	80027cc <HAL_RCC_OscConfig+0xe4>
 80027ea:	e014      	b.n	8002816 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ec:	f7fe fbd0 	bl	8000f90 <HAL_GetTick>
 80027f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027f2:	e008      	b.n	8002806 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027f4:	f7fe fbcc 	bl	8000f90 <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b64      	cmp	r3, #100	; 0x64
 8002800:	d901      	bls.n	8002806 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e1e6      	b.n	8002bd4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002806:	4b53      	ldr	r3, [pc, #332]	; (8002954 <HAL_RCC_OscConfig+0x26c>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d1f0      	bne.n	80027f4 <HAL_RCC_OscConfig+0x10c>
 8002812:	e000      	b.n	8002816 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002814:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d063      	beq.n	80028ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002822:	4b4c      	ldr	r3, [pc, #304]	; (8002954 <HAL_RCC_OscConfig+0x26c>)
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f003 030c 	and.w	r3, r3, #12
 800282a:	2b00      	cmp	r3, #0
 800282c:	d00b      	beq.n	8002846 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800282e:	4b49      	ldr	r3, [pc, #292]	; (8002954 <HAL_RCC_OscConfig+0x26c>)
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f003 030c 	and.w	r3, r3, #12
 8002836:	2b08      	cmp	r3, #8
 8002838:	d11c      	bne.n	8002874 <HAL_RCC_OscConfig+0x18c>
 800283a:	4b46      	ldr	r3, [pc, #280]	; (8002954 <HAL_RCC_OscConfig+0x26c>)
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d116      	bne.n	8002874 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002846:	4b43      	ldr	r3, [pc, #268]	; (8002954 <HAL_RCC_OscConfig+0x26c>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	2b00      	cmp	r3, #0
 8002850:	d005      	beq.n	800285e <HAL_RCC_OscConfig+0x176>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	691b      	ldr	r3, [r3, #16]
 8002856:	2b01      	cmp	r3, #1
 8002858:	d001      	beq.n	800285e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e1ba      	b.n	8002bd4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800285e:	4b3d      	ldr	r3, [pc, #244]	; (8002954 <HAL_RCC_OscConfig+0x26c>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	695b      	ldr	r3, [r3, #20]
 800286a:	00db      	lsls	r3, r3, #3
 800286c:	4939      	ldr	r1, [pc, #228]	; (8002954 <HAL_RCC_OscConfig+0x26c>)
 800286e:	4313      	orrs	r3, r2
 8002870:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002872:	e03a      	b.n	80028ea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	691b      	ldr	r3, [r3, #16]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d020      	beq.n	80028be <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800287c:	4b36      	ldr	r3, [pc, #216]	; (8002958 <HAL_RCC_OscConfig+0x270>)
 800287e:	2201      	movs	r2, #1
 8002880:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002882:	f7fe fb85 	bl	8000f90 <HAL_GetTick>
 8002886:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002888:	e008      	b.n	800289c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800288a:	f7fe fb81 	bl	8000f90 <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	2b02      	cmp	r3, #2
 8002896:	d901      	bls.n	800289c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e19b      	b.n	8002bd4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800289c:	4b2d      	ldr	r3, [pc, #180]	; (8002954 <HAL_RCC_OscConfig+0x26c>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0302 	and.w	r3, r3, #2
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d0f0      	beq.n	800288a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028a8:	4b2a      	ldr	r3, [pc, #168]	; (8002954 <HAL_RCC_OscConfig+0x26c>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	695b      	ldr	r3, [r3, #20]
 80028b4:	00db      	lsls	r3, r3, #3
 80028b6:	4927      	ldr	r1, [pc, #156]	; (8002954 <HAL_RCC_OscConfig+0x26c>)
 80028b8:	4313      	orrs	r3, r2
 80028ba:	600b      	str	r3, [r1, #0]
 80028bc:	e015      	b.n	80028ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028be:	4b26      	ldr	r3, [pc, #152]	; (8002958 <HAL_RCC_OscConfig+0x270>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c4:	f7fe fb64 	bl	8000f90 <HAL_GetTick>
 80028c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028ca:	e008      	b.n	80028de <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028cc:	f7fe fb60 	bl	8000f90 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d901      	bls.n	80028de <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e17a      	b.n	8002bd4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028de:	4b1d      	ldr	r3, [pc, #116]	; (8002954 <HAL_RCC_OscConfig+0x26c>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d1f0      	bne.n	80028cc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0308 	and.w	r3, r3, #8
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d03a      	beq.n	800296c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	699b      	ldr	r3, [r3, #24]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d019      	beq.n	8002932 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028fe:	4b17      	ldr	r3, [pc, #92]	; (800295c <HAL_RCC_OscConfig+0x274>)
 8002900:	2201      	movs	r2, #1
 8002902:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002904:	f7fe fb44 	bl	8000f90 <HAL_GetTick>
 8002908:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800290a:	e008      	b.n	800291e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800290c:	f7fe fb40 	bl	8000f90 <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	2b02      	cmp	r3, #2
 8002918:	d901      	bls.n	800291e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e15a      	b.n	8002bd4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800291e:	4b0d      	ldr	r3, [pc, #52]	; (8002954 <HAL_RCC_OscConfig+0x26c>)
 8002920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	2b00      	cmp	r3, #0
 8002928:	d0f0      	beq.n	800290c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800292a:	2001      	movs	r0, #1
 800292c:	f000 fada 	bl	8002ee4 <RCC_Delay>
 8002930:	e01c      	b.n	800296c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002932:	4b0a      	ldr	r3, [pc, #40]	; (800295c <HAL_RCC_OscConfig+0x274>)
 8002934:	2200      	movs	r2, #0
 8002936:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002938:	f7fe fb2a 	bl	8000f90 <HAL_GetTick>
 800293c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800293e:	e00f      	b.n	8002960 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002940:	f7fe fb26 	bl	8000f90 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b02      	cmp	r3, #2
 800294c:	d908      	bls.n	8002960 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e140      	b.n	8002bd4 <HAL_RCC_OscConfig+0x4ec>
 8002952:	bf00      	nop
 8002954:	40021000 	.word	0x40021000
 8002958:	42420000 	.word	0x42420000
 800295c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002960:	4b9e      	ldr	r3, [pc, #632]	; (8002bdc <HAL_RCC_OscConfig+0x4f4>)
 8002962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002964:	f003 0302 	and.w	r3, r3, #2
 8002968:	2b00      	cmp	r3, #0
 800296a:	d1e9      	bne.n	8002940 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0304 	and.w	r3, r3, #4
 8002974:	2b00      	cmp	r3, #0
 8002976:	f000 80a6 	beq.w	8002ac6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800297a:	2300      	movs	r3, #0
 800297c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800297e:	4b97      	ldr	r3, [pc, #604]	; (8002bdc <HAL_RCC_OscConfig+0x4f4>)
 8002980:	69db      	ldr	r3, [r3, #28]
 8002982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d10d      	bne.n	80029a6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800298a:	4b94      	ldr	r3, [pc, #592]	; (8002bdc <HAL_RCC_OscConfig+0x4f4>)
 800298c:	69db      	ldr	r3, [r3, #28]
 800298e:	4a93      	ldr	r2, [pc, #588]	; (8002bdc <HAL_RCC_OscConfig+0x4f4>)
 8002990:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002994:	61d3      	str	r3, [r2, #28]
 8002996:	4b91      	ldr	r3, [pc, #580]	; (8002bdc <HAL_RCC_OscConfig+0x4f4>)
 8002998:	69db      	ldr	r3, [r3, #28]
 800299a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800299e:	60bb      	str	r3, [r7, #8]
 80029a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029a2:	2301      	movs	r3, #1
 80029a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029a6:	4b8e      	ldr	r3, [pc, #568]	; (8002be0 <HAL_RCC_OscConfig+0x4f8>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d118      	bne.n	80029e4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029b2:	4b8b      	ldr	r3, [pc, #556]	; (8002be0 <HAL_RCC_OscConfig+0x4f8>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a8a      	ldr	r2, [pc, #552]	; (8002be0 <HAL_RCC_OscConfig+0x4f8>)
 80029b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029be:	f7fe fae7 	bl	8000f90 <HAL_GetTick>
 80029c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029c4:	e008      	b.n	80029d8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029c6:	f7fe fae3 	bl	8000f90 <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	2b64      	cmp	r3, #100	; 0x64
 80029d2:	d901      	bls.n	80029d8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	e0fd      	b.n	8002bd4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029d8:	4b81      	ldr	r3, [pc, #516]	; (8002be0 <HAL_RCC_OscConfig+0x4f8>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d0f0      	beq.n	80029c6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d106      	bne.n	80029fa <HAL_RCC_OscConfig+0x312>
 80029ec:	4b7b      	ldr	r3, [pc, #492]	; (8002bdc <HAL_RCC_OscConfig+0x4f4>)
 80029ee:	6a1b      	ldr	r3, [r3, #32]
 80029f0:	4a7a      	ldr	r2, [pc, #488]	; (8002bdc <HAL_RCC_OscConfig+0x4f4>)
 80029f2:	f043 0301 	orr.w	r3, r3, #1
 80029f6:	6213      	str	r3, [r2, #32]
 80029f8:	e02d      	b.n	8002a56 <HAL_RCC_OscConfig+0x36e>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d10c      	bne.n	8002a1c <HAL_RCC_OscConfig+0x334>
 8002a02:	4b76      	ldr	r3, [pc, #472]	; (8002bdc <HAL_RCC_OscConfig+0x4f4>)
 8002a04:	6a1b      	ldr	r3, [r3, #32]
 8002a06:	4a75      	ldr	r2, [pc, #468]	; (8002bdc <HAL_RCC_OscConfig+0x4f4>)
 8002a08:	f023 0301 	bic.w	r3, r3, #1
 8002a0c:	6213      	str	r3, [r2, #32]
 8002a0e:	4b73      	ldr	r3, [pc, #460]	; (8002bdc <HAL_RCC_OscConfig+0x4f4>)
 8002a10:	6a1b      	ldr	r3, [r3, #32]
 8002a12:	4a72      	ldr	r2, [pc, #456]	; (8002bdc <HAL_RCC_OscConfig+0x4f4>)
 8002a14:	f023 0304 	bic.w	r3, r3, #4
 8002a18:	6213      	str	r3, [r2, #32]
 8002a1a:	e01c      	b.n	8002a56 <HAL_RCC_OscConfig+0x36e>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	2b05      	cmp	r3, #5
 8002a22:	d10c      	bne.n	8002a3e <HAL_RCC_OscConfig+0x356>
 8002a24:	4b6d      	ldr	r3, [pc, #436]	; (8002bdc <HAL_RCC_OscConfig+0x4f4>)
 8002a26:	6a1b      	ldr	r3, [r3, #32]
 8002a28:	4a6c      	ldr	r2, [pc, #432]	; (8002bdc <HAL_RCC_OscConfig+0x4f4>)
 8002a2a:	f043 0304 	orr.w	r3, r3, #4
 8002a2e:	6213      	str	r3, [r2, #32]
 8002a30:	4b6a      	ldr	r3, [pc, #424]	; (8002bdc <HAL_RCC_OscConfig+0x4f4>)
 8002a32:	6a1b      	ldr	r3, [r3, #32]
 8002a34:	4a69      	ldr	r2, [pc, #420]	; (8002bdc <HAL_RCC_OscConfig+0x4f4>)
 8002a36:	f043 0301 	orr.w	r3, r3, #1
 8002a3a:	6213      	str	r3, [r2, #32]
 8002a3c:	e00b      	b.n	8002a56 <HAL_RCC_OscConfig+0x36e>
 8002a3e:	4b67      	ldr	r3, [pc, #412]	; (8002bdc <HAL_RCC_OscConfig+0x4f4>)
 8002a40:	6a1b      	ldr	r3, [r3, #32]
 8002a42:	4a66      	ldr	r2, [pc, #408]	; (8002bdc <HAL_RCC_OscConfig+0x4f4>)
 8002a44:	f023 0301 	bic.w	r3, r3, #1
 8002a48:	6213      	str	r3, [r2, #32]
 8002a4a:	4b64      	ldr	r3, [pc, #400]	; (8002bdc <HAL_RCC_OscConfig+0x4f4>)
 8002a4c:	6a1b      	ldr	r3, [r3, #32]
 8002a4e:	4a63      	ldr	r2, [pc, #396]	; (8002bdc <HAL_RCC_OscConfig+0x4f4>)
 8002a50:	f023 0304 	bic.w	r3, r3, #4
 8002a54:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d015      	beq.n	8002a8a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a5e:	f7fe fa97 	bl	8000f90 <HAL_GetTick>
 8002a62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a64:	e00a      	b.n	8002a7c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a66:	f7fe fa93 	bl	8000f90 <HAL_GetTick>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d901      	bls.n	8002a7c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e0ab      	b.n	8002bd4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a7c:	4b57      	ldr	r3, [pc, #348]	; (8002bdc <HAL_RCC_OscConfig+0x4f4>)
 8002a7e:	6a1b      	ldr	r3, [r3, #32]
 8002a80:	f003 0302 	and.w	r3, r3, #2
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d0ee      	beq.n	8002a66 <HAL_RCC_OscConfig+0x37e>
 8002a88:	e014      	b.n	8002ab4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a8a:	f7fe fa81 	bl	8000f90 <HAL_GetTick>
 8002a8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a90:	e00a      	b.n	8002aa8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a92:	f7fe fa7d 	bl	8000f90 <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d901      	bls.n	8002aa8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e095      	b.n	8002bd4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aa8:	4b4c      	ldr	r3, [pc, #304]	; (8002bdc <HAL_RCC_OscConfig+0x4f4>)
 8002aaa:	6a1b      	ldr	r3, [r3, #32]
 8002aac:	f003 0302 	and.w	r3, r3, #2
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d1ee      	bne.n	8002a92 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ab4:	7dfb      	ldrb	r3, [r7, #23]
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d105      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002aba:	4b48      	ldr	r3, [pc, #288]	; (8002bdc <HAL_RCC_OscConfig+0x4f4>)
 8002abc:	69db      	ldr	r3, [r3, #28]
 8002abe:	4a47      	ldr	r2, [pc, #284]	; (8002bdc <HAL_RCC_OscConfig+0x4f4>)
 8002ac0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ac4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	69db      	ldr	r3, [r3, #28]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	f000 8081 	beq.w	8002bd2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ad0:	4b42      	ldr	r3, [pc, #264]	; (8002bdc <HAL_RCC_OscConfig+0x4f4>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f003 030c 	and.w	r3, r3, #12
 8002ad8:	2b08      	cmp	r3, #8
 8002ada:	d061      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	69db      	ldr	r3, [r3, #28]
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	d146      	bne.n	8002b72 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ae4:	4b3f      	ldr	r3, [pc, #252]	; (8002be4 <HAL_RCC_OscConfig+0x4fc>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aea:	f7fe fa51 	bl	8000f90 <HAL_GetTick>
 8002aee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002af0:	e008      	b.n	8002b04 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002af2:	f7fe fa4d 	bl	8000f90 <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d901      	bls.n	8002b04 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	e067      	b.n	8002bd4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b04:	4b35      	ldr	r3, [pc, #212]	; (8002bdc <HAL_RCC_OscConfig+0x4f4>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d1f0      	bne.n	8002af2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6a1b      	ldr	r3, [r3, #32]
 8002b14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b18:	d108      	bne.n	8002b2c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b1a:	4b30      	ldr	r3, [pc, #192]	; (8002bdc <HAL_RCC_OscConfig+0x4f4>)
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	492d      	ldr	r1, [pc, #180]	; (8002bdc <HAL_RCC_OscConfig+0x4f4>)
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b2c:	4b2b      	ldr	r3, [pc, #172]	; (8002bdc <HAL_RCC_OscConfig+0x4f4>)
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6a19      	ldr	r1, [r3, #32]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3c:	430b      	orrs	r3, r1
 8002b3e:	4927      	ldr	r1, [pc, #156]	; (8002bdc <HAL_RCC_OscConfig+0x4f4>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b44:	4b27      	ldr	r3, [pc, #156]	; (8002be4 <HAL_RCC_OscConfig+0x4fc>)
 8002b46:	2201      	movs	r2, #1
 8002b48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b4a:	f7fe fa21 	bl	8000f90 <HAL_GetTick>
 8002b4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b50:	e008      	b.n	8002b64 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b52:	f7fe fa1d 	bl	8000f90 <HAL_GetTick>
 8002b56:	4602      	mov	r2, r0
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d901      	bls.n	8002b64 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002b60:	2303      	movs	r3, #3
 8002b62:	e037      	b.n	8002bd4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b64:	4b1d      	ldr	r3, [pc, #116]	; (8002bdc <HAL_RCC_OscConfig+0x4f4>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d0f0      	beq.n	8002b52 <HAL_RCC_OscConfig+0x46a>
 8002b70:	e02f      	b.n	8002bd2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b72:	4b1c      	ldr	r3, [pc, #112]	; (8002be4 <HAL_RCC_OscConfig+0x4fc>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b78:	f7fe fa0a 	bl	8000f90 <HAL_GetTick>
 8002b7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b7e:	e008      	b.n	8002b92 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b80:	f7fe fa06 	bl	8000f90 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e020      	b.n	8002bd4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b92:	4b12      	ldr	r3, [pc, #72]	; (8002bdc <HAL_RCC_OscConfig+0x4f4>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d1f0      	bne.n	8002b80 <HAL_RCC_OscConfig+0x498>
 8002b9e:	e018      	b.n	8002bd2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	69db      	ldr	r3, [r3, #28]
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d101      	bne.n	8002bac <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e013      	b.n	8002bd4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002bac:	4b0b      	ldr	r3, [pc, #44]	; (8002bdc <HAL_RCC_OscConfig+0x4f4>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a1b      	ldr	r3, [r3, #32]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d106      	bne.n	8002bce <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d001      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e000      	b.n	8002bd4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002bd2:	2300      	movs	r3, #0
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3718      	adds	r7, #24
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	40021000 	.word	0x40021000
 8002be0:	40007000 	.word	0x40007000
 8002be4:	42420060 	.word	0x42420060

08002be8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d101      	bne.n	8002bfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e0d0      	b.n	8002d9e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002bfc:	4b6a      	ldr	r3, [pc, #424]	; (8002da8 <HAL_RCC_ClockConfig+0x1c0>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0307 	and.w	r3, r3, #7
 8002c04:	683a      	ldr	r2, [r7, #0]
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d910      	bls.n	8002c2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c0a:	4b67      	ldr	r3, [pc, #412]	; (8002da8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f023 0207 	bic.w	r2, r3, #7
 8002c12:	4965      	ldr	r1, [pc, #404]	; (8002da8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c1a:	4b63      	ldr	r3, [pc, #396]	; (8002da8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0307 	and.w	r3, r3, #7
 8002c22:	683a      	ldr	r2, [r7, #0]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d001      	beq.n	8002c2c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e0b8      	b.n	8002d9e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0302 	and.w	r3, r3, #2
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d020      	beq.n	8002c7a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0304 	and.w	r3, r3, #4
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d005      	beq.n	8002c50 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c44:	4b59      	ldr	r3, [pc, #356]	; (8002dac <HAL_RCC_ClockConfig+0x1c4>)
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	4a58      	ldr	r2, [pc, #352]	; (8002dac <HAL_RCC_ClockConfig+0x1c4>)
 8002c4a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002c4e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0308 	and.w	r3, r3, #8
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d005      	beq.n	8002c68 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c5c:	4b53      	ldr	r3, [pc, #332]	; (8002dac <HAL_RCC_ClockConfig+0x1c4>)
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	4a52      	ldr	r2, [pc, #328]	; (8002dac <HAL_RCC_ClockConfig+0x1c4>)
 8002c62:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002c66:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c68:	4b50      	ldr	r3, [pc, #320]	; (8002dac <HAL_RCC_ClockConfig+0x1c4>)
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	494d      	ldr	r1, [pc, #308]	; (8002dac <HAL_RCC_ClockConfig+0x1c4>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0301 	and.w	r3, r3, #1
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d040      	beq.n	8002d08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d107      	bne.n	8002c9e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c8e:	4b47      	ldr	r3, [pc, #284]	; (8002dac <HAL_RCC_ClockConfig+0x1c4>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d115      	bne.n	8002cc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e07f      	b.n	8002d9e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d107      	bne.n	8002cb6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ca6:	4b41      	ldr	r3, [pc, #260]	; (8002dac <HAL_RCC_ClockConfig+0x1c4>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d109      	bne.n	8002cc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e073      	b.n	8002d9e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cb6:	4b3d      	ldr	r3, [pc, #244]	; (8002dac <HAL_RCC_ClockConfig+0x1c4>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d101      	bne.n	8002cc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e06b      	b.n	8002d9e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cc6:	4b39      	ldr	r3, [pc, #228]	; (8002dac <HAL_RCC_ClockConfig+0x1c4>)
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f023 0203 	bic.w	r2, r3, #3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	4936      	ldr	r1, [pc, #216]	; (8002dac <HAL_RCC_ClockConfig+0x1c4>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cd8:	f7fe f95a 	bl	8000f90 <HAL_GetTick>
 8002cdc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cde:	e00a      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ce0:	f7fe f956 	bl	8000f90 <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d901      	bls.n	8002cf6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e053      	b.n	8002d9e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cf6:	4b2d      	ldr	r3, [pc, #180]	; (8002dac <HAL_RCC_ClockConfig+0x1c4>)
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f003 020c 	and.w	r2, r3, #12
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d1eb      	bne.n	8002ce0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d08:	4b27      	ldr	r3, [pc, #156]	; (8002da8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0307 	and.w	r3, r3, #7
 8002d10:	683a      	ldr	r2, [r7, #0]
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d210      	bcs.n	8002d38 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d16:	4b24      	ldr	r3, [pc, #144]	; (8002da8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f023 0207 	bic.w	r2, r3, #7
 8002d1e:	4922      	ldr	r1, [pc, #136]	; (8002da8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d26:	4b20      	ldr	r3, [pc, #128]	; (8002da8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0307 	and.w	r3, r3, #7
 8002d2e:	683a      	ldr	r2, [r7, #0]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d001      	beq.n	8002d38 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e032      	b.n	8002d9e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0304 	and.w	r3, r3, #4
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d008      	beq.n	8002d56 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d44:	4b19      	ldr	r3, [pc, #100]	; (8002dac <HAL_RCC_ClockConfig+0x1c4>)
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	4916      	ldr	r1, [pc, #88]	; (8002dac <HAL_RCC_ClockConfig+0x1c4>)
 8002d52:	4313      	orrs	r3, r2
 8002d54:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0308 	and.w	r3, r3, #8
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d009      	beq.n	8002d76 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d62:	4b12      	ldr	r3, [pc, #72]	; (8002dac <HAL_RCC_ClockConfig+0x1c4>)
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	00db      	lsls	r3, r3, #3
 8002d70:	490e      	ldr	r1, [pc, #56]	; (8002dac <HAL_RCC_ClockConfig+0x1c4>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d76:	f000 f821 	bl	8002dbc <HAL_RCC_GetSysClockFreq>
 8002d7a:	4601      	mov	r1, r0
 8002d7c:	4b0b      	ldr	r3, [pc, #44]	; (8002dac <HAL_RCC_ClockConfig+0x1c4>)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	091b      	lsrs	r3, r3, #4
 8002d82:	f003 030f 	and.w	r3, r3, #15
 8002d86:	4a0a      	ldr	r2, [pc, #40]	; (8002db0 <HAL_RCC_ClockConfig+0x1c8>)
 8002d88:	5cd3      	ldrb	r3, [r2, r3]
 8002d8a:	fa21 f303 	lsr.w	r3, r1, r3
 8002d8e:	4a09      	ldr	r2, [pc, #36]	; (8002db4 <HAL_RCC_ClockConfig+0x1cc>)
 8002d90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d92:	4b09      	ldr	r3, [pc, #36]	; (8002db8 <HAL_RCC_ClockConfig+0x1d0>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7fe f8b8 	bl	8000f0c <HAL_InitTick>

  return HAL_OK;
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3710      	adds	r7, #16
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	40022000 	.word	0x40022000
 8002dac:	40021000 	.word	0x40021000
 8002db0:	08007858 	.word	0x08007858
 8002db4:	20000000 	.word	0x20000000
 8002db8:	20000004 	.word	0x20000004

08002dbc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dbc:	b490      	push	{r4, r7}
 8002dbe:	b08a      	sub	sp, #40	; 0x28
 8002dc0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002dc2:	4b2a      	ldr	r3, [pc, #168]	; (8002e6c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002dc4:	1d3c      	adds	r4, r7, #4
 8002dc6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002dc8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002dcc:	4b28      	ldr	r3, [pc, #160]	; (8002e70 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002dce:	881b      	ldrh	r3, [r3, #0]
 8002dd0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	61fb      	str	r3, [r7, #28]
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	61bb      	str	r3, [r7, #24]
 8002dda:	2300      	movs	r3, #0
 8002ddc:	627b      	str	r3, [r7, #36]	; 0x24
 8002dde:	2300      	movs	r3, #0
 8002de0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002de2:	2300      	movs	r3, #0
 8002de4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002de6:	4b23      	ldr	r3, [pc, #140]	; (8002e74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	f003 030c 	and.w	r3, r3, #12
 8002df2:	2b04      	cmp	r3, #4
 8002df4:	d002      	beq.n	8002dfc <HAL_RCC_GetSysClockFreq+0x40>
 8002df6:	2b08      	cmp	r3, #8
 8002df8:	d003      	beq.n	8002e02 <HAL_RCC_GetSysClockFreq+0x46>
 8002dfa:	e02d      	b.n	8002e58 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002dfc:	4b1e      	ldr	r3, [pc, #120]	; (8002e78 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002dfe:	623b      	str	r3, [r7, #32]
      break;
 8002e00:	e02d      	b.n	8002e5e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	0c9b      	lsrs	r3, r3, #18
 8002e06:	f003 030f 	and.w	r3, r3, #15
 8002e0a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002e0e:	4413      	add	r3, r2
 8002e10:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002e14:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d013      	beq.n	8002e48 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e20:	4b14      	ldr	r3, [pc, #80]	; (8002e74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	0c5b      	lsrs	r3, r3, #17
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002e2e:	4413      	add	r3, r2
 8002e30:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002e34:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	4a0f      	ldr	r2, [pc, #60]	; (8002e78 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002e3a:	fb02 f203 	mul.w	r2, r2, r3
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e44:	627b      	str	r3, [r7, #36]	; 0x24
 8002e46:	e004      	b.n	8002e52 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	4a0c      	ldr	r2, [pc, #48]	; (8002e7c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002e4c:	fb02 f303 	mul.w	r3, r2, r3
 8002e50:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e54:	623b      	str	r3, [r7, #32]
      break;
 8002e56:	e002      	b.n	8002e5e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e58:	4b07      	ldr	r3, [pc, #28]	; (8002e78 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002e5a:	623b      	str	r3, [r7, #32]
      break;
 8002e5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e5e:	6a3b      	ldr	r3, [r7, #32]
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3728      	adds	r7, #40	; 0x28
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bc90      	pop	{r4, r7}
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop
 8002e6c:	08007794 	.word	0x08007794
 8002e70:	080077a4 	.word	0x080077a4
 8002e74:	40021000 	.word	0x40021000
 8002e78:	007a1200 	.word	0x007a1200
 8002e7c:	003d0900 	.word	0x003d0900

08002e80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e80:	b480      	push	{r7}
 8002e82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e84:	4b02      	ldr	r3, [pc, #8]	; (8002e90 <HAL_RCC_GetHCLKFreq+0x10>)
 8002e86:	681b      	ldr	r3, [r3, #0]
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bc80      	pop	{r7}
 8002e8e:	4770      	bx	lr
 8002e90:	20000000 	.word	0x20000000

08002e94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e98:	f7ff fff2 	bl	8002e80 <HAL_RCC_GetHCLKFreq>
 8002e9c:	4601      	mov	r1, r0
 8002e9e:	4b05      	ldr	r3, [pc, #20]	; (8002eb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	0a1b      	lsrs	r3, r3, #8
 8002ea4:	f003 0307 	and.w	r3, r3, #7
 8002ea8:	4a03      	ldr	r2, [pc, #12]	; (8002eb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002eaa:	5cd3      	ldrb	r3, [r2, r3]
 8002eac:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	40021000 	.word	0x40021000
 8002eb8:	08007868 	.word	0x08007868

08002ebc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ec0:	f7ff ffde 	bl	8002e80 <HAL_RCC_GetHCLKFreq>
 8002ec4:	4601      	mov	r1, r0
 8002ec6:	4b05      	ldr	r3, [pc, #20]	; (8002edc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	0adb      	lsrs	r3, r3, #11
 8002ecc:	f003 0307 	and.w	r3, r3, #7
 8002ed0:	4a03      	ldr	r2, [pc, #12]	; (8002ee0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ed2:	5cd3      	ldrb	r3, [r2, r3]
 8002ed4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	40021000 	.word	0x40021000
 8002ee0:	08007868 	.word	0x08007868

08002ee4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b085      	sub	sp, #20
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002eec:	4b0a      	ldr	r3, [pc, #40]	; (8002f18 <RCC_Delay+0x34>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a0a      	ldr	r2, [pc, #40]	; (8002f1c <RCC_Delay+0x38>)
 8002ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef6:	0a5b      	lsrs	r3, r3, #9
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	fb02 f303 	mul.w	r3, r2, r3
 8002efe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002f00:	bf00      	nop
  }
  while (Delay --);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	1e5a      	subs	r2, r3, #1
 8002f06:	60fa      	str	r2, [r7, #12]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d1f9      	bne.n	8002f00 <RCC_Delay+0x1c>
}
 8002f0c:	bf00      	nop
 8002f0e:	3714      	adds	r7, #20
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bc80      	pop	{r7}
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop
 8002f18:	20000000 	.word	0x20000000
 8002f1c:	10624dd3 	.word	0x10624dd3

08002f20 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b086      	sub	sp, #24
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	613b      	str	r3, [r7, #16]
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0301 	and.w	r3, r3, #1
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d07d      	beq.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f40:	4b4f      	ldr	r3, [pc, #316]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f42:	69db      	ldr	r3, [r3, #28]
 8002f44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d10d      	bne.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f4c:	4b4c      	ldr	r3, [pc, #304]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f4e:	69db      	ldr	r3, [r3, #28]
 8002f50:	4a4b      	ldr	r2, [pc, #300]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f56:	61d3      	str	r3, [r2, #28]
 8002f58:	4b49      	ldr	r3, [pc, #292]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f5a:	69db      	ldr	r3, [r3, #28]
 8002f5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f60:	60bb      	str	r3, [r7, #8]
 8002f62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f64:	2301      	movs	r3, #1
 8002f66:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f68:	4b46      	ldr	r3, [pc, #280]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d118      	bne.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f74:	4b43      	ldr	r3, [pc, #268]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a42      	ldr	r2, [pc, #264]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f7e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f80:	f7fe f806 	bl	8000f90 <HAL_GetTick>
 8002f84:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f86:	e008      	b.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f88:	f7fe f802 	bl	8000f90 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	2b64      	cmp	r3, #100	; 0x64
 8002f94:	d901      	bls.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e06d      	b.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f9a:	4b3a      	ldr	r3, [pc, #232]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d0f0      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002fa6:	4b36      	ldr	r3, [pc, #216]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fa8:	6a1b      	ldr	r3, [r3, #32]
 8002faa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fae:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d02e      	beq.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fbe:	68fa      	ldr	r2, [r7, #12]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d027      	beq.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002fc4:	4b2e      	ldr	r3, [pc, #184]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fc6:	6a1b      	ldr	r3, [r3, #32]
 8002fc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fcc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002fce:	4b2e      	ldr	r3, [pc, #184]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002fd4:	4b2c      	ldr	r3, [pc, #176]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002fda:	4a29      	ldr	r2, [pc, #164]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f003 0301 	and.w	r3, r3, #1
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d014      	beq.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fea:	f7fd ffd1 	bl	8000f90 <HAL_GetTick>
 8002fee:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ff0:	e00a      	b.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ff2:	f7fd ffcd 	bl	8000f90 <HAL_GetTick>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003000:	4293      	cmp	r3, r2
 8003002:	d901      	bls.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e036      	b.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003008:	4b1d      	ldr	r3, [pc, #116]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800300a:	6a1b      	ldr	r3, [r3, #32]
 800300c:	f003 0302 	and.w	r3, r3, #2
 8003010:	2b00      	cmp	r3, #0
 8003012:	d0ee      	beq.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003014:	4b1a      	ldr	r3, [pc, #104]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003016:	6a1b      	ldr	r3, [r3, #32]
 8003018:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	4917      	ldr	r1, [pc, #92]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003022:	4313      	orrs	r3, r2
 8003024:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003026:	7dfb      	ldrb	r3, [r7, #23]
 8003028:	2b01      	cmp	r3, #1
 800302a:	d105      	bne.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800302c:	4b14      	ldr	r3, [pc, #80]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800302e:	69db      	ldr	r3, [r3, #28]
 8003030:	4a13      	ldr	r2, [pc, #76]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003032:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003036:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0302 	and.w	r3, r3, #2
 8003040:	2b00      	cmp	r3, #0
 8003042:	d008      	beq.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003044:	4b0e      	ldr	r3, [pc, #56]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	490b      	ldr	r1, [pc, #44]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003052:	4313      	orrs	r3, r2
 8003054:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0310 	and.w	r3, r3, #16
 800305e:	2b00      	cmp	r3, #0
 8003060:	d008      	beq.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003062:	4b07      	ldr	r3, [pc, #28]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	4904      	ldr	r1, [pc, #16]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003070:	4313      	orrs	r3, r2
 8003072:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003074:	2300      	movs	r3, #0
}
 8003076:	4618      	mov	r0, r3
 8003078:	3718      	adds	r7, #24
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	40021000 	.word	0x40021000
 8003084:	40007000 	.word	0x40007000
 8003088:	42420440 	.word	0x42420440

0800308c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d101      	bne.n	800309e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e053      	b.n	8003146 <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d106      	bne.n	80030be <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f7fd fc7d 	bl	80009b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2202      	movs	r2, #2
 80030c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030d4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685a      	ldr	r2, [r3, #4]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	431a      	orrs	r2, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	431a      	orrs	r2, r3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	431a      	orrs	r2, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	695b      	ldr	r3, [r3, #20]
 80030f0:	431a      	orrs	r2, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	699b      	ldr	r3, [r3, #24]
 80030f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030fa:	431a      	orrs	r2, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	69db      	ldr	r3, [r3, #28]
 8003100:	431a      	orrs	r2, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a1b      	ldr	r3, [r3, #32]
 8003106:	ea42 0103 	orr.w	r1, r2, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	430a      	orrs	r2, r1
 8003114:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	699b      	ldr	r3, [r3, #24]
 800311a:	0c1a      	lsrs	r2, r3, #16
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f002 0204 	and.w	r2, r2, #4
 8003124:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	69da      	ldr	r2, [r3, #28]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003134:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003144:	2300      	movs	r3, #0
}
 8003146:	4618      	mov	r0, r3
 8003148:	3708      	adds	r7, #8
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}

0800314e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800314e:	b580      	push	{r7, lr}
 8003150:	b082      	sub	sp, #8
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d101      	bne.n	8003160 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e01d      	b.n	800319c <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003166:	b2db      	uxtb	r3, r3
 8003168:	2b00      	cmp	r3, #0
 800316a:	d106      	bne.n	800317a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f7fd fc99 	bl	8000aac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2202      	movs	r2, #2
 800317e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	3304      	adds	r3, #4
 800318a:	4619      	mov	r1, r3
 800318c:	4610      	mov	r0, r2
 800318e:	f000 fb13 	bl	80037b8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2201      	movs	r2, #1
 8003196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800319a:	2300      	movs	r3, #0
}
 800319c:	4618      	mov	r0, r3
 800319e:	3708      	adds	r7, #8
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b085      	sub	sp, #20
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	68da      	ldr	r2, [r3, #12]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f042 0201 	orr.w	r2, r2, #1
 80031ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f003 0307 	and.w	r3, r3, #7
 80031c6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2b06      	cmp	r3, #6
 80031cc:	d007      	beq.n	80031de <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f042 0201 	orr.w	r2, r2, #1
 80031dc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031de:	2300      	movs	r3, #0
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3714      	adds	r7, #20
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bc80      	pop	{r7}
 80031e8:	4770      	bx	lr

080031ea <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80031ea:	b580      	push	{r7, lr}
 80031ec:	b082      	sub	sp, #8
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d101      	bne.n	80031fc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e01d      	b.n	8003238 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003202:	b2db      	uxtb	r3, r3
 8003204:	2b00      	cmp	r3, #0
 8003206:	d106      	bne.n	8003216 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f000 f815 	bl	8003240 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2202      	movs	r2, #2
 800321a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	3304      	adds	r3, #4
 8003226:	4619      	mov	r1, r3
 8003228:	4610      	mov	r0, r2
 800322a:	f000 fac5 	bl	80037b8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2201      	movs	r2, #1
 8003232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003236:	2300      	movs	r3, #0
}
 8003238:	4618      	mov	r0, r3
 800323a:	3708      	adds	r7, #8
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003248:	bf00      	nop
 800324a:	370c      	adds	r7, #12
 800324c:	46bd      	mov	sp, r7
 800324e:	bc80      	pop	{r7}
 8003250:	4770      	bx	lr

08003252 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003252:	b580      	push	{r7, lr}
 8003254:	b082      	sub	sp, #8
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	691b      	ldr	r3, [r3, #16]
 8003260:	f003 0302 	and.w	r3, r3, #2
 8003264:	2b02      	cmp	r3, #2
 8003266:	d122      	bne.n	80032ae <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	f003 0302 	and.w	r3, r3, #2
 8003272:	2b02      	cmp	r3, #2
 8003274:	d11b      	bne.n	80032ae <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f06f 0202 	mvn.w	r2, #2
 800327e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	699b      	ldr	r3, [r3, #24]
 800328c:	f003 0303 	and.w	r3, r3, #3
 8003290:	2b00      	cmp	r3, #0
 8003292:	d003      	beq.n	800329c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f000 fa74 	bl	8003782 <HAL_TIM_IC_CaptureCallback>
 800329a:	e005      	b.n	80032a8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f000 fa67 	bl	8003770 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f000 fa76 	bl	8003794 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	691b      	ldr	r3, [r3, #16]
 80032b4:	f003 0304 	and.w	r3, r3, #4
 80032b8:	2b04      	cmp	r3, #4
 80032ba:	d122      	bne.n	8003302 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	f003 0304 	and.w	r3, r3, #4
 80032c6:	2b04      	cmp	r3, #4
 80032c8:	d11b      	bne.n	8003302 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f06f 0204 	mvn.w	r2, #4
 80032d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2202      	movs	r2, #2
 80032d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	699b      	ldr	r3, [r3, #24]
 80032e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d003      	beq.n	80032f0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f000 fa4a 	bl	8003782 <HAL_TIM_IC_CaptureCallback>
 80032ee:	e005      	b.n	80032fc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f000 fa3d 	bl	8003770 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f000 fa4c 	bl	8003794 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	691b      	ldr	r3, [r3, #16]
 8003308:	f003 0308 	and.w	r3, r3, #8
 800330c:	2b08      	cmp	r3, #8
 800330e:	d122      	bne.n	8003356 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	f003 0308 	and.w	r3, r3, #8
 800331a:	2b08      	cmp	r3, #8
 800331c:	d11b      	bne.n	8003356 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f06f 0208 	mvn.w	r2, #8
 8003326:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2204      	movs	r2, #4
 800332c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	69db      	ldr	r3, [r3, #28]
 8003334:	f003 0303 	and.w	r3, r3, #3
 8003338:	2b00      	cmp	r3, #0
 800333a:	d003      	beq.n	8003344 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	f000 fa20 	bl	8003782 <HAL_TIM_IC_CaptureCallback>
 8003342:	e005      	b.n	8003350 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f000 fa13 	bl	8003770 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f000 fa22 	bl	8003794 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	f003 0310 	and.w	r3, r3, #16
 8003360:	2b10      	cmp	r3, #16
 8003362:	d122      	bne.n	80033aa <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	f003 0310 	and.w	r3, r3, #16
 800336e:	2b10      	cmp	r3, #16
 8003370:	d11b      	bne.n	80033aa <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f06f 0210 	mvn.w	r2, #16
 800337a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2208      	movs	r2, #8
 8003380:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	69db      	ldr	r3, [r3, #28]
 8003388:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800338c:	2b00      	cmp	r3, #0
 800338e:	d003      	beq.n	8003398 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f000 f9f6 	bl	8003782 <HAL_TIM_IC_CaptureCallback>
 8003396:	e005      	b.n	80033a4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f000 f9e9 	bl	8003770 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f000 f9f8 	bl	8003794 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	691b      	ldr	r3, [r3, #16]
 80033b0:	f003 0301 	and.w	r3, r3, #1
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d10e      	bne.n	80033d6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d107      	bne.n	80033d6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f06f 0201 	mvn.w	r2, #1
 80033ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f000 f9c4 	bl	800375e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	691b      	ldr	r3, [r3, #16]
 80033dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033e0:	2b80      	cmp	r3, #128	; 0x80
 80033e2:	d10e      	bne.n	8003402 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ee:	2b80      	cmp	r3, #128	; 0x80
 80033f0:	d107      	bne.n	8003402 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80033fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f000 fca8 	bl	8003d52 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	691b      	ldr	r3, [r3, #16]
 8003408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800340c:	2b40      	cmp	r3, #64	; 0x40
 800340e:	d10e      	bne.n	800342e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800341a:	2b40      	cmp	r3, #64	; 0x40
 800341c:	d107      	bne.n	800342e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003426:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f000 f9bc 	bl	80037a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	691b      	ldr	r3, [r3, #16]
 8003434:	f003 0320 	and.w	r3, r3, #32
 8003438:	2b20      	cmp	r3, #32
 800343a:	d10e      	bne.n	800345a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	f003 0320 	and.w	r3, r3, #32
 8003446:	2b20      	cmp	r3, #32
 8003448:	d107      	bne.n	800345a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f06f 0220 	mvn.w	r2, #32
 8003452:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f000 fc73 	bl	8003d40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800345a:	bf00      	nop
 800345c:	3708      	adds	r7, #8
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
	...

08003464 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	60f8      	str	r0, [r7, #12]
 800346c:	60b9      	str	r1, [r7, #8]
 800346e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003476:	2b01      	cmp	r3, #1
 8003478:	d101      	bne.n	800347e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800347a:	2302      	movs	r3, #2
 800347c:	e0b4      	b.n	80035e8 <HAL_TIM_PWM_ConfigChannel+0x184>
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2201      	movs	r2, #1
 8003482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2202      	movs	r2, #2
 800348a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2b0c      	cmp	r3, #12
 8003492:	f200 809f 	bhi.w	80035d4 <HAL_TIM_PWM_ConfigChannel+0x170>
 8003496:	a201      	add	r2, pc, #4	; (adr r2, 800349c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800349c:	080034d1 	.word	0x080034d1
 80034a0:	080035d5 	.word	0x080035d5
 80034a4:	080035d5 	.word	0x080035d5
 80034a8:	080035d5 	.word	0x080035d5
 80034ac:	08003511 	.word	0x08003511
 80034b0:	080035d5 	.word	0x080035d5
 80034b4:	080035d5 	.word	0x080035d5
 80034b8:	080035d5 	.word	0x080035d5
 80034bc:	08003553 	.word	0x08003553
 80034c0:	080035d5 	.word	0x080035d5
 80034c4:	080035d5 	.word	0x080035d5
 80034c8:	080035d5 	.word	0x080035d5
 80034cc:	08003593 	.word	0x08003593
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	68b9      	ldr	r1, [r7, #8]
 80034d6:	4618      	mov	r0, r3
 80034d8:	f000 f9d0 	bl	800387c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	699a      	ldr	r2, [r3, #24]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f042 0208 	orr.w	r2, r2, #8
 80034ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	699a      	ldr	r2, [r3, #24]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f022 0204 	bic.w	r2, r2, #4
 80034fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	6999      	ldr	r1, [r3, #24]
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	691a      	ldr	r2, [r3, #16]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	430a      	orrs	r2, r1
 800350c:	619a      	str	r2, [r3, #24]
      break;
 800350e:	e062      	b.n	80035d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	68b9      	ldr	r1, [r7, #8]
 8003516:	4618      	mov	r0, r3
 8003518:	f000 fa16 	bl	8003948 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	699a      	ldr	r2, [r3, #24]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800352a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	699a      	ldr	r2, [r3, #24]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800353a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	6999      	ldr	r1, [r3, #24]
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	021a      	lsls	r2, r3, #8
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	430a      	orrs	r2, r1
 800354e:	619a      	str	r2, [r3, #24]
      break;
 8003550:	e041      	b.n	80035d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	68b9      	ldr	r1, [r7, #8]
 8003558:	4618      	mov	r0, r3
 800355a:	f000 fa5f 	bl	8003a1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	69da      	ldr	r2, [r3, #28]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f042 0208 	orr.w	r2, r2, #8
 800356c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	69da      	ldr	r2, [r3, #28]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f022 0204 	bic.w	r2, r2, #4
 800357c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	69d9      	ldr	r1, [r3, #28]
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	691a      	ldr	r2, [r3, #16]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	430a      	orrs	r2, r1
 800358e:	61da      	str	r2, [r3, #28]
      break;
 8003590:	e021      	b.n	80035d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	68b9      	ldr	r1, [r7, #8]
 8003598:	4618      	mov	r0, r3
 800359a:	f000 faa9 	bl	8003af0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	69da      	ldr	r2, [r3, #28]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	69da      	ldr	r2, [r3, #28]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	69d9      	ldr	r1, [r3, #28]
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	691b      	ldr	r3, [r3, #16]
 80035c8:	021a      	lsls	r2, r3, #8
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	430a      	orrs	r2, r1
 80035d0:	61da      	str	r2, [r3, #28]
      break;
 80035d2:	e000      	b.n	80035d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80035d4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2201      	movs	r2, #1
 80035da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035e6:	2300      	movs	r3, #0
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3710      	adds	r7, #16
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003600:	2b01      	cmp	r3, #1
 8003602:	d101      	bne.n	8003608 <HAL_TIM_ConfigClockSource+0x18>
 8003604:	2302      	movs	r3, #2
 8003606:	e0a6      	b.n	8003756 <HAL_TIM_ConfigClockSource+0x166>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2202      	movs	r2, #2
 8003614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003626:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800362e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	68fa      	ldr	r2, [r7, #12]
 8003636:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2b40      	cmp	r3, #64	; 0x40
 800363e:	d067      	beq.n	8003710 <HAL_TIM_ConfigClockSource+0x120>
 8003640:	2b40      	cmp	r3, #64	; 0x40
 8003642:	d80b      	bhi.n	800365c <HAL_TIM_ConfigClockSource+0x6c>
 8003644:	2b10      	cmp	r3, #16
 8003646:	d073      	beq.n	8003730 <HAL_TIM_ConfigClockSource+0x140>
 8003648:	2b10      	cmp	r3, #16
 800364a:	d802      	bhi.n	8003652 <HAL_TIM_ConfigClockSource+0x62>
 800364c:	2b00      	cmp	r3, #0
 800364e:	d06f      	beq.n	8003730 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003650:	e078      	b.n	8003744 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003652:	2b20      	cmp	r3, #32
 8003654:	d06c      	beq.n	8003730 <HAL_TIM_ConfigClockSource+0x140>
 8003656:	2b30      	cmp	r3, #48	; 0x30
 8003658:	d06a      	beq.n	8003730 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800365a:	e073      	b.n	8003744 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800365c:	2b70      	cmp	r3, #112	; 0x70
 800365e:	d00d      	beq.n	800367c <HAL_TIM_ConfigClockSource+0x8c>
 8003660:	2b70      	cmp	r3, #112	; 0x70
 8003662:	d804      	bhi.n	800366e <HAL_TIM_ConfigClockSource+0x7e>
 8003664:	2b50      	cmp	r3, #80	; 0x50
 8003666:	d033      	beq.n	80036d0 <HAL_TIM_ConfigClockSource+0xe0>
 8003668:	2b60      	cmp	r3, #96	; 0x60
 800366a:	d041      	beq.n	80036f0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800366c:	e06a      	b.n	8003744 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800366e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003672:	d066      	beq.n	8003742 <HAL_TIM_ConfigClockSource+0x152>
 8003674:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003678:	d017      	beq.n	80036aa <HAL_TIM_ConfigClockSource+0xba>
      break;
 800367a:	e063      	b.n	8003744 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6818      	ldr	r0, [r3, #0]
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	6899      	ldr	r1, [r3, #8]
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	685a      	ldr	r2, [r3, #4]
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	f000 faf5 	bl	8003c7a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800369e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	68fa      	ldr	r2, [r7, #12]
 80036a6:	609a      	str	r2, [r3, #8]
      break;
 80036a8:	e04c      	b.n	8003744 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6818      	ldr	r0, [r3, #0]
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	6899      	ldr	r1, [r3, #8]
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	685a      	ldr	r2, [r3, #4]
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	f000 fade 	bl	8003c7a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	689a      	ldr	r2, [r3, #8]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036cc:	609a      	str	r2, [r3, #8]
      break;
 80036ce:	e039      	b.n	8003744 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6818      	ldr	r0, [r3, #0]
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	6859      	ldr	r1, [r3, #4]
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	461a      	mov	r2, r3
 80036de:	f000 fa55 	bl	8003b8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	2150      	movs	r1, #80	; 0x50
 80036e8:	4618      	mov	r0, r3
 80036ea:	f000 faac 	bl	8003c46 <TIM_ITRx_SetConfig>
      break;
 80036ee:	e029      	b.n	8003744 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6818      	ldr	r0, [r3, #0]
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	6859      	ldr	r1, [r3, #4]
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	461a      	mov	r2, r3
 80036fe:	f000 fa73 	bl	8003be8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	2160      	movs	r1, #96	; 0x60
 8003708:	4618      	mov	r0, r3
 800370a:	f000 fa9c 	bl	8003c46 <TIM_ITRx_SetConfig>
      break;
 800370e:	e019      	b.n	8003744 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6818      	ldr	r0, [r3, #0]
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	6859      	ldr	r1, [r3, #4]
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	461a      	mov	r2, r3
 800371e:	f000 fa35 	bl	8003b8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2140      	movs	r1, #64	; 0x40
 8003728:	4618      	mov	r0, r3
 800372a:	f000 fa8c 	bl	8003c46 <TIM_ITRx_SetConfig>
      break;
 800372e:	e009      	b.n	8003744 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4619      	mov	r1, r3
 800373a:	4610      	mov	r0, r2
 800373c:	f000 fa83 	bl	8003c46 <TIM_ITRx_SetConfig>
      break;
 8003740:	e000      	b.n	8003744 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003742:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	3710      	adds	r7, #16
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}

0800375e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800375e:	b480      	push	{r7}
 8003760:	b083      	sub	sp, #12
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003766:	bf00      	nop
 8003768:	370c      	adds	r7, #12
 800376a:	46bd      	mov	sp, r7
 800376c:	bc80      	pop	{r7}
 800376e:	4770      	bx	lr

08003770 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003778:	bf00      	nop
 800377a:	370c      	adds	r7, #12
 800377c:	46bd      	mov	sp, r7
 800377e:	bc80      	pop	{r7}
 8003780:	4770      	bx	lr

08003782 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003782:	b480      	push	{r7}
 8003784:	b083      	sub	sp, #12
 8003786:	af00      	add	r7, sp, #0
 8003788:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800378a:	bf00      	nop
 800378c:	370c      	adds	r7, #12
 800378e:	46bd      	mov	sp, r7
 8003790:	bc80      	pop	{r7}
 8003792:	4770      	bx	lr

08003794 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800379c:	bf00      	nop
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bc80      	pop	{r7}
 80037a4:	4770      	bx	lr

080037a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80037a6:	b480      	push	{r7}
 80037a8:	b083      	sub	sp, #12
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037ae:	bf00      	nop
 80037b0:	370c      	adds	r7, #12
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bc80      	pop	{r7}
 80037b6:	4770      	bx	lr

080037b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b085      	sub	sp, #20
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	4a29      	ldr	r2, [pc, #164]	; (8003870 <TIM_Base_SetConfig+0xb8>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d00b      	beq.n	80037e8 <TIM_Base_SetConfig+0x30>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037d6:	d007      	beq.n	80037e8 <TIM_Base_SetConfig+0x30>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	4a26      	ldr	r2, [pc, #152]	; (8003874 <TIM_Base_SetConfig+0xbc>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d003      	beq.n	80037e8 <TIM_Base_SetConfig+0x30>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	4a25      	ldr	r2, [pc, #148]	; (8003878 <TIM_Base_SetConfig+0xc0>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d108      	bne.n	80037fa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	68fa      	ldr	r2, [r7, #12]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a1c      	ldr	r2, [pc, #112]	; (8003870 <TIM_Base_SetConfig+0xb8>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d00b      	beq.n	800381a <TIM_Base_SetConfig+0x62>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003808:	d007      	beq.n	800381a <TIM_Base_SetConfig+0x62>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4a19      	ldr	r2, [pc, #100]	; (8003874 <TIM_Base_SetConfig+0xbc>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d003      	beq.n	800381a <TIM_Base_SetConfig+0x62>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a18      	ldr	r2, [pc, #96]	; (8003878 <TIM_Base_SetConfig+0xc0>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d108      	bne.n	800382c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003820:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	68fa      	ldr	r2, [r7, #12]
 8003828:	4313      	orrs	r3, r2
 800382a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	695b      	ldr	r3, [r3, #20]
 8003836:	4313      	orrs	r3, r2
 8003838:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	68fa      	ldr	r2, [r7, #12]
 800383e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	689a      	ldr	r2, [r3, #8]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	4a07      	ldr	r2, [pc, #28]	; (8003870 <TIM_Base_SetConfig+0xb8>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d103      	bne.n	8003860 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	691a      	ldr	r2, [r3, #16]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	615a      	str	r2, [r3, #20]
}
 8003866:	bf00      	nop
 8003868:	3714      	adds	r7, #20
 800386a:	46bd      	mov	sp, r7
 800386c:	bc80      	pop	{r7}
 800386e:	4770      	bx	lr
 8003870:	40012c00 	.word	0x40012c00
 8003874:	40000400 	.word	0x40000400
 8003878:	40000800 	.word	0x40000800

0800387c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800387c:	b480      	push	{r7}
 800387e:	b087      	sub	sp, #28
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a1b      	ldr	r3, [r3, #32]
 800388a:	f023 0201 	bic.w	r2, r3, #1
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a1b      	ldr	r3, [r3, #32]
 8003896:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	699b      	ldr	r3, [r3, #24]
 80038a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f023 0303 	bic.w	r3, r3, #3
 80038b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	68fa      	ldr	r2, [r7, #12]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	f023 0302 	bic.w	r3, r3, #2
 80038c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	697a      	ldr	r2, [r7, #20]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	4a1c      	ldr	r2, [pc, #112]	; (8003944 <TIM_OC1_SetConfig+0xc8>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d10c      	bne.n	80038f2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	f023 0308 	bic.w	r3, r3, #8
 80038de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	697a      	ldr	r2, [r7, #20]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	f023 0304 	bic.w	r3, r3, #4
 80038f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a13      	ldr	r2, [pc, #76]	; (8003944 <TIM_OC1_SetConfig+0xc8>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d111      	bne.n	800391e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003900:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003908:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	695b      	ldr	r3, [r3, #20]
 800390e:	693a      	ldr	r2, [r7, #16]
 8003910:	4313      	orrs	r3, r2
 8003912:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	699b      	ldr	r3, [r3, #24]
 8003918:	693a      	ldr	r2, [r7, #16]
 800391a:	4313      	orrs	r3, r2
 800391c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	693a      	ldr	r2, [r7, #16]
 8003922:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	68fa      	ldr	r2, [r7, #12]
 8003928:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	685a      	ldr	r2, [r3, #4]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	697a      	ldr	r2, [r7, #20]
 8003936:	621a      	str	r2, [r3, #32]
}
 8003938:	bf00      	nop
 800393a:	371c      	adds	r7, #28
 800393c:	46bd      	mov	sp, r7
 800393e:	bc80      	pop	{r7}
 8003940:	4770      	bx	lr
 8003942:	bf00      	nop
 8003944:	40012c00 	.word	0x40012c00

08003948 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003948:	b480      	push	{r7}
 800394a:	b087      	sub	sp, #28
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a1b      	ldr	r3, [r3, #32]
 8003956:	f023 0210 	bic.w	r2, r3, #16
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a1b      	ldr	r3, [r3, #32]
 8003962:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	699b      	ldr	r3, [r3, #24]
 800396e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003976:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800397e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	021b      	lsls	r3, r3, #8
 8003986:	68fa      	ldr	r2, [r7, #12]
 8003988:	4313      	orrs	r3, r2
 800398a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	f023 0320 	bic.w	r3, r3, #32
 8003992:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	011b      	lsls	r3, r3, #4
 800399a:	697a      	ldr	r2, [r7, #20]
 800399c:	4313      	orrs	r3, r2
 800399e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4a1d      	ldr	r2, [pc, #116]	; (8003a18 <TIM_OC2_SetConfig+0xd0>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d10d      	bne.n	80039c4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	011b      	lsls	r3, r3, #4
 80039b6:	697a      	ldr	r2, [r7, #20]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039c2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4a14      	ldr	r2, [pc, #80]	; (8003a18 <TIM_OC2_SetConfig+0xd0>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d113      	bne.n	80039f4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80039d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80039da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	695b      	ldr	r3, [r3, #20]
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	693a      	ldr	r2, [r7, #16]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	699b      	ldr	r3, [r3, #24]
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	693a      	ldr	r2, [r7, #16]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	693a      	ldr	r2, [r7, #16]
 80039f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	68fa      	ldr	r2, [r7, #12]
 80039fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	685a      	ldr	r2, [r3, #4]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	697a      	ldr	r2, [r7, #20]
 8003a0c:	621a      	str	r2, [r3, #32]
}
 8003a0e:	bf00      	nop
 8003a10:	371c      	adds	r7, #28
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bc80      	pop	{r7}
 8003a16:	4770      	bx	lr
 8003a18:	40012c00 	.word	0x40012c00

08003a1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b087      	sub	sp, #28
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a1b      	ldr	r3, [r3, #32]
 8003a2a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a1b      	ldr	r3, [r3, #32]
 8003a36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	69db      	ldr	r3, [r3, #28]
 8003a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f023 0303 	bic.w	r3, r3, #3
 8003a52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68fa      	ldr	r2, [r7, #12]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	021b      	lsls	r3, r3, #8
 8003a6c:	697a      	ldr	r2, [r7, #20]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a1d      	ldr	r2, [pc, #116]	; (8003aec <TIM_OC3_SetConfig+0xd0>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d10d      	bne.n	8003a96 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	021b      	lsls	r3, r3, #8
 8003a88:	697a      	ldr	r2, [r7, #20]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a14      	ldr	r2, [pc, #80]	; (8003aec <TIM_OC3_SetConfig+0xd0>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d113      	bne.n	8003ac6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003aa4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003aac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	695b      	ldr	r3, [r3, #20]
 8003ab2:	011b      	lsls	r3, r3, #4
 8003ab4:	693a      	ldr	r2, [r7, #16]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	699b      	ldr	r3, [r3, #24]
 8003abe:	011b      	lsls	r3, r3, #4
 8003ac0:	693a      	ldr	r2, [r7, #16]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	693a      	ldr	r2, [r7, #16]
 8003aca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	68fa      	ldr	r2, [r7, #12]
 8003ad0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	685a      	ldr	r2, [r3, #4]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	697a      	ldr	r2, [r7, #20]
 8003ade:	621a      	str	r2, [r3, #32]
}
 8003ae0:	bf00      	nop
 8003ae2:	371c      	adds	r7, #28
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bc80      	pop	{r7}
 8003ae8:	4770      	bx	lr
 8003aea:	bf00      	nop
 8003aec:	40012c00 	.word	0x40012c00

08003af0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b087      	sub	sp, #28
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a1b      	ldr	r3, [r3, #32]
 8003afe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a1b      	ldr	r3, [r3, #32]
 8003b0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	69db      	ldr	r3, [r3, #28]
 8003b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	021b      	lsls	r3, r3, #8
 8003b2e:	68fa      	ldr	r2, [r7, #12]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	031b      	lsls	r3, r3, #12
 8003b42:	693a      	ldr	r2, [r7, #16]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4a0f      	ldr	r2, [pc, #60]	; (8003b88 <TIM_OC4_SetConfig+0x98>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d109      	bne.n	8003b64 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b56:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	695b      	ldr	r3, [r3, #20]
 8003b5c:	019b      	lsls	r3, r3, #6
 8003b5e:	697a      	ldr	r2, [r7, #20]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	697a      	ldr	r2, [r7, #20]
 8003b68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	68fa      	ldr	r2, [r7, #12]
 8003b6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	685a      	ldr	r2, [r3, #4]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	693a      	ldr	r2, [r7, #16]
 8003b7c:	621a      	str	r2, [r3, #32]
}
 8003b7e:	bf00      	nop
 8003b80:	371c      	adds	r7, #28
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bc80      	pop	{r7}
 8003b86:	4770      	bx	lr
 8003b88:	40012c00 	.word	0x40012c00

08003b8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b087      	sub	sp, #28
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	60f8      	str	r0, [r7, #12]
 8003b94:	60b9      	str	r1, [r7, #8]
 8003b96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6a1b      	ldr	r3, [r3, #32]
 8003b9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6a1b      	ldr	r3, [r3, #32]
 8003ba2:	f023 0201 	bic.w	r2, r3, #1
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	699b      	ldr	r3, [r3, #24]
 8003bae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	011b      	lsls	r3, r3, #4
 8003bbc:	693a      	ldr	r2, [r7, #16]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	f023 030a 	bic.w	r3, r3, #10
 8003bc8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003bca:	697a      	ldr	r2, [r7, #20]
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	693a      	ldr	r2, [r7, #16]
 8003bd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	697a      	ldr	r2, [r7, #20]
 8003bdc:	621a      	str	r2, [r3, #32]
}
 8003bde:	bf00      	nop
 8003be0:	371c      	adds	r7, #28
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bc80      	pop	{r7}
 8003be6:	4770      	bx	lr

08003be8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b087      	sub	sp, #28
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6a1b      	ldr	r3, [r3, #32]
 8003bf8:	f023 0210 	bic.w	r2, r3, #16
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	699b      	ldr	r3, [r3, #24]
 8003c04:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6a1b      	ldr	r3, [r3, #32]
 8003c0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c12:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	031b      	lsls	r3, r3, #12
 8003c18:	697a      	ldr	r2, [r7, #20]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003c24:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	011b      	lsls	r3, r3, #4
 8003c2a:	693a      	ldr	r2, [r7, #16]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	697a      	ldr	r2, [r7, #20]
 8003c34:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	693a      	ldr	r2, [r7, #16]
 8003c3a:	621a      	str	r2, [r3, #32]
}
 8003c3c:	bf00      	nop
 8003c3e:	371c      	adds	r7, #28
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bc80      	pop	{r7}
 8003c44:	4770      	bx	lr

08003c46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c46:	b480      	push	{r7}
 8003c48:	b085      	sub	sp, #20
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
 8003c4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c5e:	683a      	ldr	r2, [r7, #0]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	f043 0307 	orr.w	r3, r3, #7
 8003c68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	68fa      	ldr	r2, [r7, #12]
 8003c6e:	609a      	str	r2, [r3, #8]
}
 8003c70:	bf00      	nop
 8003c72:	3714      	adds	r7, #20
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bc80      	pop	{r7}
 8003c78:	4770      	bx	lr

08003c7a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c7a:	b480      	push	{r7}
 8003c7c:	b087      	sub	sp, #28
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	60f8      	str	r0, [r7, #12]
 8003c82:	60b9      	str	r1, [r7, #8]
 8003c84:	607a      	str	r2, [r7, #4]
 8003c86:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c94:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	021a      	lsls	r2, r3, #8
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	431a      	orrs	r2, r3
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	697a      	ldr	r2, [r7, #20]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	697a      	ldr	r2, [r7, #20]
 8003cac:	609a      	str	r2, [r3, #8]
}
 8003cae:	bf00      	nop
 8003cb0:	371c      	adds	r7, #28
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bc80      	pop	{r7}
 8003cb6:	4770      	bx	lr

08003cb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b085      	sub	sp, #20
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d101      	bne.n	8003cd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ccc:	2302      	movs	r3, #2
 8003cce:	e032      	b.n	8003d36 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2202      	movs	r2, #2
 8003cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cf6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	68fa      	ldr	r2, [r7, #12]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d08:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	68ba      	ldr	r2, [r7, #8]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68fa      	ldr	r2, [r7, #12]
 8003d1a:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68ba      	ldr	r2, [r7, #8]
 8003d22:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3714      	adds	r7, #20
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bc80      	pop	{r7}
 8003d3e:	4770      	bx	lr

08003d40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d48:	bf00      	nop
 8003d4a:	370c      	adds	r7, #12
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bc80      	pop	{r7}
 8003d50:	4770      	bx	lr

08003d52 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d52:	b480      	push	{r7}
 8003d54:	b083      	sub	sp, #12
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d5a:	bf00      	nop
 8003d5c:	370c      	adds	r7, #12
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bc80      	pop	{r7}
 8003d62:	4770      	bx	lr

08003d64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b082      	sub	sp, #8
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d101      	bne.n	8003d76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e03f      	b.n	8003df6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d106      	bne.n	8003d90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f7fc ff56 	bl	8000c3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2224      	movs	r2, #36	; 0x24
 8003d94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68da      	ldr	r2, [r3, #12]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003da6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f000 f829 	bl	8003e00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	691a      	ldr	r2, [r3, #16]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003dbc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	695a      	ldr	r2, [r3, #20]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003dcc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68da      	ldr	r2, [r3, #12]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ddc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2220      	movs	r2, #32
 8003de8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2220      	movs	r2, #32
 8003df0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3708      	adds	r7, #8
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
	...

08003e00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	691b      	ldr	r3, [r3, #16]
 8003e0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	68da      	ldr	r2, [r3, #12]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	430a      	orrs	r2, r1
 8003e1c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	689a      	ldr	r2, [r3, #8]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	691b      	ldr	r3, [r3, #16]
 8003e26:	431a      	orrs	r2, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	695b      	ldr	r3, [r3, #20]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003e3a:	f023 030c 	bic.w	r3, r3, #12
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	6812      	ldr	r2, [r2, #0]
 8003e42:	68f9      	ldr	r1, [r7, #12]
 8003e44:	430b      	orrs	r3, r1
 8003e46:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	695b      	ldr	r3, [r3, #20]
 8003e4e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	699a      	ldr	r2, [r3, #24]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	430a      	orrs	r2, r1
 8003e5c:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a52      	ldr	r2, [pc, #328]	; (8003fac <UART_SetConfig+0x1ac>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d14e      	bne.n	8003f06 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003e68:	f7ff f828 	bl	8002ebc <HAL_RCC_GetPCLK2Freq>
 8003e6c:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e6e:	68ba      	ldr	r2, [r7, #8]
 8003e70:	4613      	mov	r3, r2
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	4413      	add	r3, r2
 8003e76:	009a      	lsls	r2, r3, #2
 8003e78:	441a      	add	r2, r3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e84:	4a4a      	ldr	r2, [pc, #296]	; (8003fb0 <UART_SetConfig+0x1b0>)
 8003e86:	fba2 2303 	umull	r2, r3, r2, r3
 8003e8a:	095b      	lsrs	r3, r3, #5
 8003e8c:	0119      	lsls	r1, r3, #4
 8003e8e:	68ba      	ldr	r2, [r7, #8]
 8003e90:	4613      	mov	r3, r2
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	4413      	add	r3, r2
 8003e96:	009a      	lsls	r2, r3, #2
 8003e98:	441a      	add	r2, r3
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ea4:	4b42      	ldr	r3, [pc, #264]	; (8003fb0 <UART_SetConfig+0x1b0>)
 8003ea6:	fba3 0302 	umull	r0, r3, r3, r2
 8003eaa:	095b      	lsrs	r3, r3, #5
 8003eac:	2064      	movs	r0, #100	; 0x64
 8003eae:	fb00 f303 	mul.w	r3, r0, r3
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	011b      	lsls	r3, r3, #4
 8003eb6:	3332      	adds	r3, #50	; 0x32
 8003eb8:	4a3d      	ldr	r2, [pc, #244]	; (8003fb0 <UART_SetConfig+0x1b0>)
 8003eba:	fba2 2303 	umull	r2, r3, r2, r3
 8003ebe:	095b      	lsrs	r3, r3, #5
 8003ec0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ec4:	4419      	add	r1, r3
 8003ec6:	68ba      	ldr	r2, [r7, #8]
 8003ec8:	4613      	mov	r3, r2
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	4413      	add	r3, r2
 8003ece:	009a      	lsls	r2, r3, #2
 8003ed0:	441a      	add	r2, r3
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003edc:	4b34      	ldr	r3, [pc, #208]	; (8003fb0 <UART_SetConfig+0x1b0>)
 8003ede:	fba3 0302 	umull	r0, r3, r3, r2
 8003ee2:	095b      	lsrs	r3, r3, #5
 8003ee4:	2064      	movs	r0, #100	; 0x64
 8003ee6:	fb00 f303 	mul.w	r3, r0, r3
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	011b      	lsls	r3, r3, #4
 8003eee:	3332      	adds	r3, #50	; 0x32
 8003ef0:	4a2f      	ldr	r2, [pc, #188]	; (8003fb0 <UART_SetConfig+0x1b0>)
 8003ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ef6:	095b      	lsrs	r3, r3, #5
 8003ef8:	f003 020f 	and.w	r2, r3, #15
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	440a      	add	r2, r1
 8003f02:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8003f04:	e04d      	b.n	8003fa2 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8003f06:	f7fe ffc5 	bl	8002e94 <HAL_RCC_GetPCLK1Freq>
 8003f0a:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f0c:	68ba      	ldr	r2, [r7, #8]
 8003f0e:	4613      	mov	r3, r2
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	4413      	add	r3, r2
 8003f14:	009a      	lsls	r2, r3, #2
 8003f16:	441a      	add	r2, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f22:	4a23      	ldr	r2, [pc, #140]	; (8003fb0 <UART_SetConfig+0x1b0>)
 8003f24:	fba2 2303 	umull	r2, r3, r2, r3
 8003f28:	095b      	lsrs	r3, r3, #5
 8003f2a:	0119      	lsls	r1, r3, #4
 8003f2c:	68ba      	ldr	r2, [r7, #8]
 8003f2e:	4613      	mov	r3, r2
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	4413      	add	r3, r2
 8003f34:	009a      	lsls	r2, r3, #2
 8003f36:	441a      	add	r2, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f42:	4b1b      	ldr	r3, [pc, #108]	; (8003fb0 <UART_SetConfig+0x1b0>)
 8003f44:	fba3 0302 	umull	r0, r3, r3, r2
 8003f48:	095b      	lsrs	r3, r3, #5
 8003f4a:	2064      	movs	r0, #100	; 0x64
 8003f4c:	fb00 f303 	mul.w	r3, r0, r3
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	011b      	lsls	r3, r3, #4
 8003f54:	3332      	adds	r3, #50	; 0x32
 8003f56:	4a16      	ldr	r2, [pc, #88]	; (8003fb0 <UART_SetConfig+0x1b0>)
 8003f58:	fba2 2303 	umull	r2, r3, r2, r3
 8003f5c:	095b      	lsrs	r3, r3, #5
 8003f5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f62:	4419      	add	r1, r3
 8003f64:	68ba      	ldr	r2, [r7, #8]
 8003f66:	4613      	mov	r3, r2
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	4413      	add	r3, r2
 8003f6c:	009a      	lsls	r2, r3, #2
 8003f6e:	441a      	add	r2, r3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f7a:	4b0d      	ldr	r3, [pc, #52]	; (8003fb0 <UART_SetConfig+0x1b0>)
 8003f7c:	fba3 0302 	umull	r0, r3, r3, r2
 8003f80:	095b      	lsrs	r3, r3, #5
 8003f82:	2064      	movs	r0, #100	; 0x64
 8003f84:	fb00 f303 	mul.w	r3, r0, r3
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	011b      	lsls	r3, r3, #4
 8003f8c:	3332      	adds	r3, #50	; 0x32
 8003f8e:	4a08      	ldr	r2, [pc, #32]	; (8003fb0 <UART_SetConfig+0x1b0>)
 8003f90:	fba2 2303 	umull	r2, r3, r2, r3
 8003f94:	095b      	lsrs	r3, r3, #5
 8003f96:	f003 020f 	and.w	r2, r3, #15
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	440a      	add	r2, r1
 8003fa0:	609a      	str	r2, [r3, #8]
}
 8003fa2:	bf00      	nop
 8003fa4:	3710      	adds	r7, #16
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	40013800 	.word	0x40013800
 8003fb0:	51eb851f 	.word	0x51eb851f

08003fb4 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003fb4:	b084      	sub	sp, #16
 8003fb6:	b480      	push	{r7}
 8003fb8:	b083      	sub	sp, #12
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	6078      	str	r0, [r7, #4]
 8003fbe:	f107 0014 	add.w	r0, r7, #20
 8003fc2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003fc6:	2300      	movs	r3, #0
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	370c      	adds	r7, #12
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bc80      	pop	{r7}
 8003fd0:	b004      	add	sp, #16
 8003fd2:	4770      	bx	lr

08003fd4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b085      	sub	sp, #20
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003fdc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003fe0:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003fe8:	b29a      	uxth	r2, r3
 8003fea:	89fb      	ldrh	r3, [r7, #14]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	b29a      	uxth	r2, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003ff6:	2300      	movs	r3, #0
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3714      	adds	r7, #20
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bc80      	pop	{r7}
 8004000:	4770      	bx	lr

08004002 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004002:	b480      	push	{r7}
 8004004:	b085      	sub	sp, #20
 8004006:	af00      	add	r7, sp, #0
 8004008:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800400a:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800400e:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004016:	b29b      	uxth	r3, r3
 8004018:	b21a      	sxth	r2, r3
 800401a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800401e:	43db      	mvns	r3, r3
 8004020:	b21b      	sxth	r3, r3
 8004022:	4013      	ands	r3, r2
 8004024:	b21b      	sxth	r3, r3
 8004026:	b29a      	uxth	r2, r3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800402e:	2300      	movs	r3, #0
}
 8004030:	4618      	mov	r0, r3
 8004032:	3714      	adds	r7, #20
 8004034:	46bd      	mov	sp, r7
 8004036:	bc80      	pop	{r7}
 8004038:	4770      	bx	lr

0800403a <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800403a:	b480      	push	{r7}
 800403c:	b083      	sub	sp, #12
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
 8004042:	460b      	mov	r3, r1
 8004044:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004046:	2300      	movs	r3, #0
}
 8004048:	4618      	mov	r0, r3
 800404a:	370c      	adds	r7, #12
 800404c:	46bd      	mov	sp, r7
 800404e:	bc80      	pop	{r7}
 8004050:	4770      	bx	lr

08004052 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004052:	b084      	sub	sp, #16
 8004054:	b580      	push	{r7, lr}
 8004056:	b082      	sub	sp, #8
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	f107 0014 	add.w	r0, r7, #20
 8004060:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f7ff ffa5 	bl	8003fd4 <USB_EnableGlobalInt>

  return HAL_OK;
 800408a:	2300      	movs	r3, #0
}
 800408c:	4618      	mov	r0, r3
 800408e:	3708      	adds	r7, #8
 8004090:	46bd      	mov	sp, r7
 8004092:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004096:	b004      	add	sp, #16
 8004098:	4770      	bx	lr
	...

0800409c <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800409c:	b490      	push	{r4, r7}
 800409e:	b084      	sub	sp, #16
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80040a6:	2300      	movs	r3, #0
 80040a8:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	781b      	ldrb	r3, [r3, #0]
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	4413      	add	r3, r2
 80040b4:	881b      	ldrh	r3, [r3, #0]
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80040bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040c0:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	78db      	ldrb	r3, [r3, #3]
 80040c6:	2b03      	cmp	r3, #3
 80040c8:	d819      	bhi.n	80040fe <USB_ActivateEndpoint+0x62>
 80040ca:	a201      	add	r2, pc, #4	; (adr r2, 80040d0 <USB_ActivateEndpoint+0x34>)
 80040cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040d0:	080040e1 	.word	0x080040e1
 80040d4:	080040f5 	.word	0x080040f5
 80040d8:	08004105 	.word	0x08004105
 80040dc:	080040eb 	.word	0x080040eb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80040e0:	89bb      	ldrh	r3, [r7, #12]
 80040e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80040e6:	81bb      	strh	r3, [r7, #12]
      break;
 80040e8:	e00d      	b.n	8004106 <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80040ea:	89bb      	ldrh	r3, [r7, #12]
 80040ec:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80040f0:	81bb      	strh	r3, [r7, #12]
      break;
 80040f2:	e008      	b.n	8004106 <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80040f4:	89bb      	ldrh	r3, [r7, #12]
 80040f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80040fa:	81bb      	strh	r3, [r7, #12]
      break;
 80040fc:	e003      	b.n	8004106 <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	73fb      	strb	r3, [r7, #15]
      break;
 8004102:	e000      	b.n	8004106 <USB_ActivateEndpoint+0x6a>
      break;
 8004104:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	781b      	ldrb	r3, [r3, #0]
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	441a      	add	r2, r3
 8004110:	89bb      	ldrh	r3, [r7, #12]
 8004112:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004116:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800411a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800411e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004122:	b29b      	uxth	r3, r3
 8004124:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	4413      	add	r3, r2
 8004130:	881b      	ldrh	r3, [r3, #0]
 8004132:	b29b      	uxth	r3, r3
 8004134:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004138:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800413c:	b29a      	uxth	r2, r3
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	781b      	ldrb	r3, [r3, #0]
 8004142:	b29b      	uxth	r3, r3
 8004144:	4313      	orrs	r3, r2
 8004146:	b29c      	uxth	r4, r3
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	441a      	add	r2, r3
 8004152:	4b8a      	ldr	r3, [pc, #552]	; (800437c <USB_ActivateEndpoint+0x2e0>)
 8004154:	4323      	orrs	r3, r4
 8004156:	b29b      	uxth	r3, r3
 8004158:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	7b1b      	ldrb	r3, [r3, #12]
 800415e:	2b00      	cmp	r3, #0
 8004160:	f040 8112 	bne.w	8004388 <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	785b      	ldrb	r3, [r3, #1]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d067      	beq.n	800423c <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800416c:	687c      	ldr	r4, [r7, #4]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004174:	b29b      	uxth	r3, r3
 8004176:	441c      	add	r4, r3
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	011b      	lsls	r3, r3, #4
 800417e:	4423      	add	r3, r4
 8004180:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004184:	461c      	mov	r4, r3
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	88db      	ldrh	r3, [r3, #6]
 800418a:	085b      	lsrs	r3, r3, #1
 800418c:	b29b      	uxth	r3, r3
 800418e:	005b      	lsls	r3, r3, #1
 8004190:	b29b      	uxth	r3, r3
 8004192:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	781b      	ldrb	r3, [r3, #0]
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	4413      	add	r3, r2
 800419e:	881b      	ldrh	r3, [r3, #0]
 80041a0:	b29c      	uxth	r4, r3
 80041a2:	4623      	mov	r3, r4
 80041a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d014      	beq.n	80041d6 <USB_ActivateEndpoint+0x13a>
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	781b      	ldrb	r3, [r3, #0]
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	4413      	add	r3, r2
 80041b6:	881b      	ldrh	r3, [r3, #0]
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041c2:	b29c      	uxth	r4, r3
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	441a      	add	r2, r3
 80041ce:	4b6c      	ldr	r3, [pc, #432]	; (8004380 <USB_ActivateEndpoint+0x2e4>)
 80041d0:	4323      	orrs	r3, r4
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	78db      	ldrb	r3, [r3, #3]
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d018      	beq.n	8004210 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	4413      	add	r3, r2
 80041e8:	881b      	ldrh	r3, [r3, #0]
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041f4:	b29c      	uxth	r4, r3
 80041f6:	f084 0320 	eor.w	r3, r4, #32
 80041fa:	b29c      	uxth	r4, r3
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	441a      	add	r2, r3
 8004206:	4b5d      	ldr	r3, [pc, #372]	; (800437c <USB_ActivateEndpoint+0x2e0>)
 8004208:	4323      	orrs	r3, r4
 800420a:	b29b      	uxth	r3, r3
 800420c:	8013      	strh	r3, [r2, #0]
 800420e:	e22b      	b.n	8004668 <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	781b      	ldrb	r3, [r3, #0]
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	4413      	add	r3, r2
 800421a:	881b      	ldrh	r3, [r3, #0]
 800421c:	b29b      	uxth	r3, r3
 800421e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004222:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004226:	b29c      	uxth	r4, r3
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	441a      	add	r2, r3
 8004232:	4b52      	ldr	r3, [pc, #328]	; (800437c <USB_ActivateEndpoint+0x2e0>)
 8004234:	4323      	orrs	r3, r4
 8004236:	b29b      	uxth	r3, r3
 8004238:	8013      	strh	r3, [r2, #0]
 800423a:	e215      	b.n	8004668 <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800423c:	687c      	ldr	r4, [r7, #4]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004244:	b29b      	uxth	r3, r3
 8004246:	441c      	add	r4, r3
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	011b      	lsls	r3, r3, #4
 800424e:	4423      	add	r3, r4
 8004250:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004254:	461c      	mov	r4, r3
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	88db      	ldrh	r3, [r3, #6]
 800425a:	085b      	lsrs	r3, r3, #1
 800425c:	b29b      	uxth	r3, r3
 800425e:	005b      	lsls	r3, r3, #1
 8004260:	b29b      	uxth	r3, r3
 8004262:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004264:	687c      	ldr	r4, [r7, #4]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800426c:	b29b      	uxth	r3, r3
 800426e:	441c      	add	r4, r3
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	781b      	ldrb	r3, [r3, #0]
 8004274:	011b      	lsls	r3, r3, #4
 8004276:	4423      	add	r3, r4
 8004278:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800427c:	461c      	mov	r4, r3
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	691b      	ldr	r3, [r3, #16]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d10e      	bne.n	80042a4 <USB_ActivateEndpoint+0x208>
 8004286:	8823      	ldrh	r3, [r4, #0]
 8004288:	b29b      	uxth	r3, r3
 800428a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800428e:	b29b      	uxth	r3, r3
 8004290:	8023      	strh	r3, [r4, #0]
 8004292:	8823      	ldrh	r3, [r4, #0]
 8004294:	b29b      	uxth	r3, r3
 8004296:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800429a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800429e:	b29b      	uxth	r3, r3
 80042a0:	8023      	strh	r3, [r4, #0]
 80042a2:	e02d      	b.n	8004300 <USB_ActivateEndpoint+0x264>
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	691b      	ldr	r3, [r3, #16]
 80042a8:	2b3e      	cmp	r3, #62	; 0x3e
 80042aa:	d812      	bhi.n	80042d2 <USB_ActivateEndpoint+0x236>
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	691b      	ldr	r3, [r3, #16]
 80042b0:	085b      	lsrs	r3, r3, #1
 80042b2:	60bb      	str	r3, [r7, #8]
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	691b      	ldr	r3, [r3, #16]
 80042b8:	f003 0301 	and.w	r3, r3, #1
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d002      	beq.n	80042c6 <USB_ActivateEndpoint+0x22a>
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	3301      	adds	r3, #1
 80042c4:	60bb      	str	r3, [r7, #8]
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	029b      	lsls	r3, r3, #10
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	8023      	strh	r3, [r4, #0]
 80042d0:	e016      	b.n	8004300 <USB_ActivateEndpoint+0x264>
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	691b      	ldr	r3, [r3, #16]
 80042d6:	095b      	lsrs	r3, r3, #5
 80042d8:	60bb      	str	r3, [r7, #8]
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	f003 031f 	and.w	r3, r3, #31
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d102      	bne.n	80042ec <USB_ActivateEndpoint+0x250>
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	3b01      	subs	r3, #1
 80042ea:	60bb      	str	r3, [r7, #8]
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	029b      	lsls	r3, r3, #10
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	4413      	add	r3, r2
 800430a:	881b      	ldrh	r3, [r3, #0]
 800430c:	b29c      	uxth	r4, r3
 800430e:	4623      	mov	r3, r4
 8004310:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004314:	2b00      	cmp	r3, #0
 8004316:	d014      	beq.n	8004342 <USB_ActivateEndpoint+0x2a6>
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	4413      	add	r3, r2
 8004322:	881b      	ldrh	r3, [r3, #0]
 8004324:	b29b      	uxth	r3, r3
 8004326:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800432a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800432e:	b29c      	uxth	r4, r3
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	441a      	add	r2, r3
 800433a:	4b12      	ldr	r3, [pc, #72]	; (8004384 <USB_ActivateEndpoint+0x2e8>)
 800433c:	4323      	orrs	r3, r4
 800433e:	b29b      	uxth	r3, r3
 8004340:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	4413      	add	r3, r2
 800434c:	881b      	ldrh	r3, [r3, #0]
 800434e:	b29b      	uxth	r3, r3
 8004350:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004354:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004358:	b29c      	uxth	r4, r3
 800435a:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800435e:	b29c      	uxth	r4, r3
 8004360:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004364:	b29c      	uxth	r4, r3
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	441a      	add	r2, r3
 8004370:	4b02      	ldr	r3, [pc, #8]	; (800437c <USB_ActivateEndpoint+0x2e0>)
 8004372:	4323      	orrs	r3, r4
 8004374:	b29b      	uxth	r3, r3
 8004376:	8013      	strh	r3, [r2, #0]
 8004378:	e176      	b.n	8004668 <USB_ActivateEndpoint+0x5cc>
 800437a:	bf00      	nop
 800437c:	ffff8080 	.word	0xffff8080
 8004380:	ffff80c0 	.word	0xffff80c0
 8004384:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	781b      	ldrb	r3, [r3, #0]
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	4413      	add	r3, r2
 8004392:	881b      	ldrh	r3, [r3, #0]
 8004394:	b29b      	uxth	r3, r3
 8004396:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800439a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800439e:	b29c      	uxth	r4, r3
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	441a      	add	r2, r3
 80043aa:	4b96      	ldr	r3, [pc, #600]	; (8004604 <USB_ActivateEndpoint+0x568>)
 80043ac:	4323      	orrs	r3, r4
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80043b2:	687c      	ldr	r4, [r7, #4]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	441c      	add	r4, r3
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	781b      	ldrb	r3, [r3, #0]
 80043c2:	011b      	lsls	r3, r3, #4
 80043c4:	4423      	add	r3, r4
 80043c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80043ca:	461c      	mov	r4, r3
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	891b      	ldrh	r3, [r3, #8]
 80043d0:	085b      	lsrs	r3, r3, #1
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	005b      	lsls	r3, r3, #1
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	8023      	strh	r3, [r4, #0]
 80043da:	687c      	ldr	r4, [r7, #4]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	441c      	add	r4, r3
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	011b      	lsls	r3, r3, #4
 80043ec:	4423      	add	r3, r4
 80043ee:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80043f2:	461c      	mov	r4, r3
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	895b      	ldrh	r3, [r3, #10]
 80043f8:	085b      	lsrs	r3, r3, #1
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	005b      	lsls	r3, r3, #1
 80043fe:	b29b      	uxth	r3, r3
 8004400:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	785b      	ldrb	r3, [r3, #1]
 8004406:	2b00      	cmp	r3, #0
 8004408:	f040 8088 	bne.w	800451c <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	781b      	ldrb	r3, [r3, #0]
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	4413      	add	r3, r2
 8004416:	881b      	ldrh	r3, [r3, #0]
 8004418:	b29c      	uxth	r4, r3
 800441a:	4623      	mov	r3, r4
 800441c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004420:	2b00      	cmp	r3, #0
 8004422:	d014      	beq.n	800444e <USB_ActivateEndpoint+0x3b2>
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	781b      	ldrb	r3, [r3, #0]
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	4413      	add	r3, r2
 800442e:	881b      	ldrh	r3, [r3, #0]
 8004430:	b29b      	uxth	r3, r3
 8004432:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800443a:	b29c      	uxth	r4, r3
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	441a      	add	r2, r3
 8004446:	4b70      	ldr	r3, [pc, #448]	; (8004608 <USB_ActivateEndpoint+0x56c>)
 8004448:	4323      	orrs	r3, r4
 800444a:	b29b      	uxth	r3, r3
 800444c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	781b      	ldrb	r3, [r3, #0]
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	4413      	add	r3, r2
 8004458:	881b      	ldrh	r3, [r3, #0]
 800445a:	b29c      	uxth	r4, r3
 800445c:	4623      	mov	r3, r4
 800445e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004462:	2b00      	cmp	r3, #0
 8004464:	d014      	beq.n	8004490 <USB_ActivateEndpoint+0x3f4>
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	4413      	add	r3, r2
 8004470:	881b      	ldrh	r3, [r3, #0]
 8004472:	b29b      	uxth	r3, r3
 8004474:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004478:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800447c:	b29c      	uxth	r4, r3
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	441a      	add	r2, r3
 8004488:	4b60      	ldr	r3, [pc, #384]	; (800460c <USB_ActivateEndpoint+0x570>)
 800448a:	4323      	orrs	r3, r4
 800448c:	b29b      	uxth	r3, r3
 800448e:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	4413      	add	r3, r2
 800449a:	881b      	ldrh	r3, [r3, #0]
 800449c:	b29b      	uxth	r3, r3
 800449e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044a6:	b29c      	uxth	r4, r3
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	781b      	ldrb	r3, [r3, #0]
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	441a      	add	r2, r3
 80044b2:	4b56      	ldr	r3, [pc, #344]	; (800460c <USB_ActivateEndpoint+0x570>)
 80044b4:	4323      	orrs	r3, r4
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	781b      	ldrb	r3, [r3, #0]
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	4413      	add	r3, r2
 80044c4:	881b      	ldrh	r3, [r3, #0]
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044d0:	b29c      	uxth	r4, r3
 80044d2:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80044d6:	b29c      	uxth	r4, r3
 80044d8:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80044dc:	b29c      	uxth	r4, r3
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	441a      	add	r2, r3
 80044e8:	4b49      	ldr	r3, [pc, #292]	; (8004610 <USB_ActivateEndpoint+0x574>)
 80044ea:	4323      	orrs	r3, r4
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	4413      	add	r3, r2
 80044fa:	881b      	ldrh	r3, [r3, #0]
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004502:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004506:	b29c      	uxth	r4, r3
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	441a      	add	r2, r3
 8004512:	4b3f      	ldr	r3, [pc, #252]	; (8004610 <USB_ActivateEndpoint+0x574>)
 8004514:	4323      	orrs	r3, r4
 8004516:	b29b      	uxth	r3, r3
 8004518:	8013      	strh	r3, [r2, #0]
 800451a:	e0a5      	b.n	8004668 <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800451c:	687a      	ldr	r2, [r7, #4]
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	781b      	ldrb	r3, [r3, #0]
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	4413      	add	r3, r2
 8004526:	881b      	ldrh	r3, [r3, #0]
 8004528:	b29c      	uxth	r4, r3
 800452a:	4623      	mov	r3, r4
 800452c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004530:	2b00      	cmp	r3, #0
 8004532:	d014      	beq.n	800455e <USB_ActivateEndpoint+0x4c2>
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	781b      	ldrb	r3, [r3, #0]
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	4413      	add	r3, r2
 800453e:	881b      	ldrh	r3, [r3, #0]
 8004540:	b29b      	uxth	r3, r3
 8004542:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004546:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800454a:	b29c      	uxth	r4, r3
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	441a      	add	r2, r3
 8004556:	4b2c      	ldr	r3, [pc, #176]	; (8004608 <USB_ActivateEndpoint+0x56c>)
 8004558:	4323      	orrs	r3, r4
 800455a:	b29b      	uxth	r3, r3
 800455c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	4413      	add	r3, r2
 8004568:	881b      	ldrh	r3, [r3, #0]
 800456a:	b29c      	uxth	r4, r3
 800456c:	4623      	mov	r3, r4
 800456e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004572:	2b00      	cmp	r3, #0
 8004574:	d014      	beq.n	80045a0 <USB_ActivateEndpoint+0x504>
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	4413      	add	r3, r2
 8004580:	881b      	ldrh	r3, [r3, #0]
 8004582:	b29b      	uxth	r3, r3
 8004584:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004588:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800458c:	b29c      	uxth	r4, r3
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	441a      	add	r2, r3
 8004598:	4b1c      	ldr	r3, [pc, #112]	; (800460c <USB_ActivateEndpoint+0x570>)
 800459a:	4323      	orrs	r3, r4
 800459c:	b29b      	uxth	r3, r3
 800459e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	4413      	add	r3, r2
 80045aa:	881b      	ldrh	r3, [r3, #0]
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045b6:	b29c      	uxth	r4, r3
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	441a      	add	r2, r3
 80045c2:	4b11      	ldr	r3, [pc, #68]	; (8004608 <USB_ActivateEndpoint+0x56c>)
 80045c4:	4323      	orrs	r3, r4
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	78db      	ldrb	r3, [r3, #3]
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d020      	beq.n	8004614 <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	4413      	add	r3, r2
 80045dc:	881b      	ldrh	r3, [r3, #0]
 80045de:	b29b      	uxth	r3, r3
 80045e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045e8:	b29c      	uxth	r4, r3
 80045ea:	f084 0320 	eor.w	r3, r4, #32
 80045ee:	b29c      	uxth	r4, r3
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	441a      	add	r2, r3
 80045fa:	4b05      	ldr	r3, [pc, #20]	; (8004610 <USB_ActivateEndpoint+0x574>)
 80045fc:	4323      	orrs	r3, r4
 80045fe:	b29b      	uxth	r3, r3
 8004600:	8013      	strh	r3, [r2, #0]
 8004602:	e01c      	b.n	800463e <USB_ActivateEndpoint+0x5a2>
 8004604:	ffff8180 	.word	0xffff8180
 8004608:	ffffc080 	.word	0xffffc080
 800460c:	ffff80c0 	.word	0xffff80c0
 8004610:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	781b      	ldrb	r3, [r3, #0]
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	4413      	add	r3, r2
 800461e:	881b      	ldrh	r3, [r3, #0]
 8004620:	b29b      	uxth	r3, r3
 8004622:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004626:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800462a:	b29c      	uxth	r4, r3
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	441a      	add	r2, r3
 8004636:	4b0f      	ldr	r3, [pc, #60]	; (8004674 <USB_ActivateEndpoint+0x5d8>)
 8004638:	4323      	orrs	r3, r4
 800463a:	b29b      	uxth	r3, r3
 800463c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	4413      	add	r3, r2
 8004648:	881b      	ldrh	r3, [r3, #0]
 800464a:	b29b      	uxth	r3, r3
 800464c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004650:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004654:	b29c      	uxth	r4, r3
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	441a      	add	r2, r3
 8004660:	4b04      	ldr	r3, [pc, #16]	; (8004674 <USB_ActivateEndpoint+0x5d8>)
 8004662:	4323      	orrs	r3, r4
 8004664:	b29b      	uxth	r3, r3
 8004666:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004668:	7bfb      	ldrb	r3, [r7, #15]
}
 800466a:	4618      	mov	r0, r3
 800466c:	3710      	adds	r7, #16
 800466e:	46bd      	mov	sp, r7
 8004670:	bc90      	pop	{r4, r7}
 8004672:	4770      	bx	lr
 8004674:	ffff8080 	.word	0xffff8080

08004678 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004678:	b590      	push	{r4, r7, lr}
 800467a:	b08d      	sub	sp, #52	; 0x34
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	785b      	ldrb	r3, [r3, #1]
 8004686:	2b01      	cmp	r3, #1
 8004688:	f040 8160 	bne.w	800494c <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	699a      	ldr	r2, [r3, #24]
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	691b      	ldr	r3, [r3, #16]
 8004694:	429a      	cmp	r2, r3
 8004696:	d909      	bls.n	80046ac <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	691b      	ldr	r3, [r3, #16]
 800469c:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	699a      	ldr	r2, [r3, #24]
 80046a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a4:	1ad2      	subs	r2, r2, r3
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	619a      	str	r2, [r3, #24]
 80046aa:	e005      	b.n	80046b8 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	699b      	ldr	r3, [r3, #24]
 80046b0:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	2200      	movs	r2, #0
 80046b6:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	7b1b      	ldrb	r3, [r3, #12]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d119      	bne.n	80046f4 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	6959      	ldr	r1, [r3, #20]
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	88da      	ldrh	r2, [r3, #6]
 80046c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f000 fbb8 	bl	8004e42 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80046d2:	687c      	ldr	r4, [r7, #4]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046da:	b29b      	uxth	r3, r3
 80046dc:	441c      	add	r4, r3
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	781b      	ldrb	r3, [r3, #0]
 80046e2:	011b      	lsls	r3, r3, #4
 80046e4:	4423      	add	r3, r4
 80046e6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80046ea:	461c      	mov	r4, r3
 80046ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	8023      	strh	r3, [r4, #0]
 80046f2:	e10f      	b.n	8004914 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	781b      	ldrb	r3, [r3, #0]
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	4413      	add	r3, r2
 80046fe:	881b      	ldrh	r3, [r3, #0]
 8004700:	b29b      	uxth	r3, r3
 8004702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004706:	2b00      	cmp	r3, #0
 8004708:	d065      	beq.n	80047d6 <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800470a:	687c      	ldr	r4, [r7, #4]
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	785b      	ldrb	r3, [r3, #1]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d148      	bne.n	80047a6 <USB_EPStartXfer+0x12e>
 8004714:	687c      	ldr	r4, [r7, #4]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800471c:	b29b      	uxth	r3, r3
 800471e:	441c      	add	r4, r3
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	011b      	lsls	r3, r3, #4
 8004726:	4423      	add	r3, r4
 8004728:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800472c:	461c      	mov	r4, r3
 800472e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004730:	2b00      	cmp	r3, #0
 8004732:	d10e      	bne.n	8004752 <USB_EPStartXfer+0xda>
 8004734:	8823      	ldrh	r3, [r4, #0]
 8004736:	b29b      	uxth	r3, r3
 8004738:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800473c:	b29b      	uxth	r3, r3
 800473e:	8023      	strh	r3, [r4, #0]
 8004740:	8823      	ldrh	r3, [r4, #0]
 8004742:	b29b      	uxth	r3, r3
 8004744:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004748:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800474c:	b29b      	uxth	r3, r3
 800474e:	8023      	strh	r3, [r4, #0]
 8004750:	e03d      	b.n	80047ce <USB_EPStartXfer+0x156>
 8004752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004754:	2b3e      	cmp	r3, #62	; 0x3e
 8004756:	d810      	bhi.n	800477a <USB_EPStartXfer+0x102>
 8004758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800475a:	085b      	lsrs	r3, r3, #1
 800475c:	627b      	str	r3, [r7, #36]	; 0x24
 800475e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004760:	f003 0301 	and.w	r3, r3, #1
 8004764:	2b00      	cmp	r3, #0
 8004766:	d002      	beq.n	800476e <USB_EPStartXfer+0xf6>
 8004768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476a:	3301      	adds	r3, #1
 800476c:	627b      	str	r3, [r7, #36]	; 0x24
 800476e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004770:	b29b      	uxth	r3, r3
 8004772:	029b      	lsls	r3, r3, #10
 8004774:	b29b      	uxth	r3, r3
 8004776:	8023      	strh	r3, [r4, #0]
 8004778:	e029      	b.n	80047ce <USB_EPStartXfer+0x156>
 800477a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800477c:	095b      	lsrs	r3, r3, #5
 800477e:	627b      	str	r3, [r7, #36]	; 0x24
 8004780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004782:	f003 031f 	and.w	r3, r3, #31
 8004786:	2b00      	cmp	r3, #0
 8004788:	d102      	bne.n	8004790 <USB_EPStartXfer+0x118>
 800478a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478c:	3b01      	subs	r3, #1
 800478e:	627b      	str	r3, [r7, #36]	; 0x24
 8004790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004792:	b29b      	uxth	r3, r3
 8004794:	029b      	lsls	r3, r3, #10
 8004796:	b29b      	uxth	r3, r3
 8004798:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800479c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	8023      	strh	r3, [r4, #0]
 80047a4:	e013      	b.n	80047ce <USB_EPStartXfer+0x156>
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	785b      	ldrb	r3, [r3, #1]
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d10f      	bne.n	80047ce <USB_EPStartXfer+0x156>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	441c      	add	r4, r3
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	011b      	lsls	r3, r3, #4
 80047be:	4423      	add	r3, r4
 80047c0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80047c4:	60fb      	str	r3, [r7, #12]
 80047c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c8:	b29a      	uxth	r2, r3
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	895b      	ldrh	r3, [r3, #10]
 80047d2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80047d4:	e063      	b.n	800489e <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	785b      	ldrb	r3, [r3, #1]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d148      	bne.n	8004870 <USB_EPStartXfer+0x1f8>
 80047de:	687c      	ldr	r4, [r7, #4]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	441c      	add	r4, r3
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	011b      	lsls	r3, r3, #4
 80047f0:	4423      	add	r3, r4
 80047f2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80047f6:	461c      	mov	r4, r3
 80047f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d10e      	bne.n	800481c <USB_EPStartXfer+0x1a4>
 80047fe:	8823      	ldrh	r3, [r4, #0]
 8004800:	b29b      	uxth	r3, r3
 8004802:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004806:	b29b      	uxth	r3, r3
 8004808:	8023      	strh	r3, [r4, #0]
 800480a:	8823      	ldrh	r3, [r4, #0]
 800480c:	b29b      	uxth	r3, r3
 800480e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004812:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004816:	b29b      	uxth	r3, r3
 8004818:	8023      	strh	r3, [r4, #0]
 800481a:	e03d      	b.n	8004898 <USB_EPStartXfer+0x220>
 800481c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800481e:	2b3e      	cmp	r3, #62	; 0x3e
 8004820:	d810      	bhi.n	8004844 <USB_EPStartXfer+0x1cc>
 8004822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004824:	085b      	lsrs	r3, r3, #1
 8004826:	623b      	str	r3, [r7, #32]
 8004828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800482a:	f003 0301 	and.w	r3, r3, #1
 800482e:	2b00      	cmp	r3, #0
 8004830:	d002      	beq.n	8004838 <USB_EPStartXfer+0x1c0>
 8004832:	6a3b      	ldr	r3, [r7, #32]
 8004834:	3301      	adds	r3, #1
 8004836:	623b      	str	r3, [r7, #32]
 8004838:	6a3b      	ldr	r3, [r7, #32]
 800483a:	b29b      	uxth	r3, r3
 800483c:	029b      	lsls	r3, r3, #10
 800483e:	b29b      	uxth	r3, r3
 8004840:	8023      	strh	r3, [r4, #0]
 8004842:	e029      	b.n	8004898 <USB_EPStartXfer+0x220>
 8004844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004846:	095b      	lsrs	r3, r3, #5
 8004848:	623b      	str	r3, [r7, #32]
 800484a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800484c:	f003 031f 	and.w	r3, r3, #31
 8004850:	2b00      	cmp	r3, #0
 8004852:	d102      	bne.n	800485a <USB_EPStartXfer+0x1e2>
 8004854:	6a3b      	ldr	r3, [r7, #32]
 8004856:	3b01      	subs	r3, #1
 8004858:	623b      	str	r3, [r7, #32]
 800485a:	6a3b      	ldr	r3, [r7, #32]
 800485c:	b29b      	uxth	r3, r3
 800485e:	029b      	lsls	r3, r3, #10
 8004860:	b29b      	uxth	r3, r3
 8004862:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004866:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800486a:	b29b      	uxth	r3, r3
 800486c:	8023      	strh	r3, [r4, #0]
 800486e:	e013      	b.n	8004898 <USB_EPStartXfer+0x220>
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	785b      	ldrb	r3, [r3, #1]
 8004874:	2b01      	cmp	r3, #1
 8004876:	d10f      	bne.n	8004898 <USB_EPStartXfer+0x220>
 8004878:	687c      	ldr	r4, [r7, #4]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004880:	b29b      	uxth	r3, r3
 8004882:	441c      	add	r4, r3
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	011b      	lsls	r3, r3, #4
 800488a:	4423      	add	r3, r4
 800488c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004890:	461c      	mov	r4, r3
 8004892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004894:	b29b      	uxth	r3, r3
 8004896:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	891b      	ldrh	r3, [r3, #8]
 800489c:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	6959      	ldr	r1, [r3, #20]
 80048a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f000 faca 	bl	8004e42 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	785b      	ldrb	r3, [r3, #1]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d115      	bne.n	80048e2 <USB_EPStartXfer+0x26a>
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	4413      	add	r3, r2
 80048c0:	881b      	ldrh	r3, [r3, #0]
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048cc:	b29c      	uxth	r4, r3
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	441a      	add	r2, r3
 80048d8:	4b9a      	ldr	r3, [pc, #616]	; (8004b44 <USB_EPStartXfer+0x4cc>)
 80048da:	4323      	orrs	r3, r4
 80048dc:	b29b      	uxth	r3, r3
 80048de:	8013      	strh	r3, [r2, #0]
 80048e0:	e018      	b.n	8004914 <USB_EPStartXfer+0x29c>
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	785b      	ldrb	r3, [r3, #1]
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d114      	bne.n	8004914 <USB_EPStartXfer+0x29c>
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	4413      	add	r3, r2
 80048f4:	881b      	ldrh	r3, [r3, #0]
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004900:	b29c      	uxth	r4, r3
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	009b      	lsls	r3, r3, #2
 800490a:	441a      	add	r2, r3
 800490c:	4b8e      	ldr	r3, [pc, #568]	; (8004b48 <USB_EPStartXfer+0x4d0>)
 800490e:	4323      	orrs	r3, r4
 8004910:	b29b      	uxth	r3, r3
 8004912:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	781b      	ldrb	r3, [r3, #0]
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	4413      	add	r3, r2
 800491e:	881b      	ldrh	r3, [r3, #0]
 8004920:	b29b      	uxth	r3, r3
 8004922:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004926:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800492a:	b29c      	uxth	r4, r3
 800492c:	f084 0310 	eor.w	r3, r4, #16
 8004930:	b29c      	uxth	r4, r3
 8004932:	f084 0320 	eor.w	r3, r4, #32
 8004936:	b29c      	uxth	r4, r3
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	781b      	ldrb	r3, [r3, #0]
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	441a      	add	r2, r3
 8004942:	4b82      	ldr	r3, [pc, #520]	; (8004b4c <USB_EPStartXfer+0x4d4>)
 8004944:	4323      	orrs	r3, r4
 8004946:	b29b      	uxth	r3, r3
 8004948:	8013      	strh	r3, [r2, #0]
 800494a:	e146      	b.n	8004bda <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	699a      	ldr	r2, [r3, #24]
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	691b      	ldr	r3, [r3, #16]
 8004954:	429a      	cmp	r2, r3
 8004956:	d909      	bls.n	800496c <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	691b      	ldr	r3, [r3, #16]
 800495c:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	699a      	ldr	r2, [r3, #24]
 8004962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004964:	1ad2      	subs	r2, r2, r3
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	619a      	str	r2, [r3, #24]
 800496a:	e005      	b.n	8004978 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	699b      	ldr	r3, [r3, #24]
 8004970:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	2200      	movs	r2, #0
 8004976:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	7b1b      	ldrb	r3, [r3, #12]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d148      	bne.n	8004a12 <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004980:	687c      	ldr	r4, [r7, #4]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004988:	b29b      	uxth	r3, r3
 800498a:	441c      	add	r4, r3
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	781b      	ldrb	r3, [r3, #0]
 8004990:	011b      	lsls	r3, r3, #4
 8004992:	4423      	add	r3, r4
 8004994:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004998:	461c      	mov	r4, r3
 800499a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800499c:	2b00      	cmp	r3, #0
 800499e:	d10e      	bne.n	80049be <USB_EPStartXfer+0x346>
 80049a0:	8823      	ldrh	r3, [r4, #0]
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	8023      	strh	r3, [r4, #0]
 80049ac:	8823      	ldrh	r3, [r4, #0]
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	8023      	strh	r3, [r4, #0]
 80049bc:	e0f2      	b.n	8004ba4 <USB_EPStartXfer+0x52c>
 80049be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c0:	2b3e      	cmp	r3, #62	; 0x3e
 80049c2:	d810      	bhi.n	80049e6 <USB_EPStartXfer+0x36e>
 80049c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c6:	085b      	lsrs	r3, r3, #1
 80049c8:	61fb      	str	r3, [r7, #28]
 80049ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049cc:	f003 0301 	and.w	r3, r3, #1
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d002      	beq.n	80049da <USB_EPStartXfer+0x362>
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	3301      	adds	r3, #1
 80049d8:	61fb      	str	r3, [r7, #28]
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	b29b      	uxth	r3, r3
 80049de:	029b      	lsls	r3, r3, #10
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	8023      	strh	r3, [r4, #0]
 80049e4:	e0de      	b.n	8004ba4 <USB_EPStartXfer+0x52c>
 80049e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e8:	095b      	lsrs	r3, r3, #5
 80049ea:	61fb      	str	r3, [r7, #28]
 80049ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ee:	f003 031f 	and.w	r3, r3, #31
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d102      	bne.n	80049fc <USB_EPStartXfer+0x384>
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	3b01      	subs	r3, #1
 80049fa:	61fb      	str	r3, [r7, #28]
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	029b      	lsls	r3, r3, #10
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	8023      	strh	r3, [r4, #0]
 8004a10:	e0c8      	b.n	8004ba4 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	785b      	ldrb	r3, [r3, #1]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d148      	bne.n	8004aac <USB_EPStartXfer+0x434>
 8004a1a:	687c      	ldr	r4, [r7, #4]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	441c      	add	r4, r3
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	011b      	lsls	r3, r3, #4
 8004a2c:	4423      	add	r3, r4
 8004a2e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004a32:	461c      	mov	r4, r3
 8004a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d10e      	bne.n	8004a58 <USB_EPStartXfer+0x3e0>
 8004a3a:	8823      	ldrh	r3, [r4, #0]
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	8023      	strh	r3, [r4, #0]
 8004a46:	8823      	ldrh	r3, [r4, #0]
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	8023      	strh	r3, [r4, #0]
 8004a56:	e03d      	b.n	8004ad4 <USB_EPStartXfer+0x45c>
 8004a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a5a:	2b3e      	cmp	r3, #62	; 0x3e
 8004a5c:	d810      	bhi.n	8004a80 <USB_EPStartXfer+0x408>
 8004a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a60:	085b      	lsrs	r3, r3, #1
 8004a62:	61bb      	str	r3, [r7, #24]
 8004a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a66:	f003 0301 	and.w	r3, r3, #1
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d002      	beq.n	8004a74 <USB_EPStartXfer+0x3fc>
 8004a6e:	69bb      	ldr	r3, [r7, #24]
 8004a70:	3301      	adds	r3, #1
 8004a72:	61bb      	str	r3, [r7, #24]
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	029b      	lsls	r3, r3, #10
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	8023      	strh	r3, [r4, #0]
 8004a7e:	e029      	b.n	8004ad4 <USB_EPStartXfer+0x45c>
 8004a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a82:	095b      	lsrs	r3, r3, #5
 8004a84:	61bb      	str	r3, [r7, #24]
 8004a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a88:	f003 031f 	and.w	r3, r3, #31
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d102      	bne.n	8004a96 <USB_EPStartXfer+0x41e>
 8004a90:	69bb      	ldr	r3, [r7, #24]
 8004a92:	3b01      	subs	r3, #1
 8004a94:	61bb      	str	r3, [r7, #24]
 8004a96:	69bb      	ldr	r3, [r7, #24]
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	029b      	lsls	r3, r3, #10
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004aa2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	8023      	strh	r3, [r4, #0]
 8004aaa:	e013      	b.n	8004ad4 <USB_EPStartXfer+0x45c>
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	785b      	ldrb	r3, [r3, #1]
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d10f      	bne.n	8004ad4 <USB_EPStartXfer+0x45c>
 8004ab4:	687c      	ldr	r4, [r7, #4]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	441c      	add	r4, r3
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	011b      	lsls	r3, r3, #4
 8004ac6:	4423      	add	r3, r4
 8004ac8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004acc:	461c      	mov	r4, r3
 8004ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	8023      	strh	r3, [r4, #0]
 8004ad4:	687c      	ldr	r4, [r7, #4]
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	785b      	ldrb	r3, [r3, #1]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d14e      	bne.n	8004b7c <USB_EPStartXfer+0x504>
 8004ade:	687c      	ldr	r4, [r7, #4]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	441c      	add	r4, r3
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	011b      	lsls	r3, r3, #4
 8004af0:	4423      	add	r3, r4
 8004af2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004af6:	461c      	mov	r4, r3
 8004af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d10e      	bne.n	8004b1c <USB_EPStartXfer+0x4a4>
 8004afe:	8823      	ldrh	r3, [r4, #0]
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	8023      	strh	r3, [r4, #0]
 8004b0a:	8823      	ldrh	r3, [r4, #0]
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	8023      	strh	r3, [r4, #0]
 8004b1a:	e043      	b.n	8004ba4 <USB_EPStartXfer+0x52c>
 8004b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b1e:	2b3e      	cmp	r3, #62	; 0x3e
 8004b20:	d816      	bhi.n	8004b50 <USB_EPStartXfer+0x4d8>
 8004b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b24:	085b      	lsrs	r3, r3, #1
 8004b26:	617b      	str	r3, [r7, #20]
 8004b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b2a:	f003 0301 	and.w	r3, r3, #1
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d002      	beq.n	8004b38 <USB_EPStartXfer+0x4c0>
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	3301      	adds	r3, #1
 8004b36:	617b      	str	r3, [r7, #20]
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	029b      	lsls	r3, r3, #10
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	8023      	strh	r3, [r4, #0]
 8004b42:	e02f      	b.n	8004ba4 <USB_EPStartXfer+0x52c>
 8004b44:	ffff80c0 	.word	0xffff80c0
 8004b48:	ffffc080 	.word	0xffffc080
 8004b4c:	ffff8080 	.word	0xffff8080
 8004b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b52:	095b      	lsrs	r3, r3, #5
 8004b54:	617b      	str	r3, [r7, #20]
 8004b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b58:	f003 031f 	and.w	r3, r3, #31
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d102      	bne.n	8004b66 <USB_EPStartXfer+0x4ee>
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	3b01      	subs	r3, #1
 8004b64:	617b      	str	r3, [r7, #20]
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	029b      	lsls	r3, r3, #10
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	8023      	strh	r3, [r4, #0]
 8004b7a:	e013      	b.n	8004ba4 <USB_EPStartXfer+0x52c>
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	785b      	ldrb	r3, [r3, #1]
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d10f      	bne.n	8004ba4 <USB_EPStartXfer+0x52c>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	441c      	add	r4, r3
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	781b      	ldrb	r3, [r3, #0]
 8004b92:	011b      	lsls	r3, r3, #4
 8004b94:	4423      	add	r3, r4
 8004b96:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004b9a:	613b      	str	r3, [r7, #16]
 8004b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b9e:	b29a      	uxth	r2, r3
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	781b      	ldrb	r3, [r3, #0]
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	4413      	add	r3, r2
 8004bae:	881b      	ldrh	r3, [r3, #0]
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004bb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bba:	b29c      	uxth	r4, r3
 8004bbc:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004bc0:	b29c      	uxth	r4, r3
 8004bc2:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004bc6:	b29c      	uxth	r4, r3
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	441a      	add	r2, r3
 8004bd2:	4b04      	ldr	r3, [pc, #16]	; (8004be4 <USB_EPStartXfer+0x56c>)
 8004bd4:	4323      	orrs	r3, r4
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004bda:	2300      	movs	r3, #0
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3734      	adds	r7, #52	; 0x34
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd90      	pop	{r4, r7, pc}
 8004be4:	ffff8080 	.word	0xffff8080

08004be8 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004be8:	b490      	push	{r4, r7}
 8004bea:	b082      	sub	sp, #8
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	785b      	ldrb	r3, [r3, #1]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d018      	beq.n	8004c2c <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8004bfa:	687a      	ldr	r2, [r7, #4]
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	009b      	lsls	r3, r3, #2
 8004c02:	4413      	add	r3, r2
 8004c04:	881b      	ldrh	r3, [r3, #0]
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c10:	b29c      	uxth	r4, r3
 8004c12:	f084 0310 	eor.w	r3, r4, #16
 8004c16:	b29c      	uxth	r4, r3
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	441a      	add	r2, r3
 8004c22:	4b11      	ldr	r3, [pc, #68]	; (8004c68 <USB_EPSetStall+0x80>)
 8004c24:	4323      	orrs	r3, r4
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	8013      	strh	r3, [r2, #0]
 8004c2a:	e017      	b.n	8004c5c <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	781b      	ldrb	r3, [r3, #0]
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	4413      	add	r3, r2
 8004c36:	881b      	ldrh	r3, [r3, #0]
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c42:	b29c      	uxth	r4, r3
 8004c44:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004c48:	b29c      	uxth	r4, r3
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	441a      	add	r2, r3
 8004c54:	4b04      	ldr	r3, [pc, #16]	; (8004c68 <USB_EPSetStall+0x80>)
 8004c56:	4323      	orrs	r3, r4
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004c5c:	2300      	movs	r3, #0
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3708      	adds	r7, #8
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bc90      	pop	{r4, r7}
 8004c66:	4770      	bx	lr
 8004c68:	ffff8080 	.word	0xffff8080

08004c6c <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004c6c:	b490      	push	{r4, r7}
 8004c6e:	b082      	sub	sp, #8
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	7b1b      	ldrb	r3, [r3, #12]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d17d      	bne.n	8004d7a <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	785b      	ldrb	r3, [r3, #1]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d03d      	beq.n	8004d02 <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	781b      	ldrb	r3, [r3, #0]
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	4413      	add	r3, r2
 8004c90:	881b      	ldrh	r3, [r3, #0]
 8004c92:	b29c      	uxth	r4, r3
 8004c94:	4623      	mov	r3, r4
 8004c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d014      	beq.n	8004cc8 <USB_EPClearStall+0x5c>
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	781b      	ldrb	r3, [r3, #0]
 8004ca4:	009b      	lsls	r3, r3, #2
 8004ca6:	4413      	add	r3, r2
 8004ca8:	881b      	ldrh	r3, [r3, #0]
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cb4:	b29c      	uxth	r4, r3
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	009b      	lsls	r3, r3, #2
 8004cbe:	441a      	add	r2, r3
 8004cc0:	4b31      	ldr	r3, [pc, #196]	; (8004d88 <USB_EPClearStall+0x11c>)
 8004cc2:	4323      	orrs	r3, r4
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	78db      	ldrb	r3, [r3, #3]
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d054      	beq.n	8004d7a <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	4413      	add	r3, r2
 8004cda:	881b      	ldrh	r3, [r3, #0]
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ce2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ce6:	b29c      	uxth	r4, r3
 8004ce8:	f084 0320 	eor.w	r3, r4, #32
 8004cec:	b29c      	uxth	r4, r3
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	781b      	ldrb	r3, [r3, #0]
 8004cf4:	009b      	lsls	r3, r3, #2
 8004cf6:	441a      	add	r2, r3
 8004cf8:	4b24      	ldr	r3, [pc, #144]	; (8004d8c <USB_EPClearStall+0x120>)
 8004cfa:	4323      	orrs	r3, r4
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	8013      	strh	r3, [r2, #0]
 8004d00:	e03b      	b.n	8004d7a <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	009b      	lsls	r3, r3, #2
 8004d0a:	4413      	add	r3, r2
 8004d0c:	881b      	ldrh	r3, [r3, #0]
 8004d0e:	b29c      	uxth	r4, r3
 8004d10:	4623      	mov	r3, r4
 8004d12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d014      	beq.n	8004d44 <USB_EPClearStall+0xd8>
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	781b      	ldrb	r3, [r3, #0]
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	4413      	add	r3, r2
 8004d24:	881b      	ldrh	r3, [r3, #0]
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d30:	b29c      	uxth	r4, r3
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	009b      	lsls	r3, r3, #2
 8004d3a:	441a      	add	r2, r3
 8004d3c:	4b14      	ldr	r3, [pc, #80]	; (8004d90 <USB_EPClearStall+0x124>)
 8004d3e:	4323      	orrs	r3, r4
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	781b      	ldrb	r3, [r3, #0]
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	4413      	add	r3, r2
 8004d4e:	881b      	ldrh	r3, [r3, #0]
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d5a:	b29c      	uxth	r4, r3
 8004d5c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004d60:	b29c      	uxth	r4, r3
 8004d62:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004d66:	b29c      	uxth	r4, r3
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	781b      	ldrb	r3, [r3, #0]
 8004d6e:	009b      	lsls	r3, r3, #2
 8004d70:	441a      	add	r2, r3
 8004d72:	4b06      	ldr	r3, [pc, #24]	; (8004d8c <USB_EPClearStall+0x120>)
 8004d74:	4323      	orrs	r3, r4
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004d7a:	2300      	movs	r3, #0
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3708      	adds	r7, #8
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bc90      	pop	{r4, r7}
 8004d84:	4770      	bx	lr
 8004d86:	bf00      	nop
 8004d88:	ffff80c0 	.word	0xffff80c0
 8004d8c:	ffff8080 	.word	0xffff8080
 8004d90:	ffffc080 	.word	0xffffc080

08004d94 <USB_StopDevice>:
  * @brief  USB_StopDevice : Stop the usb device mode
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_StopDevice(USB_TypeDef *USBx)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b083      	sub	sp, #12
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  /* disable all interrupts and force USB reset */
  USBx->CNTR = USB_CNTR_FRES;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* clear interrupt status register */
  USBx->ISTR = 0;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* switch-off device */
  USBx->CNTR = (USB_CNTR_FRES | USB_CNTR_PDWN);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2203      	movs	r2, #3
 8004db0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004db4:	2300      	movs	r3, #0
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	370c      	adds	r7, #12
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bc80      	pop	{r7}
 8004dbe:	4770      	bx	lr

08004dc0 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b083      	sub	sp, #12
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	460b      	mov	r3, r1
 8004dca:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8004dcc:	78fb      	ldrb	r3, [r7, #3]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d103      	bne.n	8004dda <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2280      	movs	r2, #128	; 0x80
 8004dd6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004dda:	2300      	movs	r3, #0
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	370c      	adds	r7, #12
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bc80      	pop	{r7}
 8004de4:	4770      	bx	lr

08004de6 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8004de6:	b480      	push	{r7}
 8004de8:	b083      	sub	sp, #12
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004dee:	2300      	movs	r3, #0
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	370c      	adds	r7, #12
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bc80      	pop	{r7}
 8004df8:	4770      	bx	lr

08004dfa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8004dfa:	b480      	push	{r7}
 8004dfc:	b083      	sub	sp, #12
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004e02:	2300      	movs	r3, #0
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	370c      	adds	r7, #12
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bc80      	pop	{r7}
 8004e0c:	4770      	bx	lr

08004e0e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8004e0e:	b480      	push	{r7}
 8004e10:	b085      	sub	sp, #20
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8004e20:	68fb      	ldr	r3, [r7, #12]
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3714      	adds	r7, #20
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bc80      	pop	{r7}
 8004e2a:	4770      	bx	lr

08004e2c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b083      	sub	sp, #12
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004e36:	2300      	movs	r3, #0
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	370c      	adds	r7, #12
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bc80      	pop	{r7}
 8004e40:	4770      	bx	lr

08004e42 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004e42:	b480      	push	{r7}
 8004e44:	b08d      	sub	sp, #52	; 0x34
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	60f8      	str	r0, [r7, #12]
 8004e4a:	60b9      	str	r1, [r7, #8]
 8004e4c:	4611      	mov	r1, r2
 8004e4e:	461a      	mov	r2, r3
 8004e50:	460b      	mov	r3, r1
 8004e52:	80fb      	strh	r3, [r7, #6]
 8004e54:	4613      	mov	r3, r2
 8004e56:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004e58:	88bb      	ldrh	r3, [r7, #4]
 8004e5a:	3301      	adds	r3, #1
 8004e5c:	085b      	lsrs	r3, r3, #1
 8004e5e:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004e68:	88fb      	ldrh	r3, [r7, #6]
 8004e6a:	005a      	lsls	r2, r3, #1
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	4413      	add	r3, r2
 8004e70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e74:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8004e76:	6a3b      	ldr	r3, [r7, #32]
 8004e78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e7a:	e01e      	b.n	8004eba <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8004e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7e:	781b      	ldrb	r3, [r3, #0]
 8004e80:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8004e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e84:	3301      	adds	r3, #1
 8004e86:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8004e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8a:	781b      	ldrb	r3, [r3, #0]
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	021b      	lsls	r3, r3, #8
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	461a      	mov	r2, r3
 8004e94:	69bb      	ldr	r3, [r7, #24]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	b29a      	uxth	r2, r3
 8004e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea0:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8004ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea4:	3302      	adds	r3, #2
 8004ea6:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8004ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eaa:	3302      	adds	r3, #2
 8004eac:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8004eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb0:	3301      	adds	r3, #1
 8004eb2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8004eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eb6:	3b01      	subs	r3, #1
 8004eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d1dd      	bne.n	8004e7c <USB_WritePMA+0x3a>
  }
}
 8004ec0:	bf00      	nop
 8004ec2:	3734      	adds	r7, #52	; 0x34
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bc80      	pop	{r7}
 8004ec8:	4770      	bx	lr

08004eca <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004eca:	b480      	push	{r7}
 8004ecc:	b08b      	sub	sp, #44	; 0x2c
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	60f8      	str	r0, [r7, #12]
 8004ed2:	60b9      	str	r1, [r7, #8]
 8004ed4:	4611      	mov	r1, r2
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	460b      	mov	r3, r1
 8004eda:	80fb      	strh	r3, [r7, #6]
 8004edc:	4613      	mov	r3, r2
 8004ede:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8004ee0:	88bb      	ldrh	r3, [r7, #4]
 8004ee2:	085b      	lsrs	r3, r3, #1
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004ef0:	88fb      	ldrh	r3, [r7, #6]
 8004ef2:	005a      	lsls	r2, r3, #1
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	4413      	add	r3, r2
 8004ef8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004efc:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8004efe:	69bb      	ldr	r3, [r7, #24]
 8004f00:	627b      	str	r3, [r7, #36]	; 0x24
 8004f02:	e01b      	b.n	8004f3c <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8004f04:	6a3b      	ldr	r3, [r7, #32]
 8004f06:	881b      	ldrh	r3, [r3, #0]
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8004f0c:	6a3b      	ldr	r3, [r7, #32]
 8004f0e:	3302      	adds	r3, #2
 8004f10:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	b2da      	uxtb	r2, r3
 8004f16:	69fb      	ldr	r3, [r7, #28]
 8004f18:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004f1a:	69fb      	ldr	r3, [r7, #28]
 8004f1c:	3301      	adds	r3, #1
 8004f1e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	0a1b      	lsrs	r3, r3, #8
 8004f24:	b2da      	uxtb	r2, r3
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004f2a:	69fb      	ldr	r3, [r7, #28]
 8004f2c:	3301      	adds	r3, #1
 8004f2e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8004f30:	6a3b      	ldr	r3, [r7, #32]
 8004f32:	3302      	adds	r3, #2
 8004f34:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8004f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f38:	3b01      	subs	r3, #1
 8004f3a:	627b      	str	r3, [r7, #36]	; 0x24
 8004f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d1e0      	bne.n	8004f04 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8004f42:	88bb      	ldrh	r3, [r7, #4]
 8004f44:	f003 0301 	and.w	r3, r3, #1
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d007      	beq.n	8004f5e <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8004f4e:	6a3b      	ldr	r3, [r7, #32]
 8004f50:	881b      	ldrh	r3, [r3, #0]
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	b2da      	uxtb	r2, r3
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	701a      	strb	r2, [r3, #0]
  }
}
 8004f5e:	bf00      	nop
 8004f60:	372c      	adds	r7, #44	; 0x2c
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bc80      	pop	{r7}
 8004f66:	4770      	bx	lr

08004f68 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004f6c:	4904      	ldr	r1, [pc, #16]	; (8004f80 <MX_FATFS_Init+0x18>)
 8004f6e:	4805      	ldr	r0, [pc, #20]	; (8004f84 <MX_FATFS_Init+0x1c>)
 8004f70:	f001 ffb8 	bl	8006ee4 <FATFS_LinkDriver>
 8004f74:	4603      	mov	r3, r0
 8004f76:	461a      	mov	r2, r3
 8004f78:	4b03      	ldr	r3, [pc, #12]	; (8004f88 <MX_FATFS_Init+0x20>)
 8004f7a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004f7c:	bf00      	nop
 8004f7e:	bd80      	pop	{r7, pc}
 8004f80:	20000860 	.word	0x20000860
 8004f84:	2000000c 	.word	0x2000000c
 8004f88:	20000864 	.word	0x20000864

08004f8c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b083      	sub	sp, #12
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	4603      	mov	r3, r0
 8004f94:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8004f96:	4b05      	ldr	r3, [pc, #20]	; (8004fac <USER_initialize+0x20>)
 8004f98:	2201      	movs	r2, #1
 8004f9a:	701a      	strb	r2, [r3, #0]
    return Stat;
 8004f9c:	4b03      	ldr	r3, [pc, #12]	; (8004fac <USER_initialize+0x20>)
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	370c      	adds	r7, #12
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bc80      	pop	{r7}
 8004faa:	4770      	bx	lr
 8004fac:	20000009 	.word	0x20000009

08004fb0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b083      	sub	sp, #12
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8004fba:	4b05      	ldr	r3, [pc, #20]	; (8004fd0 <USER_status+0x20>)
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	701a      	strb	r2, [r3, #0]
    return Stat;
 8004fc0:	4b03      	ldr	r3, [pc, #12]	; (8004fd0 <USER_status+0x20>)
 8004fc2:	781b      	ldrb	r3, [r3, #0]
 8004fc4:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	370c      	adds	r7, #12
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bc80      	pop	{r7}
 8004fce:	4770      	bx	lr
 8004fd0:	20000009 	.word	0x20000009

08004fd4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b085      	sub	sp, #20
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	60b9      	str	r1, [r7, #8]
 8004fdc:	607a      	str	r2, [r7, #4]
 8004fde:	603b      	str	r3, [r7, #0]
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8004fe4:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3714      	adds	r7, #20
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bc80      	pop	{r7}
 8004fee:	4770      	bx	lr

08004ff0 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b085      	sub	sp, #20
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	60b9      	str	r1, [r7, #8]
 8004ff8:	607a      	str	r2, [r7, #4]
 8004ffa:	603b      	str	r3, [r7, #0]
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8005000:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8005002:	4618      	mov	r0, r3
 8005004:	3714      	adds	r7, #20
 8005006:	46bd      	mov	sp, r7
 8005008:	bc80      	pop	{r7}
 800500a:	4770      	bx	lr

0800500c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800500c:	b480      	push	{r7}
 800500e:	b085      	sub	sp, #20
 8005010:	af00      	add	r7, sp, #0
 8005012:	4603      	mov	r3, r0
 8005014:	603a      	str	r2, [r7, #0]
 8005016:	71fb      	strb	r3, [r7, #7]
 8005018:	460b      	mov	r3, r1
 800501a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	73fb      	strb	r3, [r7, #15]
    return res;
 8005020:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8005022:	4618      	mov	r0, r3
 8005024:	3714      	adds	r7, #20
 8005026:	46bd      	mov	sp, r7
 8005028:	bc80      	pop	{r7}
 800502a:	4770      	bx	lr

0800502c <__NVIC_SystemReset>:
{
 800502c:	b480      	push	{r7}
 800502e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005030:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8005034:	4b05      	ldr	r3, [pc, #20]	; (800504c <__NVIC_SystemReset+0x20>)
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800503c:	4903      	ldr	r1, [pc, #12]	; (800504c <__NVIC_SystemReset+0x20>)
 800503e:	4b04      	ldr	r3, [pc, #16]	; (8005050 <__NVIC_SystemReset+0x24>)
 8005040:	4313      	orrs	r3, r2
 8005042:	60cb      	str	r3, [r1, #12]
 8005044:	f3bf 8f4f 	dsb	sy
    __NOP();
 8005048:	bf00      	nop
 800504a:	e7fd      	b.n	8005048 <__NVIC_SystemReset+0x1c>
 800504c:	e000ed00 	.word	0xe000ed00
 8005050:	05fa0004 	.word	0x05fa0004

08005054 <USBD_DFU_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_DFU_Init(USBD_HandleTypeDef *pdev,
                              uint8_t cfgidx)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b084      	sub	sp, #16
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	460b      	mov	r3, r1
 800505e:	70fb      	strb	r3, [r7, #3]
  USBD_DFU_HandleTypeDef   *hdfu;

  /* Allocate Audio structure */
  pdev->pClassData = USBD_malloc(sizeof(USBD_DFU_HandleTypeDef));
 8005060:	f240 401c 	movw	r0, #1052	; 0x41c
 8005064:	f002 fb12 	bl	800768c <USBD_static_malloc>
 8005068:	4602      	mov	r2, r0
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005076:	2b00      	cmp	r3, #0
 8005078:	d101      	bne.n	800507e <USBD_DFU_Init+0x2a>
  {
    return USBD_FAIL;
 800507a:	2302      	movs	r3, #2
 800507c:	e03f      	b.n	80050fe <USBD_DFU_Init+0xaa>
  }
  else
  {
    hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005084:	60fb      	str	r3, [r7, #12]

    hdfu->alt_setting = 0U;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2200      	movs	r2, #0
 800508a:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005094:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    hdfu->wblock_num = 0U;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2200      	movs	r2, #0
 800509c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2200      	movs	r2, #0
 80050a4:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

    hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2200      	movs	r2, #0
 80050ac:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
    hdfu->dev_state = DFU_STATE_IDLE;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2202      	movs	r2, #2
 80050b4:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[0] = DFU_ERROR_NONE;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2200      	movs	r2, #0
 80050bc:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2200      	movs	r2, #0
 80050c4:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2200      	movs	r2, #0
 80050d4:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = DFU_STATE_IDLE;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2202      	movs	r2, #2
 80050dc:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2200      	movs	r2, #0
 80050e4:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415

    /* Initialize Hardware layer */
    if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Init() != USBD_OK)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	4798      	blx	r3
 80050f2:	4603      	mov	r3, r0
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d001      	beq.n	80050fc <USBD_DFU_Init+0xa8>
    {
      return USBD_FAIL;
 80050f8:	2302      	movs	r3, #2
 80050fa:	e000      	b.n	80050fe <USBD_DFU_Init+0xaa>
    }
  }
  return USBD_OK;
 80050fc:	2300      	movs	r3, #0
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3710      	adds	r7, #16
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}

08005106 <USBD_DFU_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_DFU_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 8005106:	b580      	push	{r7, lr}
 8005108:	b084      	sub	sp, #16
 800510a:	af00      	add	r7, sp, #0
 800510c:	6078      	str	r0, [r7, #4]
 800510e:	460b      	mov	r3, r1
 8005110:	70fb      	strb	r3, [r7, #3]
  USBD_DFU_HandleTypeDef   *hdfu;
  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005118:	60fb      	str	r3, [r7, #12]

  hdfu->wblock_num = 0U;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2200      	movs	r2, #0
 800511e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdfu->wlength = 0U;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2200      	movs	r2, #0
 8005126:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

  hdfu->dev_state = DFU_STATE_IDLE;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2202      	movs	r2, #2
 800512e:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2200      	movs	r2, #0
 8005136:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2202      	movs	r2, #2
 800513e:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005148:	2b00      	cmp	r3, #0
 800514a:	d00e      	beq.n	800516a <USBD_DFU_DeInit+0x64>
  {
    /* De-Initialize Hardware layer */
    ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->DeInit();
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800515c:	4618      	mov	r0, r3
 800515e:	f002 faa1 	bl	80076a4 <USBD_static_free>
    pdev->pClassData = NULL;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2200      	movs	r2, #0
 8005166:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 800516a:	2300      	movs	r3, #0
}
 800516c:	4618      	mov	r0, r3
 800516e:	3710      	adds	r7, #16
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}

08005174 <USBD_DFU_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_DFU_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b086      	sub	sp, #24
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef   *hdfu;
  uint8_t *pbuf = 0U;
 800517e:	2300      	movs	r3, #0
 8005180:	617b      	str	r3, [r7, #20]
  uint16_t len = 0U;
 8005182:	2300      	movs	r3, #0
 8005184:	827b      	strh	r3, [r7, #18]
  uint16_t status_info = 0U;
 8005186:	2300      	movs	r3, #0
 8005188:	817b      	strh	r3, [r7, #10]
  uint8_t ret = USBD_OK;
 800518a:	2300      	movs	r3, #0
 800518c:	747b      	strb	r3, [r7, #17]

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005194:	60fb      	str	r3, [r7, #12]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	781b      	ldrb	r3, [r3, #0]
 800519a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d03f      	beq.n	8005222 <USBD_DFU_Setup+0xae>
 80051a2:	2b20      	cmp	r3, #32
 80051a4:	f040 80c2 	bne.w	800532c <USBD_DFU_Setup+0x1b8>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	785b      	ldrb	r3, [r3, #1]
 80051ac:	2b06      	cmp	r3, #6
 80051ae:	d830      	bhi.n	8005212 <USBD_DFU_Setup+0x9e>
 80051b0:	a201      	add	r2, pc, #4	; (adr r2, 80051b8 <USBD_DFU_Setup+0x44>)
 80051b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051b6:	bf00      	nop
 80051b8:	08005209 	.word	0x08005209
 80051bc:	080051d5 	.word	0x080051d5
 80051c0:	080051df 	.word	0x080051df
 80051c4:	080051e9 	.word	0x080051e9
 80051c8:	080051f1 	.word	0x080051f1
 80051cc:	080051f9 	.word	0x080051f9
 80051d0:	08005201 	.word	0x08005201
      {
        case DFU_DNLOAD:
          DFU_Download(pdev, req);
 80051d4:	6839      	ldr	r1, [r7, #0]
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 fa90 	bl	80056fc <DFU_Download>
          break;
 80051dc:	e020      	b.n	8005220 <USBD_DFU_Setup+0xac>

        case DFU_UPLOAD:
          DFU_Upload(pdev, req);
 80051de:	6839      	ldr	r1, [r7, #0]
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f000 faf5 	bl	80057d0 <DFU_Upload>
          break;
 80051e6:	e01b      	b.n	8005220 <USBD_DFU_Setup+0xac>

        case DFU_GETSTATUS:
          DFU_GetStatus(pdev);
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f000 fbcd 	bl	8005988 <DFU_GetStatus>
          break;
 80051ee:	e017      	b.n	8005220 <USBD_DFU_Setup+0xac>

        case DFU_CLRSTATUS:
          DFU_ClearStatus(pdev);
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f000 fc7b 	bl	8005aec <DFU_ClearStatus>
          break;
 80051f6:	e013      	b.n	8005220 <USBD_DFU_Setup+0xac>

        case DFU_GETSTATE:
          DFU_GetState(pdev);
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f000 fcc6 	bl	8005b8a <DFU_GetState>
          break;
 80051fe:	e00f      	b.n	8005220 <USBD_DFU_Setup+0xac>

        case DFU_ABORT:
          DFU_Abort(pdev);
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f000 fcd6 	bl	8005bb2 <DFU_Abort>
          break;
 8005206:	e00b      	b.n	8005220 <USBD_DFU_Setup+0xac>

        case DFU_DETACH:
          DFU_Detach(pdev, req);
 8005208:	6839      	ldr	r1, [r7, #0]
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f000 fa16 	bl	800563c <DFU_Detach>
          break;
 8005210:	e006      	b.n	8005220 <USBD_DFU_Setup+0xac>

        default:
          USBD_CtlError(pdev, req);
 8005212:	6839      	ldr	r1, [r7, #0]
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f001 fd2d 	bl	8006c74 <USBD_CtlError>
          ret = USBD_FAIL;
 800521a:	2302      	movs	r3, #2
 800521c:	747b      	strb	r3, [r7, #17]
          break;
 800521e:	bf00      	nop
      }
      break;
 8005220:	e08b      	b.n	800533a <USBD_DFU_Setup+0x1c6>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	785b      	ldrb	r3, [r3, #1]
 8005226:	2b0b      	cmp	r3, #11
 8005228:	d878      	bhi.n	800531c <USBD_DFU_Setup+0x1a8>
 800522a:	a201      	add	r2, pc, #4	; (adr r2, 8005230 <USBD_DFU_Setup+0xbc>)
 800522c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005230:	08005261 	.word	0x08005261
 8005234:	0800531d 	.word	0x0800531d
 8005238:	0800531d 	.word	0x0800531d
 800523c:	0800531d 	.word	0x0800531d
 8005240:	0800531d 	.word	0x0800531d
 8005244:	0800531d 	.word	0x0800531d
 8005248:	08005289 	.word	0x08005289
 800524c:	0800531d 	.word	0x0800531d
 8005250:	0800531d 	.word	0x0800531d
 8005254:	0800531d 	.word	0x0800531d
 8005258:	080052b3 	.word	0x080052b3
 800525c:	080052dd 	.word	0x080052dd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005266:	2b03      	cmp	r3, #3
 8005268:	d107      	bne.n	800527a <USBD_DFU_Setup+0x106>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800526a:	f107 030a 	add.w	r3, r7, #10
 800526e:	2202      	movs	r2, #2
 8005270:	4619      	mov	r1, r3
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f001 fd68 	bl	8006d48 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005278:	e057      	b.n	800532a <USBD_DFU_Setup+0x1b6>
            USBD_CtlError(pdev, req);
 800527a:	6839      	ldr	r1, [r7, #0]
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f001 fcf9 	bl	8006c74 <USBD_CtlError>
            ret = USBD_FAIL;
 8005282:	2302      	movs	r3, #2
 8005284:	747b      	strb	r3, [r7, #17]
          break;
 8005286:	e050      	b.n	800532a <USBD_DFU_Setup+0x1b6>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == DFU_DESCRIPTOR_TYPE)
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	885b      	ldrh	r3, [r3, #2]
 800528c:	0a1b      	lsrs	r3, r3, #8
 800528e:	b29b      	uxth	r3, r3
 8005290:	2b21      	cmp	r3, #33	; 0x21
 8005292:	d107      	bne.n	80052a4 <USBD_DFU_Setup+0x130>
          {
            pbuf = USBD_DFU_CfgDesc + (9U * (USBD_DFU_MAX_ITF_NUM + 1U));
 8005294:	4b2b      	ldr	r3, [pc, #172]	; (8005344 <USBD_DFU_Setup+0x1d0>)
 8005296:	617b      	str	r3, [r7, #20]
            len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	88db      	ldrh	r3, [r3, #6]
 800529c:	2b09      	cmp	r3, #9
 800529e:	bf28      	it	cs
 80052a0:	2309      	movcs	r3, #9
 80052a2:	827b      	strh	r3, [r7, #18]
          }

          USBD_CtlSendData(pdev, pbuf, len);
 80052a4:	8a7b      	ldrh	r3, [r7, #18]
 80052a6:	461a      	mov	r2, r3
 80052a8:	6979      	ldr	r1, [r7, #20]
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f001 fd4c 	bl	8006d48 <USBD_CtlSendData>
          break;
 80052b0:	e03b      	b.n	800532a <USBD_DFU_Setup+0x1b6>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80052b8:	2b03      	cmp	r3, #3
 80052ba:	d108      	bne.n	80052ce <USBD_DFU_Setup+0x15a>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hdfu->alt_setting, 1U);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80052c2:	2201      	movs	r2, #1
 80052c4:	4619      	mov	r1, r3
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f001 fd3e 	bl	8006d48 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80052cc:	e02d      	b.n	800532a <USBD_DFU_Setup+0x1b6>
            USBD_CtlError(pdev, req);
 80052ce:	6839      	ldr	r1, [r7, #0]
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f001 fccf 	bl	8006c74 <USBD_CtlError>
            ret = USBD_FAIL;
 80052d6:	2302      	movs	r3, #2
 80052d8:	747b      	strb	r3, [r7, #17]
          break;
 80052da:	e026      	b.n	800532a <USBD_DFU_Setup+0x1b6>

        case USB_REQ_SET_INTERFACE:
          if ((uint8_t)(req->wValue) < USBD_DFU_MAX_ITF_NUM)
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	885b      	ldrh	r3, [r3, #2]
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d113      	bne.n	800530e <USBD_DFU_Setup+0x19a>
          {
            if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80052ec:	2b03      	cmp	r3, #3
 80052ee:	d107      	bne.n	8005300 <USBD_DFU_Setup+0x18c>
            {
              hdfu->alt_setting = (uint8_t)(req->wValue);
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	885b      	ldrh	r3, [r3, #2]
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	461a      	mov	r2, r3
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
          {
            /* Call the error management function (command will be nacked */
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80052fe:	e014      	b.n	800532a <USBD_DFU_Setup+0x1b6>
              USBD_CtlError(pdev, req);
 8005300:	6839      	ldr	r1, [r7, #0]
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f001 fcb6 	bl	8006c74 <USBD_CtlError>
              ret = USBD_FAIL;
 8005308:	2302      	movs	r3, #2
 800530a:	747b      	strb	r3, [r7, #17]
          break;
 800530c:	e00d      	b.n	800532a <USBD_DFU_Setup+0x1b6>
            USBD_CtlError(pdev, req);
 800530e:	6839      	ldr	r1, [r7, #0]
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f001 fcaf 	bl	8006c74 <USBD_CtlError>
            ret = USBD_FAIL;
 8005316:	2302      	movs	r3, #2
 8005318:	747b      	strb	r3, [r7, #17]
          break;
 800531a:	e006      	b.n	800532a <USBD_DFU_Setup+0x1b6>

        default:
          USBD_CtlError(pdev, req);
 800531c:	6839      	ldr	r1, [r7, #0]
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f001 fca8 	bl	8006c74 <USBD_CtlError>
          ret = USBD_FAIL;
 8005324:	2302      	movs	r3, #2
 8005326:	747b      	strb	r3, [r7, #17]
          break;
 8005328:	bf00      	nop
      }
      break;
 800532a:	e006      	b.n	800533a <USBD_DFU_Setup+0x1c6>

    default:
      USBD_CtlError(pdev, req);
 800532c:	6839      	ldr	r1, [r7, #0]
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f001 fca0 	bl	8006c74 <USBD_CtlError>
      ret = USBD_FAIL;
 8005334:	2302      	movs	r3, #2
 8005336:	747b      	strb	r3, [r7, #17]
      break;
 8005338:	bf00      	nop
  }

  return ret;
 800533a:	7c7b      	ldrb	r3, [r7, #17]
}
 800533c:	4618      	mov	r0, r3
 800533e:	3718      	adds	r7, #24
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}
 8005344:	2000006e 	.word	0x2000006e

08005348 <USBD_DFU_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_DFU_GetCfgDesc(uint16_t *length)
{
 8005348:	b480      	push	{r7}
 800534a:	b083      	sub	sp, #12
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_DFU_CfgDesc);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	221b      	movs	r2, #27
 8005354:	801a      	strh	r2, [r3, #0]
  return USBD_DFU_CfgDesc;
 8005356:	4b03      	ldr	r3, [pc, #12]	; (8005364 <USBD_DFU_GetCfgDesc+0x1c>)
}
 8005358:	4618      	mov	r0, r3
 800535a:	370c      	adds	r7, #12
 800535c:	46bd      	mov	sp, r7
 800535e:	bc80      	pop	{r7}
 8005360:	4770      	bx	lr
 8005362:	bf00      	nop
 8005364:	2000005c 	.word	0x2000005c

08005368 <USBD_DFU_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_DFU_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8005368:	b480      	push	{r7}
 800536a:	b083      	sub	sp, #12
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	460b      	mov	r3, r1
 8005372:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 8005374:	2300      	movs	r3, #0
}
 8005376:	4618      	mov	r0, r3
 8005378:	370c      	adds	r7, #12
 800537a:	46bd      	mov	sp, r7
 800537c:	bc80      	pop	{r7}
 800537e:	4770      	bx	lr

08005380 <USBD_DFU_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005380:	b480      	push	{r7}
 8005382:	b083      	sub	sp, #12
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]

  return USBD_OK;
 8005388:	2300      	movs	r3, #0
}
 800538a:	4618      	mov	r0, r3
 800538c:	370c      	adds	r7, #12
 800538e:	46bd      	mov	sp, r7
 8005390:	bc80      	pop	{r7}
 8005392:	4770      	bx	lr

08005394 <USBD_DFU_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b086      	sub	sp, #24
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  uint32_t addr;
  USBD_SetupReqTypedef     req;
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053a2:	617b      	str	r3, [r7, #20]

  if (hdfu->dev_state == DFU_STATE_DNLOAD_BUSY)
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80053aa:	2b04      	cmp	r3, #4
 80053ac:	f040 80cb 	bne.w	8005546 <USBD_DFU_EP0_TxReady+0x1b2>
  {
    /* Decode the Special Command*/
    if (hdfu->wblock_num == 0U)
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	f040 8086 	bne.w	80054c8 <USBD_DFU_EP0_TxReady+0x134>
    {
      if ((hdfu->buffer.d8[0] == DFU_CMD_GETCOMMANDS) && (hdfu->wlength == 1U))
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d105      	bne.n	80053d0 <USBD_DFU_EP0_TxReady+0x3c>
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80053ca:	2b01      	cmp	r3, #1
 80053cc:	f000 809b 	beq.w	8005506 <USBD_DFU_EP0_TxReady+0x172>
      {

      }
      else if ((hdfu->buffer.d8[0] == DFU_CMD_SETADDRESSPOINTER) && (hdfu->wlength == 5U))
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	2b21      	cmp	r3, #33	; 0x21
 80053d6:	d129      	bne.n	800542c <USBD_DFU_EP0_TxReady+0x98>
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80053de:	2b05      	cmp	r3, #5
 80053e0:	d124      	bne.n	800542c <USBD_DFU_EP0_TxReady+0x98>
      {
        hdfu->data_ptr = hdfu->buffer.d8[1];
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	785b      	ldrb	r3, [r3, #1]
 80053e6:	461a      	mov	r2, r3
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	789b      	ldrb	r3, [r3, #2]
 80053f8:	021b      	lsls	r3, r3, #8
 80053fa:	441a      	add	r2, r3
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	78db      	ldrb	r3, [r3, #3]
 800540c:	041b      	lsls	r3, r3, #16
 800540e:	441a      	add	r2, r3
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	791b      	ldrb	r3, [r3, #4]
 8005420:	061b      	lsls	r3, r3, #24
 8005422:	441a      	add	r2, r3
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 800542a:	e06c      	b.n	8005506 <USBD_DFU_EP0_TxReady+0x172>
      }
      else if ((hdfu->buffer.d8[0] == DFU_CMD_ERASE) && (hdfu->wlength == 5U))
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	781b      	ldrb	r3, [r3, #0]
 8005430:	2b41      	cmp	r3, #65	; 0x41
 8005432:	d136      	bne.n	80054a2 <USBD_DFU_EP0_TxReady+0x10e>
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800543a:	2b05      	cmp	r3, #5
 800543c:	d131      	bne.n	80054a2 <USBD_DFU_EP0_TxReady+0x10e>
      {
        hdfu->data_ptr = hdfu->buffer.d8[1];
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	785b      	ldrb	r3, [r3, #1]
 8005442:	461a      	mov	r2, r3
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	789b      	ldrb	r3, [r3, #2]
 8005454:	021b      	lsls	r3, r3, #8
 8005456:	441a      	add	r2, r3
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	78db      	ldrb	r3, [r3, #3]
 8005468:	041b      	lsls	r3, r3, #16
 800546a:	441a      	add	r2, r3
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	791b      	ldrb	r3, [r3, #4]
 800547c:	061b      	lsls	r3, r3, #24
 800547e:	441a      	add	r2, r3
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

        if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Erase(hdfu->data_ptr) != USBD_OK)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	697a      	ldr	r2, [r7, #20]
 8005490:	f8d2 2408 	ldr.w	r2, [r2, #1032]	; 0x408
 8005494:	4610      	mov	r0, r2
 8005496:	4798      	blx	r3
 8005498:	4603      	mov	r3, r0
 800549a:	2b00      	cmp	r3, #0
 800549c:	d033      	beq.n	8005506 <USBD_DFU_EP0_TxReady+0x172>
        {
          return USBD_FAIL;
 800549e:	2302      	movs	r3, #2
 80054a0:	e05a      	b.n	8005558 <USBD_DFU_EP0_TxReady+0x1c4>
        }
      }
      else
      {
        /* Reset the global length and block number */
        hdfu->wlength = 0U;
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	2200      	movs	r2, #0
 80054a6:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
        hdfu->wblock_num = 0U;
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	2200      	movs	r2, #0
 80054ae:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
        /* Call the error management function (command will be nacked) */
        req.bmRequest = 0U;
 80054b2:	2300      	movs	r3, #0
 80054b4:	723b      	strb	r3, [r7, #8]
        req.wLength = 1U;
 80054b6:	2301      	movs	r3, #1
 80054b8:	81fb      	strh	r3, [r7, #14]
        USBD_CtlError(pdev, &req);
 80054ba:	f107 0308 	add.w	r3, r7, #8
 80054be:	4619      	mov	r1, r3
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f001 fbd7 	bl	8006c74 <USBD_CtlError>
 80054c6:	e01e      	b.n	8005506 <USBD_DFU_EP0_TxReady+0x172>
      }
    }
    /* Regular Download Command */
    else
    {
      if (hdfu->wblock_num > 1U)
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	d919      	bls.n	8005506 <USBD_DFU_EP0_TxReady+0x172>
      {
        /* Decode the required address */
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80054d8:	4b21      	ldr	r3, [pc, #132]	; (8005560 <USBD_DFU_EP0_TxReady+0x1cc>)
 80054da:	4413      	add	r3, r2
 80054dc:	029a      	lsls	r2, r3, #10
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80054e4:	4413      	add	r3, r2
 80054e6:	613b      	str	r3, [r7, #16]

        /* Preform the write operation */
        if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Write(hdfu->buffer.d8,
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80054ee:	691b      	ldr	r3, [r3, #16]
 80054f0:	6978      	ldr	r0, [r7, #20]
 80054f2:	6939      	ldr	r1, [r7, #16]
 80054f4:	697a      	ldr	r2, [r7, #20]
 80054f6:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 80054fa:	4798      	blx	r3
 80054fc:	4603      	mov	r3, r0
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d001      	beq.n	8005506 <USBD_DFU_EP0_TxReady+0x172>
                                                              (uint8_t *)addr, hdfu->wlength) != USBD_OK)
        {
          return USBD_FAIL;
 8005502:	2302      	movs	r3, #2
 8005504:	e028      	b.n	8005558 <USBD_DFU_EP0_TxReady+0x1c4>
        }
      }
    }

    /* Reset the global length and block number */
    hdfu->wlength = 0U;
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	2200      	movs	r2, #0
 800550a:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    hdfu->wblock_num = 0U;
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	2200      	movs	r2, #0
 8005512:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

    /* Update the state machine */
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	2203      	movs	r2, #3
 800551a:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	2200      	movs	r2, #0
 8005522:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	2200      	movs	r2, #0
 800552a:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	2200      	movs	r2, #0
 8005532:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    return USBD_OK;
 8005542:	2300      	movs	r3, #0
 8005544:	e008      	b.n	8005558 <USBD_DFU_EP0_TxReady+0x1c4>
  }
  else
  {
    if (hdfu->dev_state == DFU_STATE_MANIFEST)/* Manifestation in progress */
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800554c:	2b07      	cmp	r3, #7
 800554e:	d102      	bne.n	8005556 <USBD_DFU_EP0_TxReady+0x1c2>
    {
      /* Start leaving DFU mode */
      DFU_Leave(pdev);
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f000 fb7b 	bl	8005c4c <DFU_Leave>
    }
  }

  return USBD_OK;
 8005556:	2300      	movs	r3, #0
}
 8005558:	4618      	mov	r0, r3
 800555a:	3718      	adds	r7, #24
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}
 8005560:	003ffffe 	.word	0x003ffffe

08005564 <USBD_DFU_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_SOF(USBD_HandleTypeDef *pdev)
{
 8005564:	b480      	push	{r7}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]

  return USBD_OK;
 800556c:	2300      	movs	r3, #0
}
 800556e:	4618      	mov	r0, r3
 8005570:	370c      	adds	r7, #12
 8005572:	46bd      	mov	sp, r7
 8005574:	bc80      	pop	{r7}
 8005576:	4770      	bx	lr

08005578 <USBD_DFU_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_DFU_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	460b      	mov	r3, r1
 8005582:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 8005584:	2300      	movs	r3, #0
}
 8005586:	4618      	mov	r0, r3
 8005588:	370c      	adds	r7, #12
 800558a:	46bd      	mov	sp, r7
 800558c:	bc80      	pop	{r7}
 800558e:	4770      	bx	lr

08005590 <USBD_DFU_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_DFU_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005590:	b480      	push	{r7}
 8005592:	b083      	sub	sp, #12
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	460b      	mov	r3, r1
 800559a:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 800559c:	2300      	movs	r3, #0
}
 800559e:	4618      	mov	r0, r3
 80055a0:	370c      	adds	r7, #12
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bc80      	pop	{r7}
 80055a6:	4770      	bx	lr

080055a8 <USBD_DFU_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_DFU_DataOut(USBD_HandleTypeDef *pdev,
                                 uint8_t epnum)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b083      	sub	sp, #12
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	460b      	mov	r3, r1
 80055b2:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 80055b4:	2300      	movs	r3, #0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	370c      	adds	r7, #12
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bc80      	pop	{r7}
 80055be:	4770      	bx	lr

080055c0 <USBD_DFU_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_DFU_GetDeviceQualifierDesc(uint16_t *length)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b083      	sub	sp, #12
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_DFU_DeviceQualifierDesc);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	220a      	movs	r2, #10
 80055cc:	801a      	strh	r2, [r3, #0]
  return USBD_DFU_DeviceQualifierDesc;
 80055ce:	4b03      	ldr	r3, [pc, #12]	; (80055dc <USBD_DFU_GetDeviceQualifierDesc+0x1c>)
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	370c      	adds	r7, #12
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bc80      	pop	{r7}
 80055d8:	4770      	bx	lr
 80055da:	bf00      	nop
 80055dc:	20000078 	.word	0x20000078

080055e0 <USBD_DFU_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_DFU_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b084      	sub	sp, #16
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	60f8      	str	r0, [r7, #12]
 80055e8:	460b      	mov	r3, r1
 80055ea:	607a      	str	r2, [r7, #4]
 80055ec:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[255];
  /* Check if the requested string interface is supported */
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 80055ee:	7afb      	ldrb	r3, [r7, #11]
 80055f0:	2b06      	cmp	r3, #6
 80055f2:	d80a      	bhi.n	800560a <USBD_DFU_GetUsrStringDesc+0x2a>
  {
    USBD_GetString((uint8_t *)((USBD_DFU_MediaTypeDef *)pdev->pUserData)->pStrDesc, USBD_StrDesc, length);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	4905      	ldr	r1, [pc, #20]	; (8005614 <USBD_DFU_GetUsrStringDesc+0x34>)
 8005600:	4618      	mov	r0, r3
 8005602:	f001 fb48 	bl	8006c96 <USBD_GetString>
    return USBD_StrDesc;
 8005606:	4b03      	ldr	r3, [pc, #12]	; (8005614 <USBD_DFU_GetUsrStringDesc+0x34>)
 8005608:	e000      	b.n	800560c <USBD_DFU_GetUsrStringDesc+0x2c>
  }
  /* Not supported Interface Descriptor index */
  else
  {
    return NULL;
 800560a:	2300      	movs	r3, #0
  }
}
 800560c:	4618      	mov	r0, r3
 800560e:	3710      	adds	r7, #16
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}
 8005614:	2000010c 	.word	0x2000010c

08005618 <USBD_DFU_RegisterMedia>:
* @param  fops: storage callback
* @retval status
*/
uint8_t  USBD_DFU_RegisterMedia(USBD_HandleTypeDef   *pdev,
                                USBD_DFU_MediaTypeDef *fops)
{
 8005618:	b480      	push	{r7}
 800561a:	b083      	sub	sp, #12
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	6039      	str	r1, [r7, #0]
  if (fops != NULL)
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d003      	beq.n	8005630 <USBD_DFU_RegisterMedia+0x18>
  {
    pdev->pUserData = fops;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	683a      	ldr	r2, [r7, #0]
 800562c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }
  return 0U;
 8005630:	2300      	movs	r3, #0
}
 8005632:	4618      	mov	r0, r3
 8005634:	370c      	adds	r7, #12
 8005636:	46bd      	mov	sp, r7
 8005638:	bc80      	pop	{r7}
 800563a:	4770      	bx	lr

0800563c <DFU_Detach>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure.
  * @retval None.
  */
static void DFU_Detach(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b084      	sub	sp, #16
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800564c:	60fb      	str	r3, [r7, #12]

  if (hdfu->dev_state == DFU_STATE_IDLE || hdfu->dev_state == DFU_STATE_DNLOAD_SYNC
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8005654:	2b02      	cmp	r3, #2
 8005656:	d013      	beq.n	8005680 <DFU_Detach+0x44>
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800565e:	2b03      	cmp	r3, #3
 8005660:	d00e      	beq.n	8005680 <DFU_Detach+0x44>
      || hdfu->dev_state == DFU_STATE_DNLOAD_IDLE || hdfu->dev_state == DFU_STATE_MANIFEST_SYNC
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8005668:	2b05      	cmp	r3, #5
 800566a:	d009      	beq.n	8005680 <DFU_Detach+0x44>
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8005672:	2b06      	cmp	r3, #6
 8005674:	d004      	beq.n	8005680 <DFU_Detach+0x44>
      || hdfu->dev_state == DFU_STATE_UPLOAD_IDLE)
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800567c:	2b09      	cmp	r3, #9
 800567e:	d125      	bne.n	80056cc <DFU_Detach+0x90>
  {
    /* Update the state machine */
    hdfu->dev_state = DFU_STATE_IDLE;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2202      	movs	r2, #2
 8005684:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2200      	movs	r2, #0
 800568c:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2200      	movs	r2, #0
 8005694:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2200      	movs	r2, #0
 800569c:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2200      	movs	r2, #0
 80056a4:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2200      	movs	r2, #0
 80056b8:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->wblock_num = 0U;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2200      	movs	r2, #0
 80056c0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2200      	movs	r2, #0
 80056c8:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  }

  /* Check the detach capability in the DFU functional descriptor */
  if ((USBD_DFU_CfgDesc[12U + (9U * USBD_DFU_MAX_ITF_NUM)]) & DFU_DETACH_MASK)
 80056cc:	4b0a      	ldr	r3, [pc, #40]	; (80056f8 <DFU_Detach+0xbc>)
 80056ce:	7d5b      	ldrb	r3, [r3, #21]
 80056d0:	f003 0310 	and.w	r3, r3, #16
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d006      	beq.n	80056e6 <DFU_Detach+0xaa>
  {
    /* Perform an Attach-Detach operation on USB bus */
    USBD_Stop(pdev);
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f000 fb55 	bl	8005d88 <USBD_Stop>
    USBD_Start(pdev);
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f000 fb46 	bl	8005d70 <USBD_Start>
  else
  {
    /* Wait for the period of time specified in Detach request */
    USBD_Delay((uint32_t)req->wValue);
  }
}
 80056e4:	e004      	b.n	80056f0 <DFU_Detach+0xb4>
    USBD_Delay((uint32_t)req->wValue);
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	885b      	ldrh	r3, [r3, #2]
 80056ea:	4618      	mov	r0, r3
 80056ec:	f7fb fc5a 	bl	8000fa4 <HAL_Delay>
}
 80056f0:	bf00      	nop
 80056f2:	3710      	adds	r7, #16
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}
 80056f8:	2000005c 	.word	0x2000005c

080056fc <DFU_Download>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure
  * @retval None
  */
static void DFU_Download(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b084      	sub	sp, #16
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800570c:	60fb      	str	r3, [r7, #12]

  /* Data setup request */
  if (req->wLength > 0U)
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	88db      	ldrh	r3, [r3, #6]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d02e      	beq.n	8005774 <DFU_Download+0x78>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800571c:	2b02      	cmp	r3, #2
 800571e:	d004      	beq.n	800572a <DFU_Download+0x2e>
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8005726:	2b05      	cmp	r3, #5
 8005728:	d11f      	bne.n	800576a <DFU_Download+0x6e>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	885b      	ldrh	r3, [r3, #2]
 800572e:	461a      	mov	r2, r3
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      hdfu->wlength = req->wLength;
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	88db      	ldrh	r3, [r3, #6]
 800573a:	461a      	mov	r2, r3
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

      /* Update the state machine */
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2203      	movs	r2, #3
 8005746:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[4] = hdfu->dev_state;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

      /* Prepare the reception of the buffer over EP0 */
      USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8,
 8005756:	68f9      	ldr	r1, [r7, #12]
                        (uint16_t)hdfu->wlength);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
      USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8,
 800575e:	b29b      	uxth	r3, r3
 8005760:	461a      	mov	r2, r3
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f001 fb1e 	bl	8006da4 <USBD_CtlPrepareRx>
 8005768:	e02e      	b.n	80057c8 <DFU_Download+0xcc>
    }
    /* Unsupported state */
    else
    {
      /* Call the error management function (command will be nacked */
      USBD_CtlError(pdev, req);
 800576a:	6839      	ldr	r1, [r7, #0]
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f001 fa81 	bl	8006c74 <USBD_CtlError>
    {
      /* Call the error management function (command will be nacked */
      USBD_CtlError(pdev, req);
    }
  }
}
 8005772:	e029      	b.n	80057c8 <DFU_Download+0xcc>
    if (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE || hdfu->dev_state == DFU_STATE_IDLE)
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800577a:	2b05      	cmp	r3, #5
 800577c:	d004      	beq.n	8005788 <DFU_Download+0x8c>
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8005784:	2b02      	cmp	r3, #2
 8005786:	d11a      	bne.n	80057be <DFU_Download+0xc2>
      hdfu->manif_state = DFU_MANIFEST_IN_PROGRESS;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
      hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2206      	movs	r2, #6
 8005794:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[1] = 0U;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2200      	movs	r2, #0
 800579c:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
      hdfu->dev_status[2] = 0U;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2200      	movs	r2, #0
 80057a4:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
      hdfu->dev_status[3] = 0U;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2200      	movs	r2, #0
 80057ac:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 80057bc:	e004      	b.n	80057c8 <DFU_Download+0xcc>
      USBD_CtlError(pdev, req);
 80057be:	6839      	ldr	r1, [r7, #0]
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f001 fa57 	bl	8006c74 <USBD_CtlError>
}
 80057c6:	e7ff      	b.n	80057c8 <DFU_Download+0xcc>
 80057c8:	bf00      	nop
 80057ca:	3710      	adds	r7, #16
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}

080057d0 <DFU_Upload>:
  * @param  pdev: instance
  * @param  req: pointer to the request structure
  * @retval status
  */
static void DFU_Upload(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b086      	sub	sp, #24
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057e0:	617b      	str	r3, [r7, #20]

  uint8_t *phaddr = NULL;
 80057e2:	2300      	movs	r3, #0
 80057e4:	613b      	str	r3, [r7, #16]
  uint32_t addr = 0U;
 80057e6:	2300      	movs	r3, #0
 80057e8:	60fb      	str	r3, [r7, #12]

  /* Data setup request */
  if (req->wLength > 0U)
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	88db      	ldrh	r3, [r3, #6]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	f000 80ac 	beq.w	800594c <DFU_Upload+0x17c>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80057fa:	2b02      	cmp	r3, #2
 80057fc:	d005      	beq.n	800580a <DFU_Upload+0x3a>
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8005804:	2b09      	cmp	r3, #9
 8005806:	f040 8094 	bne.w	8005932 <DFU_Upload+0x162>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	885b      	ldrh	r3, [r3, #2]
 800580e:	461a      	mov	r2, r3
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      hdfu->wlength = req->wLength;
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	88db      	ldrh	r3, [r3, #6]
 800581a:	461a      	mov	r2, r3
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

      /* DFU Get Command */
      if (hdfu->wblock_num == 0U)
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8005828:	2b00      	cmp	r3, #0
 800582a:	d12c      	bne.n	8005886 <DFU_Upload+0xb6>
      {
        /* Update the state machine */
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005832:	2b03      	cmp	r3, #3
 8005834:	d901      	bls.n	800583a <DFU_Upload+0x6a>
 8005836:	2202      	movs	r2, #2
 8005838:	e000      	b.n	800583c <DFU_Upload+0x6c>
 800583a:	2209      	movs	r2, #9
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	2200      	movs	r2, #0
 8005846:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	2200      	movs	r2, #0
 800584e:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	2200      	movs	r2, #0
 8005856:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        /* Store the values of all supported commands */
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	2200      	movs	r2, #0
 800586a:	701a      	strb	r2, [r3, #0]
        hdfu->buffer.d8[1] = DFU_CMD_SETADDRESSPOINTER;
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	2221      	movs	r2, #33	; 0x21
 8005870:	705a      	strb	r2, [r3, #1]
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	2241      	movs	r2, #65	; 0x41
 8005876:	709a      	strb	r2, [r3, #2]

        /* Send the status data over EP0 */
        USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->buffer.d8[0])), 3U);
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	2203      	movs	r2, #3
 800587c:	4619      	mov	r1, r3
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f001 fa62 	bl	8006d48 <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 8005884:	e079      	b.n	800597a <DFU_Upload+0x1aa>
      }
      else if (hdfu->wblock_num > 1U)
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800588c:	2b01      	cmp	r3, #1
 800588e:	d935      	bls.n	80058fc <DFU_Upload+0x12c>
      {
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	2209      	movs	r2, #9
 8005894:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	2200      	movs	r2, #0
 800589c:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	2200      	movs	r2, #0
 80058a4:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	2200      	movs	r2, #0
 80058ac:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;  /* Change is Accelerated*/
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80058c2:	4b30      	ldr	r3, [pc, #192]	; (8005984 <DFU_Upload+0x1b4>)
 80058c4:	4413      	add	r3, r2
 80058c6:	029a      	lsls	r2, r3, #10
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80058ce:	4413      	add	r3, r2
 80058d0:	60fb      	str	r3, [r7, #12]

        /* Return the physical address where data are stored */
        phaddr = ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80058d8:	695b      	ldr	r3, [r3, #20]
 80058da:	68f8      	ldr	r0, [r7, #12]
 80058dc:	6979      	ldr	r1, [r7, #20]
 80058de:	697a      	ldr	r2, [r7, #20]
 80058e0:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 80058e4:	4798      	blx	r3
 80058e6:	6138      	str	r0, [r7, #16]

        /* Send the status data over EP0 */
        USBD_CtlSendData(pdev, phaddr, (uint16_t)hdfu->wlength);
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	461a      	mov	r2, r3
 80058f2:	6939      	ldr	r1, [r7, #16]
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f001 fa27 	bl	8006d48 <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 80058fa:	e03e      	b.n	800597a <DFU_Upload+0x1aa>
      }
      else  /* unsupported hdfu->wblock_num */
      {
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	220f      	movs	r2, #15
 8005900:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	2200      	movs	r2, #0
 8005908:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	2200      	movs	r2, #0
 8005910:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	2200      	movs	r2, #0
 8005918:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        /* Call the error management function (command will be nacked */
        USBD_CtlError(pdev, req);
 8005928:	6839      	ldr	r1, [r7, #0]
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f001 f9a2 	bl	8006c74 <USBD_CtlError>
      if (hdfu->wblock_num == 0U)
 8005930:	e023      	b.n	800597a <DFU_Upload+0x1aa>
      }
    }
    /* Unsupported state */
    else
    {
      hdfu->wlength = 0U;
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	2200      	movs	r2, #0
 8005936:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      hdfu->wblock_num = 0U;
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	2200      	movs	r2, #0
 800593e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      /* Call the error management function (command will be nacked */
      USBD_CtlError(pdev, req);
 8005942:	6839      	ldr	r1, [r7, #0]
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f001 f995 	bl	8006c74 <USBD_CtlError>
    hdfu->dev_status[1] = 0U;
    hdfu->dev_status[2] = 0U;
    hdfu->dev_status[3] = 0U;
    hdfu->dev_status[4] = hdfu->dev_state;
  }
}
 800594a:	e016      	b.n	800597a <DFU_Upload+0x1aa>
    hdfu->dev_state = DFU_STATE_IDLE;
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	2202      	movs	r2, #2
 8005950:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[1] = 0U;
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	2200      	movs	r2, #0
 8005958:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	2200      	movs	r2, #0
 8005960:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	2200      	movs	r2, #0
 8005968:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
}
 8005978:	e7ff      	b.n	800597a <DFU_Upload+0x1aa>
 800597a:	bf00      	nop
 800597c:	3718      	adds	r7, #24
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}
 8005982:	bf00      	nop
 8005984:	003ffffe 	.word	0x003ffffe

08005988 <DFU_GetStatus>:
  *         Handles the DFU GETSTATUS request.
  * @param  pdev: instance
  * @retval status
  */
static void DFU_GetStatus(USBD_HandleTypeDef *pdev)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b084      	sub	sp, #16
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005996:	60fb      	str	r3, [r7, #12]

  switch (hdfu->dev_state)
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800599e:	2b03      	cmp	r3, #3
 80059a0:	d002      	beq.n	80059a8 <DFU_GetStatus+0x20>
 80059a2:	2b06      	cmp	r3, #6
 80059a4:	d055      	beq.n	8005a52 <DFU_GetStatus+0xca>
        }
      }
      break;

    default :
      break;
 80059a6:	e092      	b.n	8005ace <DFU_GetStatus+0x146>
      if (hdfu->wlength != 0U)
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d038      	beq.n	8005a24 <DFU_GetStatus+0x9c>
        hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2204      	movs	r2, #4
 80059b6:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 0U;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2200      	movs	r2, #0
 80059be:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2200      	movs	r2, #0
 80059c6:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2200      	movs	r2, #0
 80059ce:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d110      	bne.n	8005a0a <DFU_GetStatus+0x82>
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	781b      	ldrb	r3, [r3, #0]
 80059ec:	2b41      	cmp	r3, #65	; 0x41
 80059ee:	d10c      	bne.n	8005a0a <DFU_GetStatus+0x82>
          ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80059f6:	699b      	ldr	r3, [r3, #24]
 80059f8:	68fa      	ldr	r2, [r7, #12]
 80059fa:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
 80059fe:	68fa      	ldr	r2, [r7, #12]
 8005a00:	f502 6282 	add.w	r2, r2, #1040	; 0x410
 8005a04:	2100      	movs	r1, #0
 8005a06:	4798      	blx	r3
      break;
 8005a08:	e061      	b.n	8005ace <DFU_GetStatus+0x146>
          ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->GetStatus(hdfu->data_ptr, DFU_MEDIA_PROGRAM, hdfu->dev_status);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a10:	699b      	ldr	r3, [r3, #24]
 8005a12:	68fa      	ldr	r2, [r7, #12]
 8005a14:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
 8005a18:	68fa      	ldr	r2, [r7, #12]
 8005a1a:	f502 6282 	add.w	r2, r2, #1040	; 0x410
 8005a1e:	2101      	movs	r1, #1
 8005a20:	4798      	blx	r3
      break;
 8005a22:	e054      	b.n	8005ace <DFU_GetStatus+0x146>
        hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2205      	movs	r2, #5
 8005a28:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 0U;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2200      	movs	r2, #0
 8005a38:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      break;
 8005a50:	e03d      	b.n	8005ace <DFU_GetStatus+0x146>
      if (hdfu->manif_state == DFU_MANIFEST_IN_PROGRESS)
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d116      	bne.n	8005a8a <DFU_GetStatus+0x102>
        hdfu->dev_state = DFU_STATE_MANIFEST;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2207      	movs	r2, #7
 8005a60:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 1U;             /*bwPollTimeout = 1ms*/
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2200      	movs	r2, #0
 8005a78:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      break;
 8005a88:	e020      	b.n	8005acc <DFU_GetStatus+0x144>
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d11b      	bne.n	8005acc <DFU_GetStatus+0x144>
            ((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U))
 8005a94:	4b14      	ldr	r3, [pc, #80]	; (8005ae8 <DFU_GetStatus+0x160>)
 8005a96:	7d1b      	ldrb	r3, [r3, #20]
 8005a98:	f003 0304 	and.w	r3, r3, #4
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d015      	beq.n	8005acc <DFU_GetStatus+0x144>
          hdfu->dev_state = DFU_STATE_IDLE;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2202      	movs	r2, #2
 8005aa4:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
          hdfu->dev_status[1] = 0U;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
          hdfu->dev_status[2] = 0U;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
          hdfu->dev_status[3] = 0U;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2200      	movs	r2, #0
 8005abc:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
          hdfu->dev_status[4] = hdfu->dev_state;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      break;
 8005acc:	bf00      	nop
  }

  /* Send the status data over EP0 */
  USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8005ad4:	2206      	movs	r2, #6
 8005ad6:	4619      	mov	r1, r3
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f001 f935 	bl	8006d48 <USBD_CtlSendData>
}
 8005ade:	bf00      	nop
 8005ae0:	3710      	adds	r7, #16
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
 8005ae6:	bf00      	nop
 8005ae8:	2000005c 	.word	0x2000005c

08005aec <DFU_ClearStatus>:
  *         Handles the DFU CLRSTATUS request.
  * @param  pdev: device instance
  * @retval status
  */
static void DFU_ClearStatus(USBD_HandleTypeDef *pdev)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b085      	sub	sp, #20
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005afa:	60fb      	str	r3, [r7, #12]

  if (hdfu->dev_state == DFU_STATE_ERROR)
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8005b02:	2b0a      	cmp	r3, #10
 8005b04:	d11e      	bne.n	8005b44 <DFU_ClearStatus+0x58>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2202      	movs	r2, #2
 8005b0a:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;/*bStatus*/
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2200      	movs	r2, #0
 8005b12:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2200      	movs	r2, #0
 8005b22:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;/*bState*/
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U;/*iString*/
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->dev_status[2] = 0U;
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
    hdfu->dev_status[4] = hdfu->dev_state;/*bState*/
    hdfu->dev_status[5] = 0U;/*iString*/
  }
}
 8005b42:	e01d      	b.n	8005b80 <DFU_ClearStatus+0x94>
    hdfu->dev_state = DFU_STATE_ERROR;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	220a      	movs	r2, #10
 8005b48:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN;/*bStatus*/
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	220e      	movs	r2, #14
 8005b50:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2200      	movs	r2, #0
 8005b58:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2200      	movs	r2, #0
 8005b68:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;/*bState*/
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U;/*iString*/
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
}
 8005b80:	bf00      	nop
 8005b82:	3714      	adds	r7, #20
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bc80      	pop	{r7}
 8005b88:	4770      	bx	lr

08005b8a <DFU_GetState>:
  *         Handles the DFU GETSTATE request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_GetState(USBD_HandleTypeDef *pdev)
{
 8005b8a:	b580      	push	{r7, lr}
 8005b8c:	b084      	sub	sp, #16
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b98:	60fb      	str	r3, [r7, #12]

  /* Return the current state of the DFU interface */
  USBD_CtlSendData(pdev, &hdfu->dev_state, 1U);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	4619      	mov	r1, r3
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f001 f8cf 	bl	8006d48 <USBD_CtlSendData>
}
 8005baa:	bf00      	nop
 8005bac:	3710      	adds	r7, #16
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}

08005bb2 <DFU_Abort>:
  *         Handles the DFU ABORT request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Abort(USBD_HandleTypeDef *pdev)
{
 8005bb2:	b480      	push	{r7}
 8005bb4:	b085      	sub	sp, #20
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bc0:	60fb      	str	r3, [r7, #12]

  if (hdfu->dev_state == DFU_STATE_IDLE || hdfu->dev_state == DFU_STATE_DNLOAD_SYNC
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8005bc8:	2b02      	cmp	r3, #2
 8005bca:	d013      	beq.n	8005bf4 <DFU_Abort+0x42>
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8005bd2:	2b03      	cmp	r3, #3
 8005bd4:	d00e      	beq.n	8005bf4 <DFU_Abort+0x42>
      || hdfu->dev_state == DFU_STATE_DNLOAD_IDLE || hdfu->dev_state == DFU_STATE_MANIFEST_SYNC
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8005bdc:	2b05      	cmp	r3, #5
 8005bde:	d009      	beq.n	8005bf4 <DFU_Abort+0x42>
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8005be6:	2b06      	cmp	r3, #6
 8005be8:	d004      	beq.n	8005bf4 <DFU_Abort+0x42>
      || hdfu->dev_state == DFU_STATE_UPLOAD_IDLE)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8005bf0:	2b09      	cmp	r3, #9
 8005bf2:	d125      	bne.n	8005c40 <DFU_Abort+0x8e>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2202      	movs	r2, #2
 8005bf8:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2200      	movs	r2, #0
 8005c08:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2200      	movs	r2, #0
 8005c18:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->wblock_num = 0U;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2200      	movs	r2, #0
 8005c34:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  }
}
 8005c40:	bf00      	nop
 8005c42:	3714      	adds	r7, #20
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bc80      	pop	{r7}
 8005c48:	4770      	bx	lr
	...

08005c4c <DFU_Leave>:
  *         and resets device to jump to user loaded code).
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Leave(USBD_HandleTypeDef *pdev)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b084      	sub	sp, #16
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c5a:	60fb      	str	r3, [r7, #12]

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419

  if ((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U)
 8005c64:	4b1f      	ldr	r3, [pc, #124]	; (8005ce4 <DFU_Leave+0x98>)
 8005c66:	7d1b      	ldrb	r3, [r3, #20]
 8005c68:	f003 0304 	and.w	r3, r3, #4
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d016      	beq.n	8005c9e <DFU_Leave+0x52>
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2206      	movs	r2, #6
 8005c74:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2200      	movs	r2, #0
 8005c84:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    return;
 8005c9c:	e01f      	b.n	8005cde <DFU_Leave+0x92>
  }
  else
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2208      	movs	r2, #8
 8005ca2:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

    /* Disconnect the USB device */
    USBD_Stop(pdev);
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f000 f85c 	bl	8005d88 <USBD_Stop>

    /* DeInitilialize the MAL(Media Access Layer) */
    ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->DeInit();
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	4798      	blx	r3

    /* Generate system reset to allow jumping to the user code */
    NVIC_SystemReset();
 8005cda:	f7ff f9a7 	bl	800502c <__NVIC_SystemReset>

    /* The next instructions will not be reached (system reset) */
  }
}
 8005cde:	3710      	adds	r7, #16
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}
 8005ce4:	2000005c 	.word	0x2000005c

08005ce8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b084      	sub	sp, #16
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	60f8      	str	r0, [r7, #12]
 8005cf0:	60b9      	str	r1, [r7, #8]
 8005cf2:	4613      	mov	r3, r2
 8005cf4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d101      	bne.n	8005d00 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005cfc:	2302      	movs	r3, #2
 8005cfe:	e01a      	b.n	8005d36 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d003      	beq.n	8005d12 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d003      	beq.n	8005d20 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	68ba      	ldr	r2, [r7, #8]
 8005d1c:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2201      	movs	r2, #1
 8005d24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	79fa      	ldrb	r2, [r7, #7]
 8005d2c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005d2e:	68f8      	ldr	r0, [r7, #12]
 8005d30:	f001 fb48 	bl	80073c4 <USBD_LL_Init>

  return USBD_OK;
 8005d34:	2300      	movs	r3, #0
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3710      	adds	r7, #16
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}

08005d3e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005d3e:	b480      	push	{r7}
 8005d40:	b085      	sub	sp, #20
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	6078      	str	r0, [r7, #4]
 8005d46:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d006      	beq.n	8005d60 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	683a      	ldr	r2, [r7, #0]
 8005d56:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	73fb      	strb	r3, [r7, #15]
 8005d5e:	e001      	b.n	8005d64 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005d60:	2302      	movs	r3, #2
 8005d62:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3714      	adds	r7, #20
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bc80      	pop	{r7}
 8005d6e:	4770      	bx	lr

08005d70 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b082      	sub	sp, #8
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f001 fb63 	bl	8007444 <USBD_LL_Start>

  return USBD_OK;
 8005d7e:	2300      	movs	r3, #0
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3708      	adds	r7, #8
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}

08005d88 <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Stop(USBD_HandleTypeDef *pdev)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b082      	sub	sp, #8
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	6852      	ldr	r2, [r2, #4]
 8005d9c:	b2d2      	uxtb	r2, r2
 8005d9e:	4611      	mov	r1, r2
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	4798      	blx	r3

  /* Stop the low level driver */
  USBD_LL_Stop(pdev);
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f001 fb68 	bl	800747a <USBD_LL_Stop>

  return USBD_OK;
 8005daa:	2300      	movs	r3, #0
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3708      	adds	r7, #8
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}

08005db4 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005dbc:	2300      	movs	r3, #0
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	370c      	adds	r7, #12
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bc80      	pop	{r7}
 8005dc6:	4770      	bx	lr

08005dc8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b084      	sub	sp, #16
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
 8005dd0:	460b      	mov	r3, r1
 8005dd2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005dd4:	2302      	movs	r3, #2
 8005dd6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d00c      	beq.n	8005dfc <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	78fa      	ldrb	r2, [r7, #3]
 8005dec:	4611      	mov	r1, r2
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	4798      	blx	r3
 8005df2:	4603      	mov	r3, r0
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d101      	bne.n	8005dfc <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8005dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3710      	adds	r7, #16
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}

08005e06 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005e06:	b580      	push	{r7, lr}
 8005e08:	b082      	sub	sp, #8
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	6078      	str	r0, [r7, #4]
 8005e0e:	460b      	mov	r3, r1
 8005e10:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	78fa      	ldrb	r2, [r7, #3]
 8005e1c:	4611      	mov	r1, r2
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	4798      	blx	r3

  return USBD_OK;
 8005e22:	2300      	movs	r3, #0
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3708      	adds	r7, #8
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}

08005e2c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b082      	sub	sp, #8
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005e3c:	6839      	ldr	r1, [r7, #0]
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f000 fedc 	bl	8006bfc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2201      	movs	r2, #1
 8005e48:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005e52:	461a      	mov	r2, r3
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005e60:	f003 031f 	and.w	r3, r3, #31
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d00c      	beq.n	8005e82 <USBD_LL_SetupStage+0x56>
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d302      	bcc.n	8005e72 <USBD_LL_SetupStage+0x46>
 8005e6c:	2b02      	cmp	r3, #2
 8005e6e:	d010      	beq.n	8005e92 <USBD_LL_SetupStage+0x66>
 8005e70:	e017      	b.n	8005ea2 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005e78:	4619      	mov	r1, r3
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f000 f9ca 	bl	8006214 <USBD_StdDevReq>
      break;
 8005e80:	e01a      	b.n	8005eb8 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005e88:	4619      	mov	r1, r3
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f000 fa2c 	bl	80062e8 <USBD_StdItfReq>
      break;
 8005e90:	e012      	b.n	8005eb8 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005e98:	4619      	mov	r1, r3
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f000 fa6a 	bl	8006374 <USBD_StdEPReq>
      break;
 8005ea0:	e00a      	b.n	8005eb8 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005ea8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	4619      	mov	r1, r3
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f001 fb23 	bl	80074fc <USBD_LL_StallEP>
      break;
 8005eb6:	bf00      	nop
  }

  return USBD_OK;
 8005eb8:	2300      	movs	r3, #0
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3708      	adds	r7, #8
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}

08005ec2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005ec2:	b580      	push	{r7, lr}
 8005ec4:	b086      	sub	sp, #24
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	60f8      	str	r0, [r7, #12]
 8005eca:	460b      	mov	r3, r1
 8005ecc:	607a      	str	r2, [r7, #4]
 8005ece:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005ed0:	7afb      	ldrb	r3, [r7, #11]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d14b      	bne.n	8005f6e <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005edc:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005ee4:	2b03      	cmp	r3, #3
 8005ee6:	d134      	bne.n	8005f52 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	68da      	ldr	r2, [r3, #12]
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	691b      	ldr	r3, [r3, #16]
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d919      	bls.n	8005f28 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	68da      	ldr	r2, [r3, #12]
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	691b      	ldr	r3, [r3, #16]
 8005efc:	1ad2      	subs	r2, r2, r3
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	68da      	ldr	r2, [r3, #12]
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d203      	bcs.n	8005f16 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	e002      	b.n	8005f1c <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005f1a:	b29b      	uxth	r3, r3
 8005f1c:	461a      	mov	r2, r3
 8005f1e:	6879      	ldr	r1, [r7, #4]
 8005f20:	68f8      	ldr	r0, [r7, #12]
 8005f22:	f000 ff5d 	bl	8006de0 <USBD_CtlContinueRx>
 8005f26:	e038      	b.n	8005f9a <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f2e:	691b      	ldr	r3, [r3, #16]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d00a      	beq.n	8005f4a <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005f3a:	2b03      	cmp	r3, #3
 8005f3c:	d105      	bne.n	8005f4a <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f44:	691b      	ldr	r3, [r3, #16]
 8005f46:	68f8      	ldr	r0, [r7, #12]
 8005f48:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005f4a:	68f8      	ldr	r0, [r7, #12]
 8005f4c:	f000 ff5a 	bl	8006e04 <USBD_CtlSendStatus>
 8005f50:	e023      	b.n	8005f9a <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005f58:	2b05      	cmp	r3, #5
 8005f5a:	d11e      	bne.n	8005f9a <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8005f64:	2100      	movs	r1, #0
 8005f66:	68f8      	ldr	r0, [r7, #12]
 8005f68:	f001 fac8 	bl	80074fc <USBD_LL_StallEP>
 8005f6c:	e015      	b.n	8005f9a <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f74:	699b      	ldr	r3, [r3, #24]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d00d      	beq.n	8005f96 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005f80:	2b03      	cmp	r3, #3
 8005f82:	d108      	bne.n	8005f96 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f8a:	699b      	ldr	r3, [r3, #24]
 8005f8c:	7afa      	ldrb	r2, [r7, #11]
 8005f8e:	4611      	mov	r1, r2
 8005f90:	68f8      	ldr	r0, [r7, #12]
 8005f92:	4798      	blx	r3
 8005f94:	e001      	b.n	8005f9a <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005f96:	2302      	movs	r3, #2
 8005f98:	e000      	b.n	8005f9c <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8005f9a:	2300      	movs	r3, #0
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3718      	adds	r7, #24
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}

08005fa4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b086      	sub	sp, #24
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	60f8      	str	r0, [r7, #12]
 8005fac:	460b      	mov	r3, r1
 8005fae:	607a      	str	r2, [r7, #4]
 8005fb0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005fb2:	7afb      	ldrb	r3, [r7, #11]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d17f      	bne.n	80060b8 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	3314      	adds	r3, #20
 8005fbc:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005fc4:	2b02      	cmp	r3, #2
 8005fc6:	d15c      	bne.n	8006082 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	68da      	ldr	r2, [r3, #12]
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	691b      	ldr	r3, [r3, #16]
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d915      	bls.n	8006000 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	68da      	ldr	r2, [r3, #12]
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	691b      	ldr	r3, [r3, #16]
 8005fdc:	1ad2      	subs	r2, r2, r3
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	68db      	ldr	r3, [r3, #12]
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	461a      	mov	r2, r3
 8005fea:	6879      	ldr	r1, [r7, #4]
 8005fec:	68f8      	ldr	r0, [r7, #12]
 8005fee:	f000 fec7 	bl	8006d80 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	2100      	movs	r1, #0
 8005ff8:	68f8      	ldr	r0, [r7, #12]
 8005ffa:	f001 fb24 	bl	8007646 <USBD_LL_PrepareReceive>
 8005ffe:	e04e      	b.n	800609e <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	697a      	ldr	r2, [r7, #20]
 8006006:	6912      	ldr	r2, [r2, #16]
 8006008:	fbb3 f1f2 	udiv	r1, r3, r2
 800600c:	fb02 f201 	mul.w	r2, r2, r1
 8006010:	1a9b      	subs	r3, r3, r2
 8006012:	2b00      	cmp	r3, #0
 8006014:	d11c      	bne.n	8006050 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	689a      	ldr	r2, [r3, #8]
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800601e:	429a      	cmp	r2, r3
 8006020:	d316      	bcc.n	8006050 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	689a      	ldr	r2, [r3, #8]
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800602c:	429a      	cmp	r2, r3
 800602e:	d20f      	bcs.n	8006050 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006030:	2200      	movs	r2, #0
 8006032:	2100      	movs	r1, #0
 8006034:	68f8      	ldr	r0, [r7, #12]
 8006036:	f000 fea3 	bl	8006d80 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2200      	movs	r2, #0
 800603e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006042:	2300      	movs	r3, #0
 8006044:	2200      	movs	r2, #0
 8006046:	2100      	movs	r1, #0
 8006048:	68f8      	ldr	r0, [r7, #12]
 800604a:	f001 fafc 	bl	8007646 <USBD_LL_PrepareReceive>
 800604e:	e026      	b.n	800609e <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006056:	68db      	ldr	r3, [r3, #12]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d00a      	beq.n	8006072 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006062:	2b03      	cmp	r3, #3
 8006064:	d105      	bne.n	8006072 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800606c:	68db      	ldr	r3, [r3, #12]
 800606e:	68f8      	ldr	r0, [r7, #12]
 8006070:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006072:	2180      	movs	r1, #128	; 0x80
 8006074:	68f8      	ldr	r0, [r7, #12]
 8006076:	f001 fa41 	bl	80074fc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800607a:	68f8      	ldr	r0, [r7, #12]
 800607c:	f000 fed5 	bl	8006e2a <USBD_CtlReceiveStatus>
 8006080:	e00d      	b.n	800609e <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006088:	2b04      	cmp	r3, #4
 800608a:	d004      	beq.n	8006096 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006092:	2b00      	cmp	r3, #0
 8006094:	d103      	bne.n	800609e <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006096:	2180      	movs	r1, #128	; 0x80
 8006098:	68f8      	ldr	r0, [r7, #12]
 800609a:	f001 fa2f 	bl	80074fc <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d11d      	bne.n	80060e4 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80060a8:	68f8      	ldr	r0, [r7, #12]
 80060aa:	f7ff fe83 	bl	8005db4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2200      	movs	r2, #0
 80060b2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80060b6:	e015      	b.n	80060e4 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060be:	695b      	ldr	r3, [r3, #20]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d00d      	beq.n	80060e0 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80060ca:	2b03      	cmp	r3, #3
 80060cc:	d108      	bne.n	80060e0 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060d4:	695b      	ldr	r3, [r3, #20]
 80060d6:	7afa      	ldrb	r2, [r7, #11]
 80060d8:	4611      	mov	r1, r2
 80060da:	68f8      	ldr	r0, [r7, #12]
 80060dc:	4798      	blx	r3
 80060de:	e001      	b.n	80060e4 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80060e0:	2302      	movs	r3, #2
 80060e2:	e000      	b.n	80060e6 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80060e4:	2300      	movs	r3, #0
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3718      	adds	r7, #24
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}

080060ee <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80060ee:	b580      	push	{r7, lr}
 80060f0:	b082      	sub	sp, #8
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80060f6:	2340      	movs	r3, #64	; 0x40
 80060f8:	2200      	movs	r2, #0
 80060fa:	2100      	movs	r1, #0
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f001 f9d7 	bl	80074b0 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2201      	movs	r2, #1
 8006106:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2240      	movs	r2, #64	; 0x40
 800610e:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006112:	2340      	movs	r3, #64	; 0x40
 8006114:	2200      	movs	r2, #0
 8006116:	2180      	movs	r1, #128	; 0x80
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f001 f9c9 	bl	80074b0 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2201      	movs	r2, #1
 8006122:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2240      	movs	r2, #64	; 0x40
 8006128:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2201      	movs	r2, #1
 800612e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2200      	movs	r2, #0
 8006136:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2200      	movs	r2, #0
 800613e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2200      	movs	r2, #0
 8006144:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800614e:	2b00      	cmp	r3, #0
 8006150:	d009      	beq.n	8006166 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	6852      	ldr	r2, [r2, #4]
 800615e:	b2d2      	uxtb	r2, r2
 8006160:	4611      	mov	r1, r2
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	4798      	blx	r3
  }

  return USBD_OK;
 8006166:	2300      	movs	r3, #0
}
 8006168:	4618      	mov	r0, r3
 800616a:	3708      	adds	r7, #8
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}

08006170 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006170:	b480      	push	{r7}
 8006172:	b083      	sub	sp, #12
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	460b      	mov	r3, r1
 800617a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	78fa      	ldrb	r2, [r7, #3]
 8006180:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006182:	2300      	movs	r3, #0
}
 8006184:	4618      	mov	r0, r3
 8006186:	370c      	adds	r7, #12
 8006188:	46bd      	mov	sp, r7
 800618a:	bc80      	pop	{r7}
 800618c:	4770      	bx	lr

0800618e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800618e:	b480      	push	{r7}
 8006190:	b083      	sub	sp, #12
 8006192:	af00      	add	r7, sp, #0
 8006194:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2204      	movs	r2, #4
 80061a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80061aa:	2300      	movs	r3, #0
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	370c      	adds	r7, #12
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bc80      	pop	{r7}
 80061b4:	4770      	bx	lr

080061b6 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80061b6:	b480      	push	{r7}
 80061b8:	b083      	sub	sp, #12
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061c4:	2b04      	cmp	r3, #4
 80061c6:	d105      	bne.n	80061d4 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80061d4:	2300      	movs	r3, #0
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	370c      	adds	r7, #12
 80061da:	46bd      	mov	sp, r7
 80061dc:	bc80      	pop	{r7}
 80061de:	4770      	bx	lr

080061e0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b082      	sub	sp, #8
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061ee:	2b03      	cmp	r3, #3
 80061f0:	d10b      	bne.n	800620a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061f8:	69db      	ldr	r3, [r3, #28]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d005      	beq.n	800620a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006204:	69db      	ldr	r3, [r3, #28]
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800620a:	2300      	movs	r3, #0
}
 800620c:	4618      	mov	r0, r3
 800620e:	3708      	adds	r7, #8
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}

08006214 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b084      	sub	sp, #16
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800621e:	2300      	movs	r3, #0
 8006220:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	781b      	ldrb	r3, [r3, #0]
 8006226:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800622a:	2b20      	cmp	r3, #32
 800622c:	d004      	beq.n	8006238 <USBD_StdDevReq+0x24>
 800622e:	2b40      	cmp	r3, #64	; 0x40
 8006230:	d002      	beq.n	8006238 <USBD_StdDevReq+0x24>
 8006232:	2b00      	cmp	r3, #0
 8006234:	d008      	beq.n	8006248 <USBD_StdDevReq+0x34>
 8006236:	e04c      	b.n	80062d2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	6839      	ldr	r1, [r7, #0]
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	4798      	blx	r3
      break;
 8006246:	e049      	b.n	80062dc <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	785b      	ldrb	r3, [r3, #1]
 800624c:	2b09      	cmp	r3, #9
 800624e:	d83a      	bhi.n	80062c6 <USBD_StdDevReq+0xb2>
 8006250:	a201      	add	r2, pc, #4	; (adr r2, 8006258 <USBD_StdDevReq+0x44>)
 8006252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006256:	bf00      	nop
 8006258:	080062a9 	.word	0x080062a9
 800625c:	080062bd 	.word	0x080062bd
 8006260:	080062c7 	.word	0x080062c7
 8006264:	080062b3 	.word	0x080062b3
 8006268:	080062c7 	.word	0x080062c7
 800626c:	0800628b 	.word	0x0800628b
 8006270:	08006281 	.word	0x08006281
 8006274:	080062c7 	.word	0x080062c7
 8006278:	0800629f 	.word	0x0800629f
 800627c:	08006295 	.word	0x08006295
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006280:	6839      	ldr	r1, [r7, #0]
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f000 f9d4 	bl	8006630 <USBD_GetDescriptor>
          break;
 8006288:	e022      	b.n	80062d0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800628a:	6839      	ldr	r1, [r7, #0]
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f000 fb49 	bl	8006924 <USBD_SetAddress>
          break;
 8006292:	e01d      	b.n	80062d0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006294:	6839      	ldr	r1, [r7, #0]
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f000 fb86 	bl	80069a8 <USBD_SetConfig>
          break;
 800629c:	e018      	b.n	80062d0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800629e:	6839      	ldr	r1, [r7, #0]
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f000 fc0f 	bl	8006ac4 <USBD_GetConfig>
          break;
 80062a6:	e013      	b.n	80062d0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80062a8:	6839      	ldr	r1, [r7, #0]
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f000 fc3e 	bl	8006b2c <USBD_GetStatus>
          break;
 80062b0:	e00e      	b.n	80062d0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80062b2:	6839      	ldr	r1, [r7, #0]
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f000 fc6c 	bl	8006b92 <USBD_SetFeature>
          break;
 80062ba:	e009      	b.n	80062d0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80062bc:	6839      	ldr	r1, [r7, #0]
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f000 fc7b 	bl	8006bba <USBD_ClrFeature>
          break;
 80062c4:	e004      	b.n	80062d0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80062c6:	6839      	ldr	r1, [r7, #0]
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f000 fcd3 	bl	8006c74 <USBD_CtlError>
          break;
 80062ce:	bf00      	nop
      }
      break;
 80062d0:	e004      	b.n	80062dc <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80062d2:	6839      	ldr	r1, [r7, #0]
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f000 fccd 	bl	8006c74 <USBD_CtlError>
      break;
 80062da:	bf00      	nop
  }

  return ret;
 80062dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3710      	adds	r7, #16
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}
 80062e6:	bf00      	nop

080062e8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b084      	sub	sp, #16
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80062f2:	2300      	movs	r3, #0
 80062f4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	781b      	ldrb	r3, [r3, #0]
 80062fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80062fe:	2b20      	cmp	r3, #32
 8006300:	d003      	beq.n	800630a <USBD_StdItfReq+0x22>
 8006302:	2b40      	cmp	r3, #64	; 0x40
 8006304:	d001      	beq.n	800630a <USBD_StdItfReq+0x22>
 8006306:	2b00      	cmp	r3, #0
 8006308:	d12a      	bne.n	8006360 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006310:	3b01      	subs	r3, #1
 8006312:	2b02      	cmp	r3, #2
 8006314:	d81d      	bhi.n	8006352 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	889b      	ldrh	r3, [r3, #4]
 800631a:	b2db      	uxtb	r3, r3
 800631c:	2b01      	cmp	r3, #1
 800631e:	d813      	bhi.n	8006348 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	6839      	ldr	r1, [r7, #0]
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	4798      	blx	r3
 800632e:	4603      	mov	r3, r0
 8006330:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	88db      	ldrh	r3, [r3, #6]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d110      	bne.n	800635c <USBD_StdItfReq+0x74>
 800633a:	7bfb      	ldrb	r3, [r7, #15]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d10d      	bne.n	800635c <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f000 fd5f 	bl	8006e04 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006346:	e009      	b.n	800635c <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8006348:	6839      	ldr	r1, [r7, #0]
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 fc92 	bl	8006c74 <USBD_CtlError>
          break;
 8006350:	e004      	b.n	800635c <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8006352:	6839      	ldr	r1, [r7, #0]
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f000 fc8d 	bl	8006c74 <USBD_CtlError>
          break;
 800635a:	e000      	b.n	800635e <USBD_StdItfReq+0x76>
          break;
 800635c:	bf00      	nop
      }
      break;
 800635e:	e004      	b.n	800636a <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8006360:	6839      	ldr	r1, [r7, #0]
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f000 fc86 	bl	8006c74 <USBD_CtlError>
      break;
 8006368:	bf00      	nop
  }

  return USBD_OK;
 800636a:	2300      	movs	r3, #0
}
 800636c:	4618      	mov	r0, r3
 800636e:	3710      	adds	r7, #16
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}

08006374 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b084      	sub	sp, #16
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800637e:	2300      	movs	r3, #0
 8006380:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	889b      	ldrh	r3, [r3, #4]
 8006386:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	781b      	ldrb	r3, [r3, #0]
 800638c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006390:	2b20      	cmp	r3, #32
 8006392:	d004      	beq.n	800639e <USBD_StdEPReq+0x2a>
 8006394:	2b40      	cmp	r3, #64	; 0x40
 8006396:	d002      	beq.n	800639e <USBD_StdEPReq+0x2a>
 8006398:	2b00      	cmp	r3, #0
 800639a:	d008      	beq.n	80063ae <USBD_StdEPReq+0x3a>
 800639c:	e13d      	b.n	800661a <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	6839      	ldr	r1, [r7, #0]
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	4798      	blx	r3
      break;
 80063ac:	e13a      	b.n	8006624 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	781b      	ldrb	r3, [r3, #0]
 80063b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80063b6:	2b20      	cmp	r3, #32
 80063b8:	d10a      	bne.n	80063d0 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063c0:	689b      	ldr	r3, [r3, #8]
 80063c2:	6839      	ldr	r1, [r7, #0]
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	4798      	blx	r3
 80063c8:	4603      	mov	r3, r0
 80063ca:	73fb      	strb	r3, [r7, #15]

        return ret;
 80063cc:	7bfb      	ldrb	r3, [r7, #15]
 80063ce:	e12a      	b.n	8006626 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	785b      	ldrb	r3, [r3, #1]
 80063d4:	2b01      	cmp	r3, #1
 80063d6:	d03e      	beq.n	8006456 <USBD_StdEPReq+0xe2>
 80063d8:	2b03      	cmp	r3, #3
 80063da:	d002      	beq.n	80063e2 <USBD_StdEPReq+0x6e>
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d070      	beq.n	80064c2 <USBD_StdEPReq+0x14e>
 80063e0:	e115      	b.n	800660e <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063e8:	2b02      	cmp	r3, #2
 80063ea:	d002      	beq.n	80063f2 <USBD_StdEPReq+0x7e>
 80063ec:	2b03      	cmp	r3, #3
 80063ee:	d015      	beq.n	800641c <USBD_StdEPReq+0xa8>
 80063f0:	e02b      	b.n	800644a <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80063f2:	7bbb      	ldrb	r3, [r7, #14]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d00c      	beq.n	8006412 <USBD_StdEPReq+0x9e>
 80063f8:	7bbb      	ldrb	r3, [r7, #14]
 80063fa:	2b80      	cmp	r3, #128	; 0x80
 80063fc:	d009      	beq.n	8006412 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80063fe:	7bbb      	ldrb	r3, [r7, #14]
 8006400:	4619      	mov	r1, r3
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f001 f87a 	bl	80074fc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006408:	2180      	movs	r1, #128	; 0x80
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f001 f876 	bl	80074fc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006410:	e020      	b.n	8006454 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8006412:	6839      	ldr	r1, [r7, #0]
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f000 fc2d 	bl	8006c74 <USBD_CtlError>
              break;
 800641a:	e01b      	b.n	8006454 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	885b      	ldrh	r3, [r3, #2]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d10e      	bne.n	8006442 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8006424:	7bbb      	ldrb	r3, [r7, #14]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d00b      	beq.n	8006442 <USBD_StdEPReq+0xce>
 800642a:	7bbb      	ldrb	r3, [r7, #14]
 800642c:	2b80      	cmp	r3, #128	; 0x80
 800642e:	d008      	beq.n	8006442 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	88db      	ldrh	r3, [r3, #6]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d104      	bne.n	8006442 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006438:	7bbb      	ldrb	r3, [r7, #14]
 800643a:	4619      	mov	r1, r3
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f001 f85d 	bl	80074fc <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f000 fcde 	bl	8006e04 <USBD_CtlSendStatus>

              break;
 8006448:	e004      	b.n	8006454 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 800644a:	6839      	ldr	r1, [r7, #0]
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f000 fc11 	bl	8006c74 <USBD_CtlError>
              break;
 8006452:	bf00      	nop
          }
          break;
 8006454:	e0e0      	b.n	8006618 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800645c:	2b02      	cmp	r3, #2
 800645e:	d002      	beq.n	8006466 <USBD_StdEPReq+0xf2>
 8006460:	2b03      	cmp	r3, #3
 8006462:	d015      	beq.n	8006490 <USBD_StdEPReq+0x11c>
 8006464:	e026      	b.n	80064b4 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006466:	7bbb      	ldrb	r3, [r7, #14]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d00c      	beq.n	8006486 <USBD_StdEPReq+0x112>
 800646c:	7bbb      	ldrb	r3, [r7, #14]
 800646e:	2b80      	cmp	r3, #128	; 0x80
 8006470:	d009      	beq.n	8006486 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006472:	7bbb      	ldrb	r3, [r7, #14]
 8006474:	4619      	mov	r1, r3
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f001 f840 	bl	80074fc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800647c:	2180      	movs	r1, #128	; 0x80
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f001 f83c 	bl	80074fc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006484:	e01c      	b.n	80064c0 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8006486:	6839      	ldr	r1, [r7, #0]
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f000 fbf3 	bl	8006c74 <USBD_CtlError>
              break;
 800648e:	e017      	b.n	80064c0 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	885b      	ldrh	r3, [r3, #2]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d112      	bne.n	80064be <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006498:	7bbb      	ldrb	r3, [r7, #14]
 800649a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d004      	beq.n	80064ac <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80064a2:	7bbb      	ldrb	r3, [r7, #14]
 80064a4:	4619      	mov	r1, r3
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f001 f847 	bl	800753a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f000 fca9 	bl	8006e04 <USBD_CtlSendStatus>
              }
              break;
 80064b2:	e004      	b.n	80064be <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 80064b4:	6839      	ldr	r1, [r7, #0]
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f000 fbdc 	bl	8006c74 <USBD_CtlError>
              break;
 80064bc:	e000      	b.n	80064c0 <USBD_StdEPReq+0x14c>
              break;
 80064be:	bf00      	nop
          }
          break;
 80064c0:	e0aa      	b.n	8006618 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064c8:	2b02      	cmp	r3, #2
 80064ca:	d002      	beq.n	80064d2 <USBD_StdEPReq+0x15e>
 80064cc:	2b03      	cmp	r3, #3
 80064ce:	d032      	beq.n	8006536 <USBD_StdEPReq+0x1c2>
 80064d0:	e097      	b.n	8006602 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80064d2:	7bbb      	ldrb	r3, [r7, #14]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d007      	beq.n	80064e8 <USBD_StdEPReq+0x174>
 80064d8:	7bbb      	ldrb	r3, [r7, #14]
 80064da:	2b80      	cmp	r3, #128	; 0x80
 80064dc:	d004      	beq.n	80064e8 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 80064de:	6839      	ldr	r1, [r7, #0]
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f000 fbc7 	bl	8006c74 <USBD_CtlError>
                break;
 80064e6:	e091      	b.n	800660c <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80064e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	da0b      	bge.n	8006508 <USBD_StdEPReq+0x194>
 80064f0:	7bbb      	ldrb	r3, [r7, #14]
 80064f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80064f6:	4613      	mov	r3, r2
 80064f8:	009b      	lsls	r3, r3, #2
 80064fa:	4413      	add	r3, r2
 80064fc:	009b      	lsls	r3, r3, #2
 80064fe:	3310      	adds	r3, #16
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	4413      	add	r3, r2
 8006504:	3304      	adds	r3, #4
 8006506:	e00b      	b.n	8006520 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006508:	7bbb      	ldrb	r3, [r7, #14]
 800650a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800650e:	4613      	mov	r3, r2
 8006510:	009b      	lsls	r3, r3, #2
 8006512:	4413      	add	r3, r2
 8006514:	009b      	lsls	r3, r3, #2
 8006516:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800651a:	687a      	ldr	r2, [r7, #4]
 800651c:	4413      	add	r3, r2
 800651e:	3304      	adds	r3, #4
 8006520:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	2200      	movs	r2, #0
 8006526:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	2202      	movs	r2, #2
 800652c:	4619      	mov	r1, r3
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f000 fc0a 	bl	8006d48 <USBD_CtlSendData>
              break;
 8006534:	e06a      	b.n	800660c <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006536:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800653a:	2b00      	cmp	r3, #0
 800653c:	da11      	bge.n	8006562 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800653e:	7bbb      	ldrb	r3, [r7, #14]
 8006540:	f003 020f 	and.w	r2, r3, #15
 8006544:	6879      	ldr	r1, [r7, #4]
 8006546:	4613      	mov	r3, r2
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	4413      	add	r3, r2
 800654c:	009b      	lsls	r3, r3, #2
 800654e:	440b      	add	r3, r1
 8006550:	3318      	adds	r3, #24
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d117      	bne.n	8006588 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8006558:	6839      	ldr	r1, [r7, #0]
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f000 fb8a 	bl	8006c74 <USBD_CtlError>
                  break;
 8006560:	e054      	b.n	800660c <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006562:	7bbb      	ldrb	r3, [r7, #14]
 8006564:	f003 020f 	and.w	r2, r3, #15
 8006568:	6879      	ldr	r1, [r7, #4]
 800656a:	4613      	mov	r3, r2
 800656c:	009b      	lsls	r3, r3, #2
 800656e:	4413      	add	r3, r2
 8006570:	009b      	lsls	r3, r3, #2
 8006572:	440b      	add	r3, r1
 8006574:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d104      	bne.n	8006588 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800657e:	6839      	ldr	r1, [r7, #0]
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f000 fb77 	bl	8006c74 <USBD_CtlError>
                  break;
 8006586:	e041      	b.n	800660c <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006588:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800658c:	2b00      	cmp	r3, #0
 800658e:	da0b      	bge.n	80065a8 <USBD_StdEPReq+0x234>
 8006590:	7bbb      	ldrb	r3, [r7, #14]
 8006592:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006596:	4613      	mov	r3, r2
 8006598:	009b      	lsls	r3, r3, #2
 800659a:	4413      	add	r3, r2
 800659c:	009b      	lsls	r3, r3, #2
 800659e:	3310      	adds	r3, #16
 80065a0:	687a      	ldr	r2, [r7, #4]
 80065a2:	4413      	add	r3, r2
 80065a4:	3304      	adds	r3, #4
 80065a6:	e00b      	b.n	80065c0 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80065a8:	7bbb      	ldrb	r3, [r7, #14]
 80065aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80065ae:	4613      	mov	r3, r2
 80065b0:	009b      	lsls	r3, r3, #2
 80065b2:	4413      	add	r3, r2
 80065b4:	009b      	lsls	r3, r3, #2
 80065b6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80065ba:	687a      	ldr	r2, [r7, #4]
 80065bc:	4413      	add	r3, r2
 80065be:	3304      	adds	r3, #4
 80065c0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80065c2:	7bbb      	ldrb	r3, [r7, #14]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d002      	beq.n	80065ce <USBD_StdEPReq+0x25a>
 80065c8:	7bbb      	ldrb	r3, [r7, #14]
 80065ca:	2b80      	cmp	r3, #128	; 0x80
 80065cc:	d103      	bne.n	80065d6 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	2200      	movs	r2, #0
 80065d2:	601a      	str	r2, [r3, #0]
 80065d4:	e00e      	b.n	80065f4 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80065d6:	7bbb      	ldrb	r3, [r7, #14]
 80065d8:	4619      	mov	r1, r3
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f000 ffcc 	bl	8007578 <USBD_LL_IsStallEP>
 80065e0:	4603      	mov	r3, r0
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d003      	beq.n	80065ee <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	2201      	movs	r2, #1
 80065ea:	601a      	str	r2, [r3, #0]
 80065ec:	e002      	b.n	80065f4 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	2200      	movs	r2, #0
 80065f2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	2202      	movs	r2, #2
 80065f8:	4619      	mov	r1, r3
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f000 fba4 	bl	8006d48 <USBD_CtlSendData>
              break;
 8006600:	e004      	b.n	800660c <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8006602:	6839      	ldr	r1, [r7, #0]
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f000 fb35 	bl	8006c74 <USBD_CtlError>
              break;
 800660a:	bf00      	nop
          }
          break;
 800660c:	e004      	b.n	8006618 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 800660e:	6839      	ldr	r1, [r7, #0]
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f000 fb2f 	bl	8006c74 <USBD_CtlError>
          break;
 8006616:	bf00      	nop
      }
      break;
 8006618:	e004      	b.n	8006624 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 800661a:	6839      	ldr	r1, [r7, #0]
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f000 fb29 	bl	8006c74 <USBD_CtlError>
      break;
 8006622:	bf00      	nop
  }

  return ret;
 8006624:	7bfb      	ldrb	r3, [r7, #15]
}
 8006626:	4618      	mov	r0, r3
 8006628:	3710      	adds	r7, #16
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}
	...

08006630 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b084      	sub	sp, #16
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800663a:	2300      	movs	r3, #0
 800663c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800663e:	2300      	movs	r3, #0
 8006640:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006642:	2300      	movs	r3, #0
 8006644:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	885b      	ldrh	r3, [r3, #2]
 800664a:	0a1b      	lsrs	r3, r3, #8
 800664c:	b29b      	uxth	r3, r3
 800664e:	3b01      	subs	r3, #1
 8006650:	2b06      	cmp	r3, #6
 8006652:	f200 813b 	bhi.w	80068cc <USBD_GetDescriptor+0x29c>
 8006656:	a201      	add	r2, pc, #4	; (adr r2, 800665c <USBD_GetDescriptor+0x2c>)
 8006658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800665c:	08006679 	.word	0x08006679
 8006660:	08006691 	.word	0x08006691
 8006664:	080066d1 	.word	0x080066d1
 8006668:	080068cd 	.word	0x080068cd
 800666c:	080068cd 	.word	0x080068cd
 8006670:	0800686d 	.word	0x0800686d
 8006674:	08006899 	.word	0x08006899
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	687a      	ldr	r2, [r7, #4]
 8006682:	7c12      	ldrb	r2, [r2, #16]
 8006684:	f107 0108 	add.w	r1, r7, #8
 8006688:	4610      	mov	r0, r2
 800668a:	4798      	blx	r3
 800668c:	60f8      	str	r0, [r7, #12]
      break;
 800668e:	e125      	b.n	80068dc <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	7c1b      	ldrb	r3, [r3, #16]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d10d      	bne.n	80066b4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800669e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066a0:	f107 0208 	add.w	r2, r7, #8
 80066a4:	4610      	mov	r0, r2
 80066a6:	4798      	blx	r3
 80066a8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	3301      	adds	r3, #1
 80066ae:	2202      	movs	r2, #2
 80066b0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80066b2:	e113      	b.n	80068dc <USBD_GetDescriptor+0x2ac>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066bc:	f107 0208 	add.w	r2, r7, #8
 80066c0:	4610      	mov	r0, r2
 80066c2:	4798      	blx	r3
 80066c4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	3301      	adds	r3, #1
 80066ca:	2202      	movs	r2, #2
 80066cc:	701a      	strb	r2, [r3, #0]
      break;
 80066ce:	e105      	b.n	80068dc <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	885b      	ldrh	r3, [r3, #2]
 80066d4:	b2db      	uxtb	r3, r3
 80066d6:	2b05      	cmp	r3, #5
 80066d8:	f200 80ac 	bhi.w	8006834 <USBD_GetDescriptor+0x204>
 80066dc:	a201      	add	r2, pc, #4	; (adr r2, 80066e4 <USBD_GetDescriptor+0xb4>)
 80066de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066e2:	bf00      	nop
 80066e4:	080066fd 	.word	0x080066fd
 80066e8:	08006731 	.word	0x08006731
 80066ec:	08006765 	.word	0x08006765
 80066f0:	08006799 	.word	0x08006799
 80066f4:	080067cd 	.word	0x080067cd
 80066f8:	08006801 	.word	0x08006801
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d00b      	beq.n	8006720 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	7c12      	ldrb	r2, [r2, #16]
 8006714:	f107 0108 	add.w	r1, r7, #8
 8006718:	4610      	mov	r0, r2
 800671a:	4798      	blx	r3
 800671c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800671e:	e0a4      	b.n	800686a <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8006720:	6839      	ldr	r1, [r7, #0]
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f000 faa6 	bl	8006c74 <USBD_CtlError>
            err++;
 8006728:	7afb      	ldrb	r3, [r7, #11]
 800672a:	3301      	adds	r3, #1
 800672c:	72fb      	strb	r3, [r7, #11]
          break;
 800672e:	e09c      	b.n	800686a <USBD_GetDescriptor+0x23a>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d00b      	beq.n	8006754 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	687a      	ldr	r2, [r7, #4]
 8006746:	7c12      	ldrb	r2, [r2, #16]
 8006748:	f107 0108 	add.w	r1, r7, #8
 800674c:	4610      	mov	r0, r2
 800674e:	4798      	blx	r3
 8006750:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006752:	e08a      	b.n	800686a <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8006754:	6839      	ldr	r1, [r7, #0]
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f000 fa8c 	bl	8006c74 <USBD_CtlError>
            err++;
 800675c:	7afb      	ldrb	r3, [r7, #11]
 800675e:	3301      	adds	r3, #1
 8006760:	72fb      	strb	r3, [r7, #11]
          break;
 8006762:	e082      	b.n	800686a <USBD_GetDescriptor+0x23a>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800676a:	68db      	ldr	r3, [r3, #12]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d00b      	beq.n	8006788 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006776:	68db      	ldr	r3, [r3, #12]
 8006778:	687a      	ldr	r2, [r7, #4]
 800677a:	7c12      	ldrb	r2, [r2, #16]
 800677c:	f107 0108 	add.w	r1, r7, #8
 8006780:	4610      	mov	r0, r2
 8006782:	4798      	blx	r3
 8006784:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006786:	e070      	b.n	800686a <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8006788:	6839      	ldr	r1, [r7, #0]
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f000 fa72 	bl	8006c74 <USBD_CtlError>
            err++;
 8006790:	7afb      	ldrb	r3, [r7, #11]
 8006792:	3301      	adds	r3, #1
 8006794:	72fb      	strb	r3, [r7, #11]
          break;
 8006796:	e068      	b.n	800686a <USBD_GetDescriptor+0x23a>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800679e:	691b      	ldr	r3, [r3, #16]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d00b      	beq.n	80067bc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80067aa:	691b      	ldr	r3, [r3, #16]
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	7c12      	ldrb	r2, [r2, #16]
 80067b0:	f107 0108 	add.w	r1, r7, #8
 80067b4:	4610      	mov	r0, r2
 80067b6:	4798      	blx	r3
 80067b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80067ba:	e056      	b.n	800686a <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 80067bc:	6839      	ldr	r1, [r7, #0]
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f000 fa58 	bl	8006c74 <USBD_CtlError>
            err++;
 80067c4:	7afb      	ldrb	r3, [r7, #11]
 80067c6:	3301      	adds	r3, #1
 80067c8:	72fb      	strb	r3, [r7, #11]
          break;
 80067ca:	e04e      	b.n	800686a <USBD_GetDescriptor+0x23a>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80067d2:	695b      	ldr	r3, [r3, #20]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d00b      	beq.n	80067f0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80067de:	695b      	ldr	r3, [r3, #20]
 80067e0:	687a      	ldr	r2, [r7, #4]
 80067e2:	7c12      	ldrb	r2, [r2, #16]
 80067e4:	f107 0108 	add.w	r1, r7, #8
 80067e8:	4610      	mov	r0, r2
 80067ea:	4798      	blx	r3
 80067ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80067ee:	e03c      	b.n	800686a <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 80067f0:	6839      	ldr	r1, [r7, #0]
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f000 fa3e 	bl	8006c74 <USBD_CtlError>
            err++;
 80067f8:	7afb      	ldrb	r3, [r7, #11]
 80067fa:	3301      	adds	r3, #1
 80067fc:	72fb      	strb	r3, [r7, #11]
          break;
 80067fe:	e034      	b.n	800686a <USBD_GetDescriptor+0x23a>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006806:	699b      	ldr	r3, [r3, #24]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d00b      	beq.n	8006824 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006812:	699b      	ldr	r3, [r3, #24]
 8006814:	687a      	ldr	r2, [r7, #4]
 8006816:	7c12      	ldrb	r2, [r2, #16]
 8006818:	f107 0108 	add.w	r1, r7, #8
 800681c:	4610      	mov	r0, r2
 800681e:	4798      	blx	r3
 8006820:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006822:	e022      	b.n	800686a <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8006824:	6839      	ldr	r1, [r7, #0]
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f000 fa24 	bl	8006c74 <USBD_CtlError>
            err++;
 800682c:	7afb      	ldrb	r3, [r7, #11]
 800682e:	3301      	adds	r3, #1
 8006830:	72fb      	strb	r3, [r7, #11]
          break;
 8006832:	e01a      	b.n	800686a <USBD_GetDescriptor+0x23a>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800683a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800683c:	2b00      	cmp	r3, #0
 800683e:	d00c      	beq.n	800685a <USBD_GetDescriptor+0x22a>
          {
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006848:	683a      	ldr	r2, [r7, #0]
 800684a:	8852      	ldrh	r2, [r2, #2]
 800684c:	b2d1      	uxtb	r1, r2
 800684e:	f107 0208 	add.w	r2, r7, #8
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	4798      	blx	r3
 8006856:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006858:	e006      	b.n	8006868 <USBD_GetDescriptor+0x238>
            USBD_CtlError(pdev, req);
 800685a:	6839      	ldr	r1, [r7, #0]
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f000 fa09 	bl	8006c74 <USBD_CtlError>
            err++;
 8006862:	7afb      	ldrb	r3, [r7, #11]
 8006864:	3301      	adds	r3, #1
 8006866:	72fb      	strb	r3, [r7, #11]
          break;
 8006868:	bf00      	nop
#else
          USBD_CtlError(pdev, req);
          err++;
#endif
      }
      break;
 800686a:	e037      	b.n	80068dc <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	7c1b      	ldrb	r3, [r3, #16]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d109      	bne.n	8006888 <USBD_GetDescriptor+0x258>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800687a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800687c:	f107 0208 	add.w	r2, r7, #8
 8006880:	4610      	mov	r0, r2
 8006882:	4798      	blx	r3
 8006884:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006886:	e029      	b.n	80068dc <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 8006888:	6839      	ldr	r1, [r7, #0]
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f000 f9f2 	bl	8006c74 <USBD_CtlError>
        err++;
 8006890:	7afb      	ldrb	r3, [r7, #11]
 8006892:	3301      	adds	r3, #1
 8006894:	72fb      	strb	r3, [r7, #11]
      break;
 8006896:	e021      	b.n	80068dc <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	7c1b      	ldrb	r3, [r3, #16]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d10d      	bne.n	80068bc <USBD_GetDescriptor+0x28c>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068a8:	f107 0208 	add.w	r2, r7, #8
 80068ac:	4610      	mov	r0, r2
 80068ae:	4798      	blx	r3
 80068b0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	3301      	adds	r3, #1
 80068b6:	2207      	movs	r2, #7
 80068b8:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80068ba:	e00f      	b.n	80068dc <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 80068bc:	6839      	ldr	r1, [r7, #0]
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f000 f9d8 	bl	8006c74 <USBD_CtlError>
        err++;
 80068c4:	7afb      	ldrb	r3, [r7, #11]
 80068c6:	3301      	adds	r3, #1
 80068c8:	72fb      	strb	r3, [r7, #11]
      break;
 80068ca:	e007      	b.n	80068dc <USBD_GetDescriptor+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 80068cc:	6839      	ldr	r1, [r7, #0]
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f000 f9d0 	bl	8006c74 <USBD_CtlError>
      err++;
 80068d4:	7afb      	ldrb	r3, [r7, #11]
 80068d6:	3301      	adds	r3, #1
 80068d8:	72fb      	strb	r3, [r7, #11]
      break;
 80068da:	bf00      	nop
  }

  if (err != 0U)
 80068dc:	7afb      	ldrb	r3, [r7, #11]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d11c      	bne.n	800691c <USBD_GetDescriptor+0x2ec>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80068e2:	893b      	ldrh	r3, [r7, #8]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d011      	beq.n	800690c <USBD_GetDescriptor+0x2dc>
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	88db      	ldrh	r3, [r3, #6]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d00d      	beq.n	800690c <USBD_GetDescriptor+0x2dc>
    {
      len = MIN(len, req->wLength);
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	88da      	ldrh	r2, [r3, #6]
 80068f4:	893b      	ldrh	r3, [r7, #8]
 80068f6:	4293      	cmp	r3, r2
 80068f8:	bf28      	it	cs
 80068fa:	4613      	movcs	r3, r2
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006900:	893b      	ldrh	r3, [r7, #8]
 8006902:	461a      	mov	r2, r3
 8006904:	68f9      	ldr	r1, [r7, #12]
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f000 fa1e 	bl	8006d48 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	88db      	ldrh	r3, [r3, #6]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d104      	bne.n	800691e <USBD_GetDescriptor+0x2ee>
    {
      (void)USBD_CtlSendStatus(pdev);
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f000 fa75 	bl	8006e04 <USBD_CtlSendStatus>
 800691a:	e000      	b.n	800691e <USBD_GetDescriptor+0x2ee>
    return;
 800691c:	bf00      	nop
    }
  }
}
 800691e:	3710      	adds	r7, #16
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}

08006924 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b084      	sub	sp, #16
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
 800692c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	889b      	ldrh	r3, [r3, #4]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d130      	bne.n	8006998 <USBD_SetAddress+0x74>
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	88db      	ldrh	r3, [r3, #6]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d12c      	bne.n	8006998 <USBD_SetAddress+0x74>
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	885b      	ldrh	r3, [r3, #2]
 8006942:	2b7f      	cmp	r3, #127	; 0x7f
 8006944:	d828      	bhi.n	8006998 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	885b      	ldrh	r3, [r3, #2]
 800694a:	b2db      	uxtb	r3, r3
 800694c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006950:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006958:	2b03      	cmp	r3, #3
 800695a:	d104      	bne.n	8006966 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800695c:	6839      	ldr	r1, [r7, #0]
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 f988 	bl	8006c74 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006964:	e01c      	b.n	80069a0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	7bfa      	ldrb	r2, [r7, #15]
 800696a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800696e:	7bfb      	ldrb	r3, [r7, #15]
 8006970:	4619      	mov	r1, r3
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f000 fe25 	bl	80075c2 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f000 fa43 	bl	8006e04 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800697e:	7bfb      	ldrb	r3, [r7, #15]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d004      	beq.n	800698e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2202      	movs	r2, #2
 8006988:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800698c:	e008      	b.n	80069a0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2201      	movs	r2, #1
 8006992:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006996:	e003      	b.n	80069a0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006998:	6839      	ldr	r1, [r7, #0]
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f000 f96a 	bl	8006c74 <USBD_CtlError>
  }
}
 80069a0:	bf00      	nop
 80069a2:	3710      	adds	r7, #16
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}

080069a8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b082      	sub	sp, #8
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
 80069b0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	885b      	ldrh	r3, [r3, #2]
 80069b6:	b2da      	uxtb	r2, r3
 80069b8:	4b41      	ldr	r3, [pc, #260]	; (8006ac0 <USBD_SetConfig+0x118>)
 80069ba:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80069bc:	4b40      	ldr	r3, [pc, #256]	; (8006ac0 <USBD_SetConfig+0x118>)
 80069be:	781b      	ldrb	r3, [r3, #0]
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	d904      	bls.n	80069ce <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80069c4:	6839      	ldr	r1, [r7, #0]
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f000 f954 	bl	8006c74 <USBD_CtlError>
 80069cc:	e075      	b.n	8006aba <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069d4:	2b02      	cmp	r3, #2
 80069d6:	d002      	beq.n	80069de <USBD_SetConfig+0x36>
 80069d8:	2b03      	cmp	r3, #3
 80069da:	d023      	beq.n	8006a24 <USBD_SetConfig+0x7c>
 80069dc:	e062      	b.n	8006aa4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80069de:	4b38      	ldr	r3, [pc, #224]	; (8006ac0 <USBD_SetConfig+0x118>)
 80069e0:	781b      	ldrb	r3, [r3, #0]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d01a      	beq.n	8006a1c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80069e6:	4b36      	ldr	r3, [pc, #216]	; (8006ac0 <USBD_SetConfig+0x118>)
 80069e8:	781b      	ldrb	r3, [r3, #0]
 80069ea:	461a      	mov	r2, r3
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2203      	movs	r2, #3
 80069f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80069f8:	4b31      	ldr	r3, [pc, #196]	; (8006ac0 <USBD_SetConfig+0x118>)
 80069fa:	781b      	ldrb	r3, [r3, #0]
 80069fc:	4619      	mov	r1, r3
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f7ff f9e2 	bl	8005dc8 <USBD_SetClassConfig>
 8006a04:	4603      	mov	r3, r0
 8006a06:	2b02      	cmp	r3, #2
 8006a08:	d104      	bne.n	8006a14 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8006a0a:	6839      	ldr	r1, [r7, #0]
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f000 f931 	bl	8006c74 <USBD_CtlError>
            return;
 8006a12:	e052      	b.n	8006aba <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f000 f9f5 	bl	8006e04 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006a1a:	e04e      	b.n	8006aba <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f000 f9f1 	bl	8006e04 <USBD_CtlSendStatus>
        break;
 8006a22:	e04a      	b.n	8006aba <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006a24:	4b26      	ldr	r3, [pc, #152]	; (8006ac0 <USBD_SetConfig+0x118>)
 8006a26:	781b      	ldrb	r3, [r3, #0]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d112      	bne.n	8006a52 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2202      	movs	r2, #2
 8006a30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8006a34:	4b22      	ldr	r3, [pc, #136]	; (8006ac0 <USBD_SetConfig+0x118>)
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	461a      	mov	r2, r3
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8006a3e:	4b20      	ldr	r3, [pc, #128]	; (8006ac0 <USBD_SetConfig+0x118>)
 8006a40:	781b      	ldrb	r3, [r3, #0]
 8006a42:	4619      	mov	r1, r3
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f7ff f9de 	bl	8005e06 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f000 f9da 	bl	8006e04 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006a50:	e033      	b.n	8006aba <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8006a52:	4b1b      	ldr	r3, [pc, #108]	; (8006ac0 <USBD_SetConfig+0x118>)
 8006a54:	781b      	ldrb	r3, [r3, #0]
 8006a56:	461a      	mov	r2, r3
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d01d      	beq.n	8006a9c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	b2db      	uxtb	r3, r3
 8006a66:	4619      	mov	r1, r3
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f7ff f9cc 	bl	8005e06 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8006a6e:	4b14      	ldr	r3, [pc, #80]	; (8006ac0 <USBD_SetConfig+0x118>)
 8006a70:	781b      	ldrb	r3, [r3, #0]
 8006a72:	461a      	mov	r2, r3
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006a78:	4b11      	ldr	r3, [pc, #68]	; (8006ac0 <USBD_SetConfig+0x118>)
 8006a7a:	781b      	ldrb	r3, [r3, #0]
 8006a7c:	4619      	mov	r1, r3
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f7ff f9a2 	bl	8005dc8 <USBD_SetClassConfig>
 8006a84:	4603      	mov	r3, r0
 8006a86:	2b02      	cmp	r3, #2
 8006a88:	d104      	bne.n	8006a94 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8006a8a:	6839      	ldr	r1, [r7, #0]
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f000 f8f1 	bl	8006c74 <USBD_CtlError>
            return;
 8006a92:	e012      	b.n	8006aba <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f000 f9b5 	bl	8006e04 <USBD_CtlSendStatus>
        break;
 8006a9a:	e00e      	b.n	8006aba <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f000 f9b1 	bl	8006e04 <USBD_CtlSendStatus>
        break;
 8006aa2:	e00a      	b.n	8006aba <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8006aa4:	6839      	ldr	r1, [r7, #0]
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f000 f8e4 	bl	8006c74 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006aac:	4b04      	ldr	r3, [pc, #16]	; (8006ac0 <USBD_SetConfig+0x118>)
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	4619      	mov	r1, r3
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f7ff f9a7 	bl	8005e06 <USBD_ClrClassConfig>
        break;
 8006ab8:	bf00      	nop
    }
  }
}
 8006aba:	3708      	adds	r7, #8
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}
 8006ac0:	2000020b 	.word	0x2000020b

08006ac4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b082      	sub	sp, #8
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	88db      	ldrh	r3, [r3, #6]
 8006ad2:	2b01      	cmp	r3, #1
 8006ad4:	d004      	beq.n	8006ae0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006ad6:	6839      	ldr	r1, [r7, #0]
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f000 f8cb 	bl	8006c74 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006ade:	e021      	b.n	8006b24 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ae6:	2b01      	cmp	r3, #1
 8006ae8:	db17      	blt.n	8006b1a <USBD_GetConfig+0x56>
 8006aea:	2b02      	cmp	r3, #2
 8006aec:	dd02      	ble.n	8006af4 <USBD_GetConfig+0x30>
 8006aee:	2b03      	cmp	r3, #3
 8006af0:	d00b      	beq.n	8006b0a <USBD_GetConfig+0x46>
 8006af2:	e012      	b.n	8006b1a <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2200      	movs	r2, #0
 8006af8:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	3308      	adds	r3, #8
 8006afe:	2201      	movs	r2, #1
 8006b00:	4619      	mov	r1, r3
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f000 f920 	bl	8006d48 <USBD_CtlSendData>
        break;
 8006b08:	e00c      	b.n	8006b24 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	3304      	adds	r3, #4
 8006b0e:	2201      	movs	r2, #1
 8006b10:	4619      	mov	r1, r3
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f000 f918 	bl	8006d48 <USBD_CtlSendData>
        break;
 8006b18:	e004      	b.n	8006b24 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8006b1a:	6839      	ldr	r1, [r7, #0]
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f000 f8a9 	bl	8006c74 <USBD_CtlError>
        break;
 8006b22:	bf00      	nop
}
 8006b24:	bf00      	nop
 8006b26:	3708      	adds	r7, #8
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b082      	sub	sp, #8
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
 8006b34:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b3c:	3b01      	subs	r3, #1
 8006b3e:	2b02      	cmp	r3, #2
 8006b40:	d81e      	bhi.n	8006b80 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	88db      	ldrh	r3, [r3, #6]
 8006b46:	2b02      	cmp	r3, #2
 8006b48:	d004      	beq.n	8006b54 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8006b4a:	6839      	ldr	r1, [r7, #0]
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f000 f891 	bl	8006c74 <USBD_CtlError>
        break;
 8006b52:	e01a      	b.n	8006b8a <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2201      	movs	r2, #1
 8006b58:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d005      	beq.n	8006b70 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	68db      	ldr	r3, [r3, #12]
 8006b68:	f043 0202 	orr.w	r2, r3, #2
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	330c      	adds	r3, #12
 8006b74:	2202      	movs	r2, #2
 8006b76:	4619      	mov	r1, r3
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f000 f8e5 	bl	8006d48 <USBD_CtlSendData>
      break;
 8006b7e:	e004      	b.n	8006b8a <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8006b80:	6839      	ldr	r1, [r7, #0]
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f000 f876 	bl	8006c74 <USBD_CtlError>
      break;
 8006b88:	bf00      	nop
  }
}
 8006b8a:	bf00      	nop
 8006b8c:	3708      	adds	r7, #8
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}

08006b92 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006b92:	b580      	push	{r7, lr}
 8006b94:	b082      	sub	sp, #8
 8006b96:	af00      	add	r7, sp, #0
 8006b98:	6078      	str	r0, [r7, #4]
 8006b9a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	885b      	ldrh	r3, [r3, #2]
 8006ba0:	2b01      	cmp	r3, #1
 8006ba2:	d106      	bne.n	8006bb2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f000 f929 	bl	8006e04 <USBD_CtlSendStatus>
  }
}
 8006bb2:	bf00      	nop
 8006bb4:	3708      	adds	r7, #8
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}

08006bba <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006bba:	b580      	push	{r7, lr}
 8006bbc:	b082      	sub	sp, #8
 8006bbe:	af00      	add	r7, sp, #0
 8006bc0:	6078      	str	r0, [r7, #4]
 8006bc2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bca:	3b01      	subs	r3, #1
 8006bcc:	2b02      	cmp	r3, #2
 8006bce:	d80b      	bhi.n	8006be8 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	885b      	ldrh	r3, [r3, #2]
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	d10c      	bne.n	8006bf2 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f000 f90f 	bl	8006e04 <USBD_CtlSendStatus>
      }
      break;
 8006be6:	e004      	b.n	8006bf2 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006be8:	6839      	ldr	r1, [r7, #0]
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f000 f842 	bl	8006c74 <USBD_CtlError>
      break;
 8006bf0:	e000      	b.n	8006bf4 <USBD_ClrFeature+0x3a>
      break;
 8006bf2:	bf00      	nop
  }
}
 8006bf4:	bf00      	nop
 8006bf6:	3708      	adds	r7, #8
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}

08006bfc <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b083      	sub	sp, #12
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
 8006c04:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	781a      	ldrb	r2, [r3, #0]
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	785a      	ldrb	r2, [r3, #1]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	3302      	adds	r3, #2
 8006c1a:	781b      	ldrb	r3, [r3, #0]
 8006c1c:	b29a      	uxth	r2, r3
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	3303      	adds	r3, #3
 8006c22:	781b      	ldrb	r3, [r3, #0]
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	021b      	lsls	r3, r3, #8
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	4413      	add	r3, r2
 8006c2c:	b29a      	uxth	r2, r3
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	3304      	adds	r3, #4
 8006c36:	781b      	ldrb	r3, [r3, #0]
 8006c38:	b29a      	uxth	r2, r3
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	3305      	adds	r3, #5
 8006c3e:	781b      	ldrb	r3, [r3, #0]
 8006c40:	b29b      	uxth	r3, r3
 8006c42:	021b      	lsls	r3, r3, #8
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	4413      	add	r3, r2
 8006c48:	b29a      	uxth	r2, r3
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	3306      	adds	r3, #6
 8006c52:	781b      	ldrb	r3, [r3, #0]
 8006c54:	b29a      	uxth	r2, r3
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	3307      	adds	r3, #7
 8006c5a:	781b      	ldrb	r3, [r3, #0]
 8006c5c:	b29b      	uxth	r3, r3
 8006c5e:	021b      	lsls	r3, r3, #8
 8006c60:	b29b      	uxth	r3, r3
 8006c62:	4413      	add	r3, r2
 8006c64:	b29a      	uxth	r2, r3
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	80da      	strh	r2, [r3, #6]

}
 8006c6a:	bf00      	nop
 8006c6c:	370c      	adds	r7, #12
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bc80      	pop	{r7}
 8006c72:	4770      	bx	lr

08006c74 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b082      	sub	sp, #8
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
 8006c7c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8006c7e:	2180      	movs	r1, #128	; 0x80
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f000 fc3b 	bl	80074fc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006c86:	2100      	movs	r1, #0
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f000 fc37 	bl	80074fc <USBD_LL_StallEP>
}
 8006c8e:	bf00      	nop
 8006c90:	3708      	adds	r7, #8
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}

08006c96 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006c96:	b580      	push	{r7, lr}
 8006c98:	b086      	sub	sp, #24
 8006c9a:	af00      	add	r7, sp, #0
 8006c9c:	60f8      	str	r0, [r7, #12]
 8006c9e:	60b9      	str	r1, [r7, #8]
 8006ca0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d032      	beq.n	8006d12 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006cac:	68f8      	ldr	r0, [r7, #12]
 8006cae:	f000 f834 	bl	8006d1a <USBD_GetLen>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	3301      	adds	r3, #1
 8006cb6:	b29b      	uxth	r3, r3
 8006cb8:	005b      	lsls	r3, r3, #1
 8006cba:	b29a      	uxth	r2, r3
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006cc0:	7dfb      	ldrb	r3, [r7, #23]
 8006cc2:	1c5a      	adds	r2, r3, #1
 8006cc4:	75fa      	strb	r2, [r7, #23]
 8006cc6:	461a      	mov	r2, r3
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	4413      	add	r3, r2
 8006ccc:	687a      	ldr	r2, [r7, #4]
 8006cce:	7812      	ldrb	r2, [r2, #0]
 8006cd0:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006cd2:	7dfb      	ldrb	r3, [r7, #23]
 8006cd4:	1c5a      	adds	r2, r3, #1
 8006cd6:	75fa      	strb	r2, [r7, #23]
 8006cd8:	461a      	mov	r2, r3
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	4413      	add	r3, r2
 8006cde:	2203      	movs	r2, #3
 8006ce0:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006ce2:	e012      	b.n	8006d0a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	1c5a      	adds	r2, r3, #1
 8006ce8:	60fa      	str	r2, [r7, #12]
 8006cea:	7dfa      	ldrb	r2, [r7, #23]
 8006cec:	1c51      	adds	r1, r2, #1
 8006cee:	75f9      	strb	r1, [r7, #23]
 8006cf0:	4611      	mov	r1, r2
 8006cf2:	68ba      	ldr	r2, [r7, #8]
 8006cf4:	440a      	add	r2, r1
 8006cf6:	781b      	ldrb	r3, [r3, #0]
 8006cf8:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006cfa:	7dfb      	ldrb	r3, [r7, #23]
 8006cfc:	1c5a      	adds	r2, r3, #1
 8006cfe:	75fa      	strb	r2, [r7, #23]
 8006d00:	461a      	mov	r2, r3
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	4413      	add	r3, r2
 8006d06:	2200      	movs	r2, #0
 8006d08:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	781b      	ldrb	r3, [r3, #0]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d1e8      	bne.n	8006ce4 <USBD_GetString+0x4e>
    }
  }
}
 8006d12:	bf00      	nop
 8006d14:	3718      	adds	r7, #24
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}

08006d1a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006d1a:	b480      	push	{r7}
 8006d1c:	b085      	sub	sp, #20
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006d22:	2300      	movs	r3, #0
 8006d24:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8006d26:	e005      	b.n	8006d34 <USBD_GetLen+0x1a>
  {
    len++;
 8006d28:	7bfb      	ldrb	r3, [r7, #15]
 8006d2a:	3301      	adds	r3, #1
 8006d2c:	73fb      	strb	r3, [r7, #15]
    buf++;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	3301      	adds	r3, #1
 8006d32:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	781b      	ldrb	r3, [r3, #0]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d1f5      	bne.n	8006d28 <USBD_GetLen+0xe>
  }

  return len;
 8006d3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3714      	adds	r7, #20
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bc80      	pop	{r7}
 8006d46:	4770      	bx	lr

08006d48 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b084      	sub	sp, #16
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	60f8      	str	r0, [r7, #12]
 8006d50:	60b9      	str	r1, [r7, #8]
 8006d52:	4613      	mov	r3, r2
 8006d54:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2202      	movs	r2, #2
 8006d5a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006d5e:	88fa      	ldrh	r2, [r7, #6]
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006d64:	88fa      	ldrh	r2, [r7, #6]
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006d6a:	88fb      	ldrh	r3, [r7, #6]
 8006d6c:	68ba      	ldr	r2, [r7, #8]
 8006d6e:	2100      	movs	r1, #0
 8006d70:	68f8      	ldr	r0, [r7, #12]
 8006d72:	f000 fc45 	bl	8007600 <USBD_LL_Transmit>

  return USBD_OK;
 8006d76:	2300      	movs	r3, #0
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	3710      	adds	r7, #16
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}

08006d80 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b084      	sub	sp, #16
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	60f8      	str	r0, [r7, #12]
 8006d88:	60b9      	str	r1, [r7, #8]
 8006d8a:	4613      	mov	r3, r2
 8006d8c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006d8e:	88fb      	ldrh	r3, [r7, #6]
 8006d90:	68ba      	ldr	r2, [r7, #8]
 8006d92:	2100      	movs	r1, #0
 8006d94:	68f8      	ldr	r0, [r7, #12]
 8006d96:	f000 fc33 	bl	8007600 <USBD_LL_Transmit>

  return USBD_OK;
 8006d9a:	2300      	movs	r3, #0
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3710      	adds	r7, #16
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}

08006da4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b084      	sub	sp, #16
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	60f8      	str	r0, [r7, #12]
 8006dac:	60b9      	str	r1, [r7, #8]
 8006dae:	4613      	mov	r3, r2
 8006db0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2203      	movs	r2, #3
 8006db6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006dba:	88fa      	ldrh	r2, [r7, #6]
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8006dc2:	88fa      	ldrh	r2, [r7, #6]
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006dca:	88fb      	ldrh	r3, [r7, #6]
 8006dcc:	68ba      	ldr	r2, [r7, #8]
 8006dce:	2100      	movs	r1, #0
 8006dd0:	68f8      	ldr	r0, [r7, #12]
 8006dd2:	f000 fc38 	bl	8007646 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006dd6:	2300      	movs	r3, #0
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	3710      	adds	r7, #16
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}

08006de0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b084      	sub	sp, #16
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	60f8      	str	r0, [r7, #12]
 8006de8:	60b9      	str	r1, [r7, #8]
 8006dea:	4613      	mov	r3, r2
 8006dec:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006dee:	88fb      	ldrh	r3, [r7, #6]
 8006df0:	68ba      	ldr	r2, [r7, #8]
 8006df2:	2100      	movs	r1, #0
 8006df4:	68f8      	ldr	r0, [r7, #12]
 8006df6:	f000 fc26 	bl	8007646 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006dfa:	2300      	movs	r3, #0
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3710      	adds	r7, #16
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}

08006e04 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b082      	sub	sp, #8
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2204      	movs	r2, #4
 8006e10:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006e14:	2300      	movs	r3, #0
 8006e16:	2200      	movs	r2, #0
 8006e18:	2100      	movs	r1, #0
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f000 fbf0 	bl	8007600 <USBD_LL_Transmit>

  return USBD_OK;
 8006e20:	2300      	movs	r3, #0
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3708      	adds	r7, #8
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}

08006e2a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006e2a:	b580      	push	{r7, lr}
 8006e2c:	b082      	sub	sp, #8
 8006e2e:	af00      	add	r7, sp, #0
 8006e30:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2205      	movs	r2, #5
 8006e36:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	2100      	movs	r1, #0
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f000 fc00 	bl	8007646 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006e46:	2300      	movs	r3, #0
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3708      	adds	r7, #8
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}

08006e50 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b087      	sub	sp, #28
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	60f8      	str	r0, [r7, #12]
 8006e58:	60b9      	str	r1, [r7, #8]
 8006e5a:	4613      	mov	r3, r2
 8006e5c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006e62:	2300      	movs	r3, #0
 8006e64:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8006e66:	4b1e      	ldr	r3, [pc, #120]	; (8006ee0 <FATFS_LinkDriverEx+0x90>)
 8006e68:	7a5b      	ldrb	r3, [r3, #9]
 8006e6a:	b2db      	uxtb	r3, r3
 8006e6c:	2b01      	cmp	r3, #1
 8006e6e:	d831      	bhi.n	8006ed4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006e70:	4b1b      	ldr	r3, [pc, #108]	; (8006ee0 <FATFS_LinkDriverEx+0x90>)
 8006e72:	7a5b      	ldrb	r3, [r3, #9]
 8006e74:	b2db      	uxtb	r3, r3
 8006e76:	461a      	mov	r2, r3
 8006e78:	4b19      	ldr	r3, [pc, #100]	; (8006ee0 <FATFS_LinkDriverEx+0x90>)
 8006e7a:	2100      	movs	r1, #0
 8006e7c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8006e7e:	4b18      	ldr	r3, [pc, #96]	; (8006ee0 <FATFS_LinkDriverEx+0x90>)
 8006e80:	7a5b      	ldrb	r3, [r3, #9]
 8006e82:	b2db      	uxtb	r3, r3
 8006e84:	4a16      	ldr	r2, [pc, #88]	; (8006ee0 <FATFS_LinkDriverEx+0x90>)
 8006e86:	009b      	lsls	r3, r3, #2
 8006e88:	4413      	add	r3, r2
 8006e8a:	68fa      	ldr	r2, [r7, #12]
 8006e8c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8006e8e:	4b14      	ldr	r3, [pc, #80]	; (8006ee0 <FATFS_LinkDriverEx+0x90>)
 8006e90:	7a5b      	ldrb	r3, [r3, #9]
 8006e92:	b2db      	uxtb	r3, r3
 8006e94:	461a      	mov	r2, r3
 8006e96:	4b12      	ldr	r3, [pc, #72]	; (8006ee0 <FATFS_LinkDriverEx+0x90>)
 8006e98:	4413      	add	r3, r2
 8006e9a:	79fa      	ldrb	r2, [r7, #7]
 8006e9c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006e9e:	4b10      	ldr	r3, [pc, #64]	; (8006ee0 <FATFS_LinkDriverEx+0x90>)
 8006ea0:	7a5b      	ldrb	r3, [r3, #9]
 8006ea2:	b2db      	uxtb	r3, r3
 8006ea4:	1c5a      	adds	r2, r3, #1
 8006ea6:	b2d1      	uxtb	r1, r2
 8006ea8:	4a0d      	ldr	r2, [pc, #52]	; (8006ee0 <FATFS_LinkDriverEx+0x90>)
 8006eaa:	7251      	strb	r1, [r2, #9]
 8006eac:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006eae:	7dbb      	ldrb	r3, [r7, #22]
 8006eb0:	3330      	adds	r3, #48	; 0x30
 8006eb2:	b2da      	uxtb	r2, r3
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	3301      	adds	r3, #1
 8006ebc:	223a      	movs	r2, #58	; 0x3a
 8006ebe:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	3302      	adds	r3, #2
 8006ec4:	222f      	movs	r2, #47	; 0x2f
 8006ec6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	3303      	adds	r3, #3
 8006ecc:	2200      	movs	r2, #0
 8006ece:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8006ed4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	371c      	adds	r7, #28
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bc80      	pop	{r7}
 8006ede:	4770      	bx	lr
 8006ee0:	2000020c 	.word	0x2000020c

08006ee4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b082      	sub	sp, #8
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006eee:	2200      	movs	r2, #0
 8006ef0:	6839      	ldr	r1, [r7, #0]
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f7ff ffac 	bl	8006e50 <FATFS_LinkDriverEx>
 8006ef8:	4603      	mov	r3, r0
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3708      	adds	r7, #8
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}
	...

08006f04 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006f08:	2200      	movs	r2, #0
 8006f0a:	4912      	ldr	r1, [pc, #72]	; (8006f54 <MX_USB_DEVICE_Init+0x50>)
 8006f0c:	4812      	ldr	r0, [pc, #72]	; (8006f58 <MX_USB_DEVICE_Init+0x54>)
 8006f0e:	f7fe feeb 	bl	8005ce8 <USBD_Init>
 8006f12:	4603      	mov	r3, r0
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d001      	beq.n	8006f1c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006f18:	f7f9 fcae 	bl	8000878 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_DFU) != USBD_OK)
 8006f1c:	490f      	ldr	r1, [pc, #60]	; (8006f5c <MX_USB_DEVICE_Init+0x58>)
 8006f1e:	480e      	ldr	r0, [pc, #56]	; (8006f58 <MX_USB_DEVICE_Init+0x54>)
 8006f20:	f7fe ff0d 	bl	8005d3e <USBD_RegisterClass>
 8006f24:	4603      	mov	r3, r0
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d001      	beq.n	8006f2e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006f2a:	f7f9 fca5 	bl	8000878 <Error_Handler>
  }
  if (USBD_DFU_RegisterMedia(&hUsbDeviceFS, &USBD_DFU_fops_FS) != USBD_OK)
 8006f2e:	490c      	ldr	r1, [pc, #48]	; (8006f60 <MX_USB_DEVICE_Init+0x5c>)
 8006f30:	4809      	ldr	r0, [pc, #36]	; (8006f58 <MX_USB_DEVICE_Init+0x54>)
 8006f32:	f7fe fb71 	bl	8005618 <USBD_DFU_RegisterMedia>
 8006f36:	4603      	mov	r3, r0
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d001      	beq.n	8006f40 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006f3c:	f7f9 fc9c 	bl	8000878 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006f40:	4805      	ldr	r0, [pc, #20]	; (8006f58 <MX_USB_DEVICE_Init+0x54>)
 8006f42:	f7fe ff15 	bl	8005d70 <USBD_Start>
 8006f46:	4603      	mov	r3, r0
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d001      	beq.n	8006f50 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006f4c:	f7f9 fc94 	bl	8000878 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006f50:	bf00      	nop
 8006f52:	bd80      	pop	{r7, pc}
 8006f54:	20000084 	.word	0x20000084
 8006f58:	200018c4 	.word	0x200018c4
 8006f5c:	20000020 	.word	0x20000020
 8006f60:	200000d4 	.word	0x200000d4

08006f64 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b083      	sub	sp, #12
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	6039      	str	r1, [r7, #0]
 8006f6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	2212      	movs	r2, #18
 8006f74:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006f76:	4b03      	ldr	r3, [pc, #12]	; (8006f84 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	370c      	adds	r7, #12
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bc80      	pop	{r7}
 8006f80:	4770      	bx	lr
 8006f82:	bf00      	nop
 8006f84:	200000a0 	.word	0x200000a0

08006f88 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b083      	sub	sp, #12
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	4603      	mov	r3, r0
 8006f90:	6039      	str	r1, [r7, #0]
 8006f92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	2204      	movs	r2, #4
 8006f98:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006f9a:	4b03      	ldr	r3, [pc, #12]	; (8006fa8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	370c      	adds	r7, #12
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bc80      	pop	{r7}
 8006fa4:	4770      	bx	lr
 8006fa6:	bf00      	nop
 8006fa8:	200000b4 	.word	0x200000b4

08006fac <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b082      	sub	sp, #8
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	6039      	str	r1, [r7, #0]
 8006fb6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006fb8:	79fb      	ldrb	r3, [r7, #7]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d105      	bne.n	8006fca <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006fbe:	683a      	ldr	r2, [r7, #0]
 8006fc0:	4907      	ldr	r1, [pc, #28]	; (8006fe0 <USBD_FS_ProductStrDescriptor+0x34>)
 8006fc2:	4808      	ldr	r0, [pc, #32]	; (8006fe4 <USBD_FS_ProductStrDescriptor+0x38>)
 8006fc4:	f7ff fe67 	bl	8006c96 <USBD_GetString>
 8006fc8:	e004      	b.n	8006fd4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006fca:	683a      	ldr	r2, [r7, #0]
 8006fcc:	4904      	ldr	r1, [pc, #16]	; (8006fe0 <USBD_FS_ProductStrDescriptor+0x34>)
 8006fce:	4805      	ldr	r0, [pc, #20]	; (8006fe4 <USBD_FS_ProductStrDescriptor+0x38>)
 8006fd0:	f7ff fe61 	bl	8006c96 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006fd4:	4b02      	ldr	r3, [pc, #8]	; (8006fe0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3708      	adds	r7, #8
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}
 8006fde:	bf00      	nop
 8006fe0:	20001b88 	.word	0x20001b88
 8006fe4:	080077a8 	.word	0x080077a8

08006fe8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b082      	sub	sp, #8
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	4603      	mov	r3, r0
 8006ff0:	6039      	str	r1, [r7, #0]
 8006ff2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006ff4:	683a      	ldr	r2, [r7, #0]
 8006ff6:	4904      	ldr	r1, [pc, #16]	; (8007008 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006ff8:	4804      	ldr	r0, [pc, #16]	; (800700c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006ffa:	f7ff fe4c 	bl	8006c96 <USBD_GetString>
  return USBD_StrDesc;
 8006ffe:	4b02      	ldr	r3, [pc, #8]	; (8007008 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007000:	4618      	mov	r0, r3
 8007002:	3708      	adds	r7, #8
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}
 8007008:	20001b88 	.word	0x20001b88
 800700c:	080077c8 	.word	0x080077c8

08007010 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b082      	sub	sp, #8
 8007014:	af00      	add	r7, sp, #0
 8007016:	4603      	mov	r3, r0
 8007018:	6039      	str	r1, [r7, #0]
 800701a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	221a      	movs	r2, #26
 8007020:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007022:	f000 f843 	bl	80070ac <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007026:	4b02      	ldr	r3, [pc, #8]	; (8007030 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007028:	4618      	mov	r0, r3
 800702a:	3708      	adds	r7, #8
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}
 8007030:	200000b8 	.word	0x200000b8

08007034 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b082      	sub	sp, #8
 8007038:	af00      	add	r7, sp, #0
 800703a:	4603      	mov	r3, r0
 800703c:	6039      	str	r1, [r7, #0]
 800703e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007040:	79fb      	ldrb	r3, [r7, #7]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d105      	bne.n	8007052 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007046:	683a      	ldr	r2, [r7, #0]
 8007048:	4907      	ldr	r1, [pc, #28]	; (8007068 <USBD_FS_ConfigStrDescriptor+0x34>)
 800704a:	4808      	ldr	r0, [pc, #32]	; (800706c <USBD_FS_ConfigStrDescriptor+0x38>)
 800704c:	f7ff fe23 	bl	8006c96 <USBD_GetString>
 8007050:	e004      	b.n	800705c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007052:	683a      	ldr	r2, [r7, #0]
 8007054:	4904      	ldr	r1, [pc, #16]	; (8007068 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007056:	4805      	ldr	r0, [pc, #20]	; (800706c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007058:	f7ff fe1d 	bl	8006c96 <USBD_GetString>
  }
  return USBD_StrDesc;
 800705c:	4b02      	ldr	r3, [pc, #8]	; (8007068 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800705e:	4618      	mov	r0, r3
 8007060:	3708      	adds	r7, #8
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}
 8007066:	bf00      	nop
 8007068:	20001b88 	.word	0x20001b88
 800706c:	080077dc 	.word	0x080077dc

08007070 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b082      	sub	sp, #8
 8007074:	af00      	add	r7, sp, #0
 8007076:	4603      	mov	r3, r0
 8007078:	6039      	str	r1, [r7, #0]
 800707a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800707c:	79fb      	ldrb	r3, [r7, #7]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d105      	bne.n	800708e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007082:	683a      	ldr	r2, [r7, #0]
 8007084:	4907      	ldr	r1, [pc, #28]	; (80070a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007086:	4808      	ldr	r0, [pc, #32]	; (80070a8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007088:	f7ff fe05 	bl	8006c96 <USBD_GetString>
 800708c:	e004      	b.n	8007098 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800708e:	683a      	ldr	r2, [r7, #0]
 8007090:	4904      	ldr	r1, [pc, #16]	; (80070a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007092:	4805      	ldr	r0, [pc, #20]	; (80070a8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007094:	f7ff fdff 	bl	8006c96 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007098:	4b02      	ldr	r3, [pc, #8]	; (80070a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800709a:	4618      	mov	r0, r3
 800709c:	3708      	adds	r7, #8
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}
 80070a2:	bf00      	nop
 80070a4:	20001b88 	.word	0x20001b88
 80070a8:	080077e8 	.word	0x080077e8

080070ac <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b084      	sub	sp, #16
 80070b0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80070b2:	4b0f      	ldr	r3, [pc, #60]	; (80070f0 <Get_SerialNum+0x44>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80070b8:	4b0e      	ldr	r3, [pc, #56]	; (80070f4 <Get_SerialNum+0x48>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80070be:	4b0e      	ldr	r3, [pc, #56]	; (80070f8 <Get_SerialNum+0x4c>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80070c4:	68fa      	ldr	r2, [r7, #12]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	4413      	add	r3, r2
 80070ca:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d009      	beq.n	80070e6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80070d2:	2208      	movs	r2, #8
 80070d4:	4909      	ldr	r1, [pc, #36]	; (80070fc <Get_SerialNum+0x50>)
 80070d6:	68f8      	ldr	r0, [r7, #12]
 80070d8:	f000 f814 	bl	8007104 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80070dc:	2204      	movs	r2, #4
 80070de:	4908      	ldr	r1, [pc, #32]	; (8007100 <Get_SerialNum+0x54>)
 80070e0:	68b8      	ldr	r0, [r7, #8]
 80070e2:	f000 f80f 	bl	8007104 <IntToUnicode>
  }
}
 80070e6:	bf00      	nop
 80070e8:	3710      	adds	r7, #16
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}
 80070ee:	bf00      	nop
 80070f0:	1ffff7e8 	.word	0x1ffff7e8
 80070f4:	1ffff7ec 	.word	0x1ffff7ec
 80070f8:	1ffff7f0 	.word	0x1ffff7f0
 80070fc:	200000ba 	.word	0x200000ba
 8007100:	200000ca 	.word	0x200000ca

08007104 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007104:	b480      	push	{r7}
 8007106:	b087      	sub	sp, #28
 8007108:	af00      	add	r7, sp, #0
 800710a:	60f8      	str	r0, [r7, #12]
 800710c:	60b9      	str	r1, [r7, #8]
 800710e:	4613      	mov	r3, r2
 8007110:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007112:	2300      	movs	r3, #0
 8007114:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007116:	2300      	movs	r3, #0
 8007118:	75fb      	strb	r3, [r7, #23]
 800711a:	e027      	b.n	800716c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	0f1b      	lsrs	r3, r3, #28
 8007120:	2b09      	cmp	r3, #9
 8007122:	d80b      	bhi.n	800713c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	0f1b      	lsrs	r3, r3, #28
 8007128:	b2da      	uxtb	r2, r3
 800712a:	7dfb      	ldrb	r3, [r7, #23]
 800712c:	005b      	lsls	r3, r3, #1
 800712e:	4619      	mov	r1, r3
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	440b      	add	r3, r1
 8007134:	3230      	adds	r2, #48	; 0x30
 8007136:	b2d2      	uxtb	r2, r2
 8007138:	701a      	strb	r2, [r3, #0]
 800713a:	e00a      	b.n	8007152 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	0f1b      	lsrs	r3, r3, #28
 8007140:	b2da      	uxtb	r2, r3
 8007142:	7dfb      	ldrb	r3, [r7, #23]
 8007144:	005b      	lsls	r3, r3, #1
 8007146:	4619      	mov	r1, r3
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	440b      	add	r3, r1
 800714c:	3237      	adds	r2, #55	; 0x37
 800714e:	b2d2      	uxtb	r2, r2
 8007150:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	011b      	lsls	r3, r3, #4
 8007156:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007158:	7dfb      	ldrb	r3, [r7, #23]
 800715a:	005b      	lsls	r3, r3, #1
 800715c:	3301      	adds	r3, #1
 800715e:	68ba      	ldr	r2, [r7, #8]
 8007160:	4413      	add	r3, r2
 8007162:	2200      	movs	r2, #0
 8007164:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007166:	7dfb      	ldrb	r3, [r7, #23]
 8007168:	3301      	adds	r3, #1
 800716a:	75fb      	strb	r3, [r7, #23]
 800716c:	7dfa      	ldrb	r2, [r7, #23]
 800716e:	79fb      	ldrb	r3, [r7, #7]
 8007170:	429a      	cmp	r2, r3
 8007172:	d3d3      	bcc.n	800711c <IntToUnicode+0x18>
  }
}
 8007174:	bf00      	nop
 8007176:	371c      	adds	r7, #28
 8007178:	46bd      	mov	sp, r7
 800717a:	bc80      	pop	{r7}
 800717c:	4770      	bx	lr

0800717e <MEM_If_Init_FS>:
/**
  * @brief  Memory initialization routine.
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Init_FS(void)
{
 800717e:	b480      	push	{r7}
 8007180:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 0 */
  return (USBD_OK);
 8007182:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 8007184:	4618      	mov	r0, r3
 8007186:	46bd      	mov	sp, r7
 8007188:	bc80      	pop	{r7}
 800718a:	4770      	bx	lr

0800718c <MEM_If_DeInit_FS>:
/**
  * @brief  De-Initializes Memory
  * @retval USBD_OK if operation is successful, MAL_FAIL else
  */
uint16_t MEM_If_DeInit_FS(void)
{
 800718c:	b480      	push	{r7}
 800718e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  return (USBD_OK);
 8007190:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 8007192:	4618      	mov	r0, r3
 8007194:	46bd      	mov	sp, r7
 8007196:	bc80      	pop	{r7}
 8007198:	4770      	bx	lr

0800719a <MEM_If_Erase_FS>:
  * @brief  Erase sector.
  * @param  Add: Address of sector to be erased.
  * @retval 0 if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Erase_FS(uint32_t Add)
{
 800719a:	b480      	push	{r7}
 800719c:	b083      	sub	sp, #12
 800719e:	af00      	add	r7, sp, #0
 80071a0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 2 */

  return (USBD_OK);
 80071a2:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	370c      	adds	r7, #12
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bc80      	pop	{r7}
 80071ac:	4770      	bx	lr

080071ae <MEM_If_Write_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be written (in bytes).
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Write_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 80071ae:	b480      	push	{r7}
 80071b0:	b085      	sub	sp, #20
 80071b2:	af00      	add	r7, sp, #0
 80071b4:	60f8      	str	r0, [r7, #12]
 80071b6:	60b9      	str	r1, [r7, #8]
 80071b8:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 3 */
  return (USBD_OK);
 80071ba:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3714      	adds	r7, #20
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bc80      	pop	{r7}
 80071c4:	4770      	bx	lr

080071c6 <MEM_If_Read_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be read (in bytes).
  * @retval Pointer to the physical address where data should be read.
  */
uint8_t *MEM_If_Read_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 80071c6:	b480      	push	{r7}
 80071c8:	b085      	sub	sp, #20
 80071ca:	af00      	add	r7, sp, #0
 80071cc:	60f8      	str	r0, [r7, #12]
 80071ce:	60b9      	str	r1, [r7, #8]
 80071d0:	607a      	str	r2, [r7, #4]
  /* Return a valid address to avoid HardFault */
  /* USER CODE BEGIN 4 */
  return (uint8_t*)(USBD_OK);
 80071d2:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3714      	adds	r7, #20
 80071d8:	46bd      	mov	sp, r7
 80071da:	bc80      	pop	{r7}
 80071dc:	4770      	bx	lr

080071de <MEM_If_GetStatus_FS>:
  * @param  Cmd: Number of data to be read (in bytes)
  * @param  buffer: used for returning the time necessary for a program or an erase operation
  * @retval USBD_OK if operation is successful
  */
uint16_t MEM_If_GetStatus_FS(uint32_t Add, uint8_t Cmd, uint8_t *buffer)
{
 80071de:	b480      	push	{r7}
 80071e0:	b085      	sub	sp, #20
 80071e2:	af00      	add	r7, sp, #0
 80071e4:	60f8      	str	r0, [r7, #12]
 80071e6:	460b      	mov	r3, r1
 80071e8:	607a      	str	r2, [r7, #4]
 80071ea:	72fb      	strb	r3, [r7, #11]
  /* USER CODE BEGIN 5 */
  switch (Cmd)
 80071ec:	7afb      	ldrb	r3, [r7, #11]
 80071ee:	2b01      	cmp	r3, #1
 80071f0:	d000      	beq.n	80071f4 <MEM_If_GetStatus_FS+0x16>
    break;

    case DFU_MEDIA_ERASE:
    default:

    break;
 80071f2:	e000      	b.n	80071f6 <MEM_If_GetStatus_FS+0x18>
    break;
 80071f4:	bf00      	nop
  }
  return (USBD_OK);
 80071f6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3714      	adds	r7, #20
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bc80      	pop	{r7}
 8007200:	4770      	bx	lr
	...

08007204 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b084      	sub	sp, #16
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a1e      	ldr	r2, [pc, #120]	; (800728c <HAL_PCD_MspInit+0x88>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d135      	bne.n	8007282 <HAL_PCD_MspInit+0x7e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007216:	4b1e      	ldr	r3, [pc, #120]	; (8007290 <HAL_PCD_MspInit+0x8c>)
 8007218:	69db      	ldr	r3, [r3, #28]
 800721a:	4a1d      	ldr	r2, [pc, #116]	; (8007290 <HAL_PCD_MspInit+0x8c>)
 800721c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007220:	61d3      	str	r3, [r2, #28]
 8007222:	4b1b      	ldr	r3, [pc, #108]	; (8007290 <HAL_PCD_MspInit+0x8c>)
 8007224:	69db      	ldr	r3, [r3, #28]
 8007226:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800722a:	60fb      	str	r3, [r7, #12]
 800722c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800722e:	2200      	movs	r2, #0
 8007230:	2100      	movs	r1, #0
 8007232:	2014      	movs	r0, #20
 8007234:	f7fa f9b9 	bl	80015aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007238:	2014      	movs	r0, #20
 800723a:	f7fa f9d2 	bl	80015e2 <HAL_NVIC_EnableIRQ>
    if(pcdHandle->Init.low_power_enable == 1)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	699b      	ldr	r3, [r3, #24]
 8007242:	2b01      	cmp	r3, #1
 8007244:	d11d      	bne.n	8007282 <HAL_PCD_MspInit+0x7e>
    {
      /* Enable EXTI Line 20 for USB wakeup */
      __HAL_USB_WAKEUP_EXTI_CLEAR_FLAG();
 8007246:	4b13      	ldr	r3, [pc, #76]	; (8007294 <HAL_PCD_MspInit+0x90>)
 8007248:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800724c:	615a      	str	r2, [r3, #20]
      __HAL_USB_WAKEUP_EXTI_ENABLE_RISING_EDGE();
 800724e:	4b11      	ldr	r3, [pc, #68]	; (8007294 <HAL_PCD_MspInit+0x90>)
 8007250:	68db      	ldr	r3, [r3, #12]
 8007252:	4a10      	ldr	r2, [pc, #64]	; (8007294 <HAL_PCD_MspInit+0x90>)
 8007254:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007258:	60d3      	str	r3, [r2, #12]
 800725a:	4b0e      	ldr	r3, [pc, #56]	; (8007294 <HAL_PCD_MspInit+0x90>)
 800725c:	689b      	ldr	r3, [r3, #8]
 800725e:	4a0d      	ldr	r2, [pc, #52]	; (8007294 <HAL_PCD_MspInit+0x90>)
 8007260:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007264:	6093      	str	r3, [r2, #8]
      __HAL_USB_WAKEUP_EXTI_ENABLE_IT();
 8007266:	4b0b      	ldr	r3, [pc, #44]	; (8007294 <HAL_PCD_MspInit+0x90>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a0a      	ldr	r2, [pc, #40]	; (8007294 <HAL_PCD_MspInit+0x90>)
 800726c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007270:	6013      	str	r3, [r2, #0]
      HAL_NVIC_SetPriority(USBWakeUp_IRQn, 0, 0);
 8007272:	2200      	movs	r2, #0
 8007274:	2100      	movs	r1, #0
 8007276:	202a      	movs	r0, #42	; 0x2a
 8007278:	f7fa f997 	bl	80015aa <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(USBWakeUp_IRQn);
 800727c:	202a      	movs	r0, #42	; 0x2a
 800727e:	f7fa f9b0 	bl	80015e2 <HAL_NVIC_EnableIRQ>
    }
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007282:	bf00      	nop
 8007284:	3710      	adds	r7, #16
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}
 800728a:	bf00      	nop
 800728c:	40005c00 	.word	0x40005c00
 8007290:	40021000 	.word	0x40021000
 8007294:	40010400 	.word	0x40010400

08007298 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b082      	sub	sp, #8
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80072ac:	4619      	mov	r1, r3
 80072ae:	4610      	mov	r0, r2
 80072b0:	f7fe fdbc 	bl	8005e2c <USBD_LL_SetupStage>
}
 80072b4:	bf00      	nop
 80072b6:	3708      	adds	r7, #8
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}

080072bc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b082      	sub	sp, #8
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	460b      	mov	r3, r1
 80072c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 80072ce:	78fb      	ldrb	r3, [r7, #3]
 80072d0:	687a      	ldr	r2, [r7, #4]
 80072d2:	015b      	lsls	r3, r3, #5
 80072d4:	4413      	add	r3, r2
 80072d6:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80072da:	681a      	ldr	r2, [r3, #0]
 80072dc:	78fb      	ldrb	r3, [r7, #3]
 80072de:	4619      	mov	r1, r3
 80072e0:	f7fe fdef 	bl	8005ec2 <USBD_LL_DataOutStage>
}
 80072e4:	bf00      	nop
 80072e6:	3708      	adds	r7, #8
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}

080072ec <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b082      	sub	sp, #8
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
 80072f4:	460b      	mov	r3, r1
 80072f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 80072fe:	78fb      	ldrb	r3, [r7, #3]
 8007300:	687a      	ldr	r2, [r7, #4]
 8007302:	015b      	lsls	r3, r3, #5
 8007304:	4413      	add	r3, r2
 8007306:	333c      	adds	r3, #60	; 0x3c
 8007308:	681a      	ldr	r2, [r3, #0]
 800730a:	78fb      	ldrb	r3, [r7, #3]
 800730c:	4619      	mov	r1, r3
 800730e:	f7fe fe49 	bl	8005fa4 <USBD_LL_DataInStage>
}
 8007312:	bf00      	nop
 8007314:	3708      	adds	r7, #8
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}

0800731a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800731a:	b580      	push	{r7, lr}
 800731c:	b082      	sub	sp, #8
 800731e:	af00      	add	r7, sp, #0
 8007320:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007328:	4618      	mov	r0, r3
 800732a:	f7fe ff59 	bl	80061e0 <USBD_LL_SOF>
}
 800732e:	bf00      	nop
 8007330:	3708      	adds	r7, #8
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}

08007336 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007336:	b580      	push	{r7, lr}
 8007338:	b084      	sub	sp, #16
 800733a:	af00      	add	r7, sp, #0
 800733c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800733e:	2301      	movs	r3, #1
 8007340:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	689b      	ldr	r3, [r3, #8]
 8007346:	2b02      	cmp	r3, #2
 8007348:	d001      	beq.n	800734e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800734a:	f7f9 fa95 	bl	8000878 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007354:	7bfa      	ldrb	r2, [r7, #15]
 8007356:	4611      	mov	r1, r2
 8007358:	4618      	mov	r0, r3
 800735a:	f7fe ff09 	bl	8006170 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007364:	4618      	mov	r0, r3
 8007366:	f7fe fec2 	bl	80060ee <USBD_LL_Reset>
}
 800736a:	bf00      	nop
 800736c:	3710      	adds	r7, #16
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}
	...

08007374 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b082      	sub	sp, #8
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007382:	4618      	mov	r0, r3
 8007384:	f7fe ff03 	bl	800618e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	699b      	ldr	r3, [r3, #24]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d005      	beq.n	800739c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007390:	4b04      	ldr	r3, [pc, #16]	; (80073a4 <HAL_PCD_SuspendCallback+0x30>)
 8007392:	691b      	ldr	r3, [r3, #16]
 8007394:	4a03      	ldr	r2, [pc, #12]	; (80073a4 <HAL_PCD_SuspendCallback+0x30>)
 8007396:	f043 0306 	orr.w	r3, r3, #6
 800739a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800739c:	bf00      	nop
 800739e:	3708      	adds	r7, #8
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}
 80073a4:	e000ed00 	.word	0xe000ed00

080073a8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b082      	sub	sp, #8
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80073b6:	4618      	mov	r0, r3
 80073b8:	f7fe fefd 	bl	80061b6 <USBD_LL_Resume>
}
 80073bc:	bf00      	nop
 80073be:	3708      	adds	r7, #8
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}

080073c4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b082      	sub	sp, #8
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80073cc:	4a1b      	ldr	r2, [pc, #108]	; (800743c <USBD_LL_Init+0x78>)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	4a19      	ldr	r2, [pc, #100]	; (800743c <USBD_LL_Init+0x78>)
 80073d8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80073dc:	4b17      	ldr	r3, [pc, #92]	; (800743c <USBD_LL_Init+0x78>)
 80073de:	4a18      	ldr	r2, [pc, #96]	; (8007440 <USBD_LL_Init+0x7c>)
 80073e0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80073e2:	4b16      	ldr	r3, [pc, #88]	; (800743c <USBD_LL_Init+0x78>)
 80073e4:	2208      	movs	r2, #8
 80073e6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80073e8:	4b14      	ldr	r3, [pc, #80]	; (800743c <USBD_LL_Init+0x78>)
 80073ea:	2202      	movs	r2, #2
 80073ec:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = ENABLE;
 80073ee:	4b13      	ldr	r3, [pc, #76]	; (800743c <USBD_LL_Init+0x78>)
 80073f0:	2201      	movs	r2, #1
 80073f2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80073f4:	4b11      	ldr	r3, [pc, #68]	; (800743c <USBD_LL_Init+0x78>)
 80073f6:	2200      	movs	r2, #0
 80073f8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80073fa:	4b10      	ldr	r3, [pc, #64]	; (800743c <USBD_LL_Init+0x78>)
 80073fc:	2200      	movs	r2, #0
 80073fe:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007400:	480e      	ldr	r0, [pc, #56]	; (800743c <USBD_LL_Init+0x78>)
 8007402:	f7fa fab5 	bl	8001970 <HAL_PCD_Init>
 8007406:	4603      	mov	r3, r0
 8007408:	2b00      	cmp	r3, #0
 800740a:	d001      	beq.n	8007410 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800740c:	f7f9 fa34 	bl	8000878 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007416:	2318      	movs	r3, #24
 8007418:	2200      	movs	r2, #0
 800741a:	2100      	movs	r1, #0
 800741c:	f7fb f928 	bl	8002670 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007426:	2358      	movs	r3, #88	; 0x58
 8007428:	2200      	movs	r2, #0
 800742a:	2180      	movs	r1, #128	; 0x80
 800742c:	f7fb f920 	bl	8002670 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  return USBD_OK;
 8007430:	2300      	movs	r3, #0
}
 8007432:	4618      	mov	r0, r3
 8007434:	3708      	adds	r7, #8
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}
 800743a:	bf00      	nop
 800743c:	20001d88 	.word	0x20001d88
 8007440:	40005c00 	.word	0x40005c00

08007444 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b084      	sub	sp, #16
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800744c:	2300      	movs	r3, #0
 800744e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007450:	2300      	movs	r3, #0
 8007452:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800745a:	4618      	mov	r0, r3
 800745c:	f7fa fb69 	bl	8001b32 <HAL_PCD_Start>
 8007460:	4603      	mov	r3, r0
 8007462:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007464:	7bfb      	ldrb	r3, [r7, #15]
 8007466:	4618      	mov	r0, r3
 8007468:	f000 f930 	bl	80076cc <USBD_Get_USB_Status>
 800746c:	4603      	mov	r3, r0
 800746e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007470:	7bbb      	ldrb	r3, [r7, #14]
}
 8007472:	4618      	mov	r0, r3
 8007474:	3710      	adds	r7, #16
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}

0800747a <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 800747a:	b580      	push	{r7, lr}
 800747c:	b084      	sub	sp, #16
 800747e:	af00      	add	r7, sp, #0
 8007480:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007482:	2300      	movs	r3, #0
 8007484:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007486:	2300      	movs	r3, #0
 8007488:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007490:	4618      	mov	r0, r3
 8007492:	f7fa fb74 	bl	8001b7e <HAL_PCD_Stop>
 8007496:	4603      	mov	r3, r0
 8007498:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800749a:	7bfb      	ldrb	r3, [r7, #15]
 800749c:	4618      	mov	r0, r3
 800749e:	f000 f915 	bl	80076cc <USBD_Get_USB_Status>
 80074a2:	4603      	mov	r3, r0
 80074a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80074a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3710      	adds	r7, #16
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}

080074b0 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b084      	sub	sp, #16
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
 80074b8:	4608      	mov	r0, r1
 80074ba:	4611      	mov	r1, r2
 80074bc:	461a      	mov	r2, r3
 80074be:	4603      	mov	r3, r0
 80074c0:	70fb      	strb	r3, [r7, #3]
 80074c2:	460b      	mov	r3, r1
 80074c4:	70bb      	strb	r3, [r7, #2]
 80074c6:	4613      	mov	r3, r2
 80074c8:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074ca:	2300      	movs	r3, #0
 80074cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074ce:	2300      	movs	r3, #0
 80074d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80074d8:	78bb      	ldrb	r3, [r7, #2]
 80074da:	883a      	ldrh	r2, [r7, #0]
 80074dc:	78f9      	ldrb	r1, [r7, #3]
 80074de:	f7fa fcb1 	bl	8001e44 <HAL_PCD_EP_Open>
 80074e2:	4603      	mov	r3, r0
 80074e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80074e6:	7bfb      	ldrb	r3, [r7, #15]
 80074e8:	4618      	mov	r0, r3
 80074ea:	f000 f8ef 	bl	80076cc <USBD_Get_USB_Status>
 80074ee:	4603      	mov	r3, r0
 80074f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80074f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3710      	adds	r7, #16
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}

080074fc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b084      	sub	sp, #16
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
 8007504:	460b      	mov	r3, r1
 8007506:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007508:	2300      	movs	r3, #0
 800750a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800750c:	2300      	movs	r3, #0
 800750e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007516:	78fa      	ldrb	r2, [r7, #3]
 8007518:	4611      	mov	r1, r2
 800751a:	4618      	mov	r0, r3
 800751c:	f7fa fd65 	bl	8001fea <HAL_PCD_EP_SetStall>
 8007520:	4603      	mov	r3, r0
 8007522:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007524:	7bfb      	ldrb	r3, [r7, #15]
 8007526:	4618      	mov	r0, r3
 8007528:	f000 f8d0 	bl	80076cc <USBD_Get_USB_Status>
 800752c:	4603      	mov	r3, r0
 800752e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007530:	7bbb      	ldrb	r3, [r7, #14]
}
 8007532:	4618      	mov	r0, r3
 8007534:	3710      	adds	r7, #16
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}

0800753a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800753a:	b580      	push	{r7, lr}
 800753c:	b084      	sub	sp, #16
 800753e:	af00      	add	r7, sp, #0
 8007540:	6078      	str	r0, [r7, #4]
 8007542:	460b      	mov	r3, r1
 8007544:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007546:	2300      	movs	r3, #0
 8007548:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800754a:	2300      	movs	r3, #0
 800754c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007554:	78fa      	ldrb	r2, [r7, #3]
 8007556:	4611      	mov	r1, r2
 8007558:	4618      	mov	r0, r3
 800755a:	f7fa fda0 	bl	800209e <HAL_PCD_EP_ClrStall>
 800755e:	4603      	mov	r3, r0
 8007560:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007562:	7bfb      	ldrb	r3, [r7, #15]
 8007564:	4618      	mov	r0, r3
 8007566:	f000 f8b1 	bl	80076cc <USBD_Get_USB_Status>
 800756a:	4603      	mov	r3, r0
 800756c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800756e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007570:	4618      	mov	r0, r3
 8007572:	3710      	adds	r7, #16
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}

08007578 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007578:	b480      	push	{r7}
 800757a:	b085      	sub	sp, #20
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
 8007580:	460b      	mov	r3, r1
 8007582:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800758a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800758c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007590:	2b00      	cmp	r3, #0
 8007592:	da08      	bge.n	80075a6 <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007594:	78fb      	ldrb	r3, [r7, #3]
 8007596:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800759a:	68fa      	ldr	r2, [r7, #12]
 800759c:	015b      	lsls	r3, r3, #5
 800759e:	4413      	add	r3, r2
 80075a0:	332a      	adds	r3, #42	; 0x2a
 80075a2:	781b      	ldrb	r3, [r3, #0]
 80075a4:	e008      	b.n	80075b8 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80075a6:	78fb      	ldrb	r3, [r7, #3]
 80075a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075ac:	68fa      	ldr	r2, [r7, #12]
 80075ae:	015b      	lsls	r3, r3, #5
 80075b0:	4413      	add	r3, r2
 80075b2:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 80075b6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3714      	adds	r7, #20
 80075bc:	46bd      	mov	sp, r7
 80075be:	bc80      	pop	{r7}
 80075c0:	4770      	bx	lr

080075c2 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80075c2:	b580      	push	{r7, lr}
 80075c4:	b084      	sub	sp, #16
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	6078      	str	r0, [r7, #4]
 80075ca:	460b      	mov	r3, r1
 80075cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075ce:	2300      	movs	r3, #0
 80075d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075d2:	2300      	movs	r3, #0
 80075d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80075dc:	78fa      	ldrb	r2, [r7, #3]
 80075de:	4611      	mov	r1, r2
 80075e0:	4618      	mov	r0, r3
 80075e2:	f7fa fc0a 	bl	8001dfa <HAL_PCD_SetAddress>
 80075e6:	4603      	mov	r3, r0
 80075e8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075ea:	7bfb      	ldrb	r3, [r7, #15]
 80075ec:	4618      	mov	r0, r3
 80075ee:	f000 f86d 	bl	80076cc <USBD_Get_USB_Status>
 80075f2:	4603      	mov	r3, r0
 80075f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80075f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	3710      	adds	r7, #16
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}

08007600 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b086      	sub	sp, #24
 8007604:	af00      	add	r7, sp, #0
 8007606:	60f8      	str	r0, [r7, #12]
 8007608:	607a      	str	r2, [r7, #4]
 800760a:	461a      	mov	r2, r3
 800760c:	460b      	mov	r3, r1
 800760e:	72fb      	strb	r3, [r7, #11]
 8007610:	4613      	mov	r3, r2
 8007612:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007614:	2300      	movs	r3, #0
 8007616:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007618:	2300      	movs	r3, #0
 800761a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007622:	893b      	ldrh	r3, [r7, #8]
 8007624:	7af9      	ldrb	r1, [r7, #11]
 8007626:	687a      	ldr	r2, [r7, #4]
 8007628:	f7fa fca6 	bl	8001f78 <HAL_PCD_EP_Transmit>
 800762c:	4603      	mov	r3, r0
 800762e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007630:	7dfb      	ldrb	r3, [r7, #23]
 8007632:	4618      	mov	r0, r3
 8007634:	f000 f84a 	bl	80076cc <USBD_Get_USB_Status>
 8007638:	4603      	mov	r3, r0
 800763a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800763c:	7dbb      	ldrb	r3, [r7, #22]
}
 800763e:	4618      	mov	r0, r3
 8007640:	3718      	adds	r7, #24
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}

08007646 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007646:	b580      	push	{r7, lr}
 8007648:	b086      	sub	sp, #24
 800764a:	af00      	add	r7, sp, #0
 800764c:	60f8      	str	r0, [r7, #12]
 800764e:	607a      	str	r2, [r7, #4]
 8007650:	461a      	mov	r2, r3
 8007652:	460b      	mov	r3, r1
 8007654:	72fb      	strb	r3, [r7, #11]
 8007656:	4613      	mov	r3, r2
 8007658:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800765a:	2300      	movs	r3, #0
 800765c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800765e:	2300      	movs	r3, #0
 8007660:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007668:	893b      	ldrh	r3, [r7, #8]
 800766a:	7af9      	ldrb	r1, [r7, #11]
 800766c:	687a      	ldr	r2, [r7, #4]
 800766e:	f7fa fc49 	bl	8001f04 <HAL_PCD_EP_Receive>
 8007672:	4603      	mov	r3, r0
 8007674:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007676:	7dfb      	ldrb	r3, [r7, #23]
 8007678:	4618      	mov	r0, r3
 800767a:	f000 f827 	bl	80076cc <USBD_Get_USB_Status>
 800767e:	4603      	mov	r3, r0
 8007680:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007682:	7dbb      	ldrb	r3, [r7, #22]
}
 8007684:	4618      	mov	r0, r3
 8007686:	3718      	adds	r7, #24
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}

0800768c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800768c:	b480      	push	{r7}
 800768e:	b083      	sub	sp, #12
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_DFU_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007694:	4b02      	ldr	r3, [pc, #8]	; (80076a0 <USBD_static_malloc+0x14>)
}
 8007696:	4618      	mov	r0, r3
 8007698:	370c      	adds	r7, #12
 800769a:	46bd      	mov	sp, r7
 800769c:	bc80      	pop	{r7}
 800769e:	4770      	bx	lr
 80076a0:	20000218 	.word	0x20000218

080076a4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b083      	sub	sp, #12
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]

}
 80076ac:	bf00      	nop
 80076ae:	370c      	adds	r7, #12
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bc80      	pop	{r7}
 80076b4:	4770      	bx	lr

080076b6 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076b6:	b480      	push	{r7}
 80076b8:	b083      	sub	sp, #12
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	6078      	str	r0, [r7, #4]
 80076be:	460b      	mov	r3, r1
 80076c0:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80076c2:	bf00      	nop
 80076c4:	370c      	adds	r7, #12
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bc80      	pop	{r7}
 80076ca:	4770      	bx	lr

080076cc <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b085      	sub	sp, #20
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	4603      	mov	r3, r0
 80076d4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076d6:	2300      	movs	r3, #0
 80076d8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80076da:	79fb      	ldrb	r3, [r7, #7]
 80076dc:	2b03      	cmp	r3, #3
 80076de:	d817      	bhi.n	8007710 <USBD_Get_USB_Status+0x44>
 80076e0:	a201      	add	r2, pc, #4	; (adr r2, 80076e8 <USBD_Get_USB_Status+0x1c>)
 80076e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076e6:	bf00      	nop
 80076e8:	080076f9 	.word	0x080076f9
 80076ec:	080076ff 	.word	0x080076ff
 80076f0:	08007705 	.word	0x08007705
 80076f4:	0800770b 	.word	0x0800770b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80076f8:	2300      	movs	r3, #0
 80076fa:	73fb      	strb	r3, [r7, #15]
    break;
 80076fc:	e00b      	b.n	8007716 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80076fe:	2302      	movs	r3, #2
 8007700:	73fb      	strb	r3, [r7, #15]
    break;
 8007702:	e008      	b.n	8007716 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007704:	2301      	movs	r3, #1
 8007706:	73fb      	strb	r3, [r7, #15]
    break;
 8007708:	e005      	b.n	8007716 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800770a:	2302      	movs	r3, #2
 800770c:	73fb      	strb	r3, [r7, #15]
    break;
 800770e:	e002      	b.n	8007716 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007710:	2302      	movs	r3, #2
 8007712:	73fb      	strb	r3, [r7, #15]
    break;
 8007714:	bf00      	nop
  }
  return usb_status;
 8007716:	7bfb      	ldrb	r3, [r7, #15]
}
 8007718:	4618      	mov	r0, r3
 800771a:	3714      	adds	r7, #20
 800771c:	46bd      	mov	sp, r7
 800771e:	bc80      	pop	{r7}
 8007720:	4770      	bx	lr
 8007722:	bf00      	nop

08007724 <__libc_init_array>:
 8007724:	b570      	push	{r4, r5, r6, lr}
 8007726:	2500      	movs	r5, #0
 8007728:	4e0c      	ldr	r6, [pc, #48]	; (800775c <__libc_init_array+0x38>)
 800772a:	4c0d      	ldr	r4, [pc, #52]	; (8007760 <__libc_init_array+0x3c>)
 800772c:	1ba4      	subs	r4, r4, r6
 800772e:	10a4      	asrs	r4, r4, #2
 8007730:	42a5      	cmp	r5, r4
 8007732:	d109      	bne.n	8007748 <__libc_init_array+0x24>
 8007734:	f000 f822 	bl	800777c <_init>
 8007738:	2500      	movs	r5, #0
 800773a:	4e0a      	ldr	r6, [pc, #40]	; (8007764 <__libc_init_array+0x40>)
 800773c:	4c0a      	ldr	r4, [pc, #40]	; (8007768 <__libc_init_array+0x44>)
 800773e:	1ba4      	subs	r4, r4, r6
 8007740:	10a4      	asrs	r4, r4, #2
 8007742:	42a5      	cmp	r5, r4
 8007744:	d105      	bne.n	8007752 <__libc_init_array+0x2e>
 8007746:	bd70      	pop	{r4, r5, r6, pc}
 8007748:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800774c:	4798      	blx	r3
 800774e:	3501      	adds	r5, #1
 8007750:	e7ee      	b.n	8007730 <__libc_init_array+0xc>
 8007752:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007756:	4798      	blx	r3
 8007758:	3501      	adds	r5, #1
 800775a:	e7f2      	b.n	8007742 <__libc_init_array+0x1e>
 800775c:	08007870 	.word	0x08007870
 8007760:	08007870 	.word	0x08007870
 8007764:	08007870 	.word	0x08007870
 8007768:	08007874 	.word	0x08007874

0800776c <memset>:
 800776c:	4603      	mov	r3, r0
 800776e:	4402      	add	r2, r0
 8007770:	4293      	cmp	r3, r2
 8007772:	d100      	bne.n	8007776 <memset+0xa>
 8007774:	4770      	bx	lr
 8007776:	f803 1b01 	strb.w	r1, [r3], #1
 800777a:	e7f9      	b.n	8007770 <memset+0x4>

0800777c <_init>:
 800777c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800777e:	bf00      	nop
 8007780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007782:	bc08      	pop	{r3}
 8007784:	469e      	mov	lr, r3
 8007786:	4770      	bx	lr

08007788 <_fini>:
 8007788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800778a:	bf00      	nop
 800778c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800778e:	bc08      	pop	{r3}
 8007790:	469e      	mov	lr, r3
 8007792:	4770      	bx	lr
